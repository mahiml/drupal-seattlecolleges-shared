<?php

function revisiontags_views_views_tables() {
  $revision_tags = array('!revision_tags' => t('Revision tags'));
  return array(
    'revision_tags' => array(
      'name' => 'revision_tags',
      'join' => array(
        'left' => array(
          'table' => 'node',
          'field' => 'vid'
        ),
        'right' => array(
          'field' => 'vid'
        ),
      ),

      'fields' => array(
        'tag' => array(
          'name'       => t('!revision_tags: Tag', $revision_tags),
          'help'       => t("Display this revision's tag"),
          'sortable'   => TRUE,
        ),
      ),

      'filters' => array(
        'tag' => array(
          'help'       => t('Filter on Revision tag.'),
          'list'       => 'revisiontags_views_filter_tag',
          'name'       => t('!revision_tags: Tag', $revision_tags),
          'operator'   => views_handler_operator_andor(),
          'value-type' => 'array',
        ),
        'public' => array(
          'name'       => t('!revision_tags: Public', $revision_tags),
          'help'       => t('Filter on whether a revision tag is public or private'),
          'operator'   => array('=' => t('Equals')),
          'list'       => 'views_handler_operator_yesno',
          'list-type'  => 'select',
         ),
      ),
    ),
  );
}

// TODO: To be able to see revisions and tags (not just the tag of the current
// revision), we need a join on nid. This probably dictates an alias?

/**
 * Views filter handler; filter by Revision tag
 */
function revisiontags_views_filter_tag() {
  // In order to let there be a filter on "public", we can't
  // just hardcode public = 1 into this query. Except that
  // if a user cannot administer nodes or tag revisions,
  // they shouldn't ever see non-public revision tags. So we
  // do an explicit access check.
  $where = '';
  if (!(user_access('administer nodes') || user_access('tag revisions'))) {
    $where = 'WHERE public = 1';
  }
  $results = db_query('SELECT DISTINCT tag FROM {revision_tags}'. $where);
  while ($result = db_fetch_object($results)) {
    $tag = check_plain($result->tag);
    $options[$tag] = $tag;
  }
  return $options;
}
