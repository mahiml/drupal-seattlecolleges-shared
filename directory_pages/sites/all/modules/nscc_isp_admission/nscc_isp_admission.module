<?php
// $Id$

/**
 *	 @file nscc_isp_admission.module
 *
 *	 Customized functionality for International Program site
 */


/**
 *	 Contstants used by application form processor.
 */
define('ISP_APPLICATION_FEE', 50);	//USD
define('ISP_DEPOSIT_AMOUNT', 4500);	//USD



/**
 *	 HOOK_menu()
 */
function nscc_isp_admission_menu() {
  $items['international-student-admission-form'] = array(
	 'title' => 'International Admissions Application',
	 'page callback' => 'nscc_isp_admission_page',
	 'access arguments' => array('access content'),
	 'type' => MENU_CALLBACK,
  );
  $items['international-agent-application'] = array(
  	'title' => 'International Agent Application',
  	'page callback' => 'nscc_isp_agent_page',
  	'access arguments' => array('access content'),
  	'type' => MENU_CALLBACK,
  );
  return $items;
}



/**
 *	 Menu callback: Student Application Form
 */
function nscc_isp_admission_page() {
	$applicant_note = t('Homestays in the Seattle area are currently full, so we are unable to accept any underage students after Aug 17 who are not already living with a family member in the Seattle area. All other students will need to arrange their own housing.');
	if (time() < strtotime('2012-09-01')) {
		$out[] = "<p class=\"warning\">$applicant_note</p>";
	}
	$out[] = '<p class="form-preable">';
	$out[] = t('International students applying for admission to NSC must complete this form. Required items are marked !req-mark', array('!req-mark' => '<span title="This field is required." class="form-required">*</span>'));
	$out[] = '</p>';
	$out[] = drupal_get_form('nscc_isp_admission_form');
	return implode("\n", $out);
}



/**
 *	 Menu callback: Agent Application Form
 */
function nscc_isp_agent_page() {
	$out[] = '<p class="form-preable">';
  $out[] = t('International student agencies seeking to establish business relations with NSC must complete this application form. Required items are marked !req-mark', array('!req-mark' => '<span title="This field is required." class="form-required">*</span>'));
  $out[] = '</p>';
  $out[] = drupal_get_form('nscc_isp_agent_form');
  return implode("\n", $out);
}



/**
 *	 HOOK_block()
 */
function nscc_isp_admission_block($op='list', $delta=0, $edit=array()) {
	switch ($op) {

		case 'list':
			$blocks[0]['info'] = t('International Program Address');
			$blocks[0]['cache'] = BLOCK_CACHE_GLOBAL;
			$blocks[1]['info'] = t('Agent info links');
			$blocks[1]['cache'] = BLOCK_CACHE_GLOBAL;
			$blocks[2]['info'] = t('Ask an Advisor');
			$blocks[2]['cache'] = BLOCK_CACHE_GLOBAL;
			return $blocks;

		case 'view':
			$block = array();
			switch ($delta) {

				// International Program Address
				case 0:
					jq_add('overlay');
					drupal_add_js(drupal_get_path('module', 'nscc') .'/nscc.addressblock-overlay.js');
					$vcard = nscc_isp_vcard();
					$block['subject'] = '';
					$block['content'] = <<<IP_ADDR_BLOCK
<!-- SwishCommand noindex -->
<div class="vcard">
 	<span class="org">
		<span class="organization-unit fn"><a class="email" href="mailto:{$vcard['email']['address']}">{$vcard['org']['org-unit']}</a></span>
		<span class="organization-name">{$vcard['org']['org-name']}</span>
	</span>
 	<div class="addr">
		<span class="street-address">{$vcard['addr']['street']}</span>
 		<span class="locality">{$vcard['addr']['locality']}</span>,
		<abbr class="region" title="{$vcard['addr']['region']['name']}">{$vcard['addr']['region']['abbr']}</abbr> 
		<span class="postal-code">{$vcard['addr']['postal']}</span> 
		<abbr class="country-name" title="{$vcard['addr']['country']['name']}">{$vcard['addr']['country']['abbr']}</abbr>
	</div>
	<span class="tel">
		<span class="value">{$vcard['tel']['voice']}</span> (<span class="type">voice</span>)
	</span>
	<span class="tel">
		<span class="value">{$vcard['tel']['fax']}</span> (<span class="type">fax</span>)
	</span>
</div>
<img src="/sites/all/modules/nscc_isp_admission/imgs/nscc-ip-qr-small.png" class="address-qrcode" id="qrAddr-overlay-trigger" alt="NSC International Program QR" />
<div id="qrcode_overlay" class="effect_overlay">
	<img alt="NSC QR" src="/sites/all/modules/nscc_isp_admission/imgs/nscc-ip-qr-med.png" style="margin: 0 auto;" />
	<p style="width: 200px; text-align: center;">Scan this <a href="http://en.wikipedia.org/wiki/QR_Code" id="wikipedia-entry-qr">QR Code</a> to add us to your phone's contacts.</p>
</div>
<!-- SwishCommand index -->
IP_ADDR_BLOCK;
					return $block;

				// Agents Info links
				case 1:
					$block['subject'] = 'Agent Info';
					$block['content'] = <<<AGENT_INFO_BLOCK
<ul>
<li><a href="/agent">Agents Info</a></li>
<li><a href="/agent/materials">Promo Material</a></li>
</ul>
AGENT_INFO_BLOCK;
					return $block;

				// Ask an Advisor
				case 2:
					$block['subject'] = 'Ask an Advisor';
					$block['content'] = '<p>Need help? Not sure where to start? Ask us.</p>';
					return $block;
			}
	}
}



/**
 *	 ISP student application: Form definition
 *
 *	@todo Add select-list + other-field for majors (waiting for list from IP dept)
 */
function nscc_isp_admission_form($form_state) {
	drupal_add_css(drupal_get_path('module', 'nscc_isp_admission'). '/nscc_isp_admission.css');
	drupal_add_js(drupal_get_path('module', 'nscc_isp_admission') . '/nscc_isp_admission.js');
	$vcard = nscc_isp_vcard();
	
  $form['#attributes'] = array(
	 'enctype' => 'multipart/form-data',
  );
  //$form['#redirect'] = 'international-application-received';

  

  // Personal info
  $form['student_info'] = array(
	 '#title' => t('Student Information'),
	 '#type' => 'fieldset',
	 '#description' => t('Personal information about the student applying for admission to NSC.'),
	 '#collapsible' => true,
  );
  $form['student_info']['student_surname'] = array(
	 '#title' => t('Family Name'),
	 '#type' => 'textfield',
	 '#description' => t('Surname or family name as it appears on student\'s passport.'),
	 '#size' => 25,
	 '#maxlength' => 25,
	 '#required' => true,
  );
  $form['student_info']['student_given_name'] = array(
	 '#title' => t('First Name'),
	 '#type' => 'textfield',
	 '#description' => t('First- or given-name as it appears on student\'s passport.'),
	 '#size' => 25,
	 '#maxlength' => 25,
	 '#required' => true,
  );
  $form['student_info']['student_middle_name'] = array(
	 '#title' => t('Middle Name'),
	 '#type' => 'textfield',
	 '#description' => t('Second- or middle-name as it appears on student\'s passport. Leave this empty if it\'s not applicable.'),
	 '#size' => 25,
	 '#maxlength' => 25,
  );
  $form['student_info']['birthdate'] = array(
	 '#title' => t('Birthdate'),
	 '#type' => 'date',
	 '#description' => t('Student\'s date of birth.'),
	 '#required' => true,
  );
  $form['student_info']['gender'] = array(
	 '#title' => t('Gender'),
	 '#description' => t('Please indicate whether student is female or male.'),
	 '#type' => 'radios',
	 '#options' => array(
		'f' => t('Female'),
		'm' => t('Male')
	 ),
	 '#required' => true,
  );
  $form['student_info']['married'] = array(
	 '#title' => t('Is student married?'),
	 '#type' => 'radios',
	 '#description' => t('Please indicate whether student is currently married or not.'),
	 '#options' => array(
	 	't' => t('Yes, student is married.'),
	 	'f' => t('No, student is not married.'),
	 ),
	 '#required' => true,
  );
  
  
  // Address & Contact
  $form['addr_info'] = array(
	 '#title' => t('Permanent Address and Contact'),
	 '#type' => 'fieldset',
	 '#description' => t('Student\'s permanent address and contact information in his or her home country.'),
	 '#collapsible' => true,
  );
  $form['addr_info']['home_street_addr'] = array(
	 '#title' => t('Street'),
	 '#type' => 'textarea',
	 '#description' => t('Permanent street address in home country.'),
	 '#rows' => 4,
	 '#cols' => 60,
	 '#required' => true,
  );
  $form['addr_info']['home_locality'] = array(
	 '#title' => t('City'),
	 '#type' => 'textfield',
	 '#description' => t('The city, town, village, or locality of permanent address in home country.'),
	 '#size' => 60,
	 '#maxlength' => 60,
	 '#required' => true,
  );
  $form['addr_info']['home_region'] = array(
	 '#title' => t('State/Province'),
	 '#type' => 'textfield',
	 '#description' => t('The state, province, region of permanent address in home country.'),
	 '#size' => 60,
	 '#maxlength' => 60,
  );
  $form['addr_info']['home_postal_code'] = array(
	 '#title' => t('Postal/ZIP Code'),
	 '#type' => 'textfield',
	 '#description' => t('The mailstop, ZIP, or postal-code of permanent address in home country.'),
	 '#size' => 60,
	 '#maxlength' => 60,
	 '#required' => true,
  );
  $form['addr_info']['home_country_code'] = array(
	 '#title' => t('Home Country'),
	 '#type' => 'select',
	 '#options' => _get_countries_array(true),
	 '#description' => t('The student\'s home country.'),
	 '#required' => true,
  );
  $form['addr_info']['home_country'] = array(
	 '#title' => t('Home Country (not listed)'),
	 '#type' => 'textfield',
	 '#description' => t('If the home country does not	 appear in the list above, select %other and type your home country into this field.', array('%other' => 'Other')),
  );
  $form['addr_info']['home_phone'] = array(
	 '#title' => t('Phone'),
	 '#type' => 'textfield',
	 '#description' => t('Student\'s telephone number in home country. Please include full number including country country code and local exchange numbers as applicable.'),
	 '#size' => 25,
	 '#maxlength' => 25,
	 '#required' => true,
  );
  $form['addr_info']['home_fax'] = array(
	 '#title' => t('Fax'),
	 '#type' => 'textfield',
	 '#description' => t('Student\'s t fax number in home country. Please include full number including country country code and local exchange numbers as applicable.'),
	 '#size' => 25,
	 '#maxlength' => 25,
  );
  $form['addr_info']['student_email'] = array(
	 '#title' => t('Email'),
	 '#type' =>'textfield',
	 '#description' => t('The email address we may use for contacting student. An acknowledgement will be sent here when this application is submitted.'),
	 '#size' => 25,
	 '#maxlength' => 254,
	 '#required' => true,
  );

  //Emergency Contact	
  $form['ec_info'] = array(
	 '#title' => t('Emergency Contact'),
	 '#type' => 'fieldset',
	 '#description' => t('Whom NSC should contact in case of an emergency.'),
	 '#collapsible' => true,
  );
  $form['ec_info']['emergency_contact_name'] = array(
	 '#title' => t('Name'),
	 '#type' => 'textfield',
	 '#description' => t('The name of the person we should contact in an emergency'),
	 '#size' => 25,
	 '#maxlength' => 25,
  );
  $form['ec_info']['emergency_contact_relation'] = array(
  	'#title' => t('Relationship'),
  	'#type' => 'textfield',
  	'#description' => t('The contact\'s relationship to student. Ex: Mother, brother, aunt, cousin, etc.'),
  	'#size' => 25,
  	'#maxlength' => 25,
  );
  $form['ec_info']['emergency_contact_phone'] = array(
	 '#title' => t('Phone'),
	 '#type' => 'textfield',
	 '#description' => t('The telephone number where we may reach student\'s emergency contact. Please include full number including country country code and local exchange numbers as applicable.'),
	 '#size' => 25,
	 '#maxlength' => 25,
  );

  // Local Contact or Agent
  $form['local_contact_info'] = array(
	 '#title' => t('Agent or Local Contact'),
	 '#type' => 'fieldset',
	 '#description' => t('If student has an agent or local contact in the United States, please provide that contact information.'),
	 '#collapsible' => true,
  );
  $form['local_contact_info']['local_contact_agency'] = array(
	 '#title' => t('Agency Name'),
	 '#type' => 'textfield',
	 '#description' => t('The name of student\'s agency, if applicable. Please provide the U.S. name, if different from home-country name.'),
	 '#size' => 25,
	 '#maxlength' => 25,
  );
  $form['local_contact_info']['local_contact_name'] = array(
	 '#title' => t('Name'),
	 '#type' => 'textfield',
	 '#description' => t('The name of student\'s local contact.'),
	 '#size' => 25,
	 '#maxlength' => 25,
  );
  $form['local_contact_info']['local_contact_relation'] = array(
	 '#title' => t('Relationship'),
	 '#type' => 'textfield',
	 '#description' => t('Ex: Agent, Brother, Aunt, Cousin, Friend, etc.'),
	 '#size' => 25,
	 '#maxlength' => 25,
  );
  $form['local_contact_info']['local_contact_addr'] = array(
	 '#title' => t('Street Address'),
	 '#type' => 'textarea',
	 '#description' => t('The street address of local contact'),
	 '#cols' => 60,
	 '#rows' => 4,
  );
  $form['local_contact_info']['local_contact_locality'] = array(
	 '#title' => t('City'),
	 '#type' => 'textfield',
	 '#description' => t('Local contact\'s city, county, or town.'),
	 '#size' => 60,
	 '#maxlength' => 60,
  );
  $form['local_contact_info']['local_contact_region'] = array(
	 '#title' => t('State/Province'),
	 '#type' => 'textfield',
	 '#description' => t('Local contact\'s state or province.'),
	 '#size' => 60,
	 '#maxlength' => 60,
  );
  $form['local_contact_info']['local_contact_postal_code'] = array(
	 '#title' => t('Postal/ZIP code'),
	 '#type' => 'textfield',
	 '#description' => t('Local contact\'s Postal or ZIP code.'),
	 '#size' => 60,
	 '#maxlength' => 60,
  );
  $form['local_contact_info']['local_contact_phone'] = array(
	 '#title' => t('Phone'),
	 '#type' => 'textfield',
	 '#description' => t('Local contact\'s telephone number. Please include the area code.'),
	 '#size' => 25,
	 '#maxlength' => 25,
  );
  $form['local_contact_info']['i20_destination'] = array(
	 '#title' => t('I-20 delivery option'),
	 '#description' => t('Please indicate how you would like to receive your I-20 document.'),
	 '#type' => 'radios',
	 '#options' => array(
	 	'home' => t('Send I-20 to student\'s home address.'),
	 	'agent' => t('Send I-20 to student\'s agent.'),
	 	'will-call' => t('Student will pickup I-20 at NSC IP office.'),
	 ),
	 '#required' => true,
  );
 
  // Citizenship & Visa
  $form['citizen_visa_info'] = array(
	 '#title' => t('Citizenship and Visa'),
	 '#type' => 'fieldset',
	 '#description' => t('Student\'s citizenship and current visa information'),
	 '#collapsible' => true,
  );
  $form['citizen_visa_info']['birth_country_code'] = array(
	 '#title' => t('Country of Birth'),
	 '#type' => 'select',
	 '#options' => _get_countries_array(true),
	 '#description' => t('The country in which student was born.'),
	 '#required' => true,
  );
  $form['citizen_visa_info']['birth_country'] = array(
	 '#title' => t('Country of Birth (not listed)'),
	 '#type' => 'textfield',
	 '#description' => t('If the birth country does not appear in the list above, select %other and type the birth country into this field.', array('%other' => 'Other')),
  );
  $form['citizen_visa_info']['citizen_country_code'] = array(
	 '#title' => t('Country of Citizenship'),
	 '#type' => 'select',
	 '#options' => _get_countries_array(true),
	 '#description' => t('The student\'s country of citizenship'),
	 '#required' => true,
  );
  $form['citizen_visa_info']['citizen_country'] = array(
	 '#title' => t('Country of Citizenship (not listed)'),
	 '#type' => 'textfield',
	 '#description' => t('If the country of citizenship does not appear in the list above, select %other and type the country of citizenship into this field.', array('%other' => 'Other')),
  );
  $form['citizen_visa_info']['in_usa'] = array(
	 '#title' => t('I am currently in the USA'),
	 '#type' => 'checkbox',
	 '#description' => t('Mark this box only if student is currently residing in the United States. Otherwise, leave it empty.'),
	 '#default_value' => 0,
	 '#return_value' => 1,
  );
  $form['citizen_visa_info']['curr_usa_school'] = array(
	 '#title' => t('Current USA School'),
	 '#type' => 'textfield',
	 '#description' => t('The name of student\'s current school in the United States. Leave this empty if not currently attending a USA school.'),
	 '#size' => 60,
	 '#maxlength' => 255,
  );
  $form['citizen_visa_info']['curr_visa_type_code'] = array(
	 '#title' => t('Visa Type'),
	 '#type' => 'select',
	 '#options' => _get_visa_types_array(),
	 '#description' => t('The type of visa currently issued to student.'),
  );


  // Education & Intent
  $form['education_intent'] = array(
	 '#title' => t('Educational Intent'),
	 '#type' => 'fieldset',
	 '#description' => t('Student\'s educational background and intended program of study.'),
	 '#collapsible' => true,
  );
  $form['education_intent']['application_type'] = array(
  	'#title' => t('Applicant Type'),
  	'#type' => 'select',
  	'#options' => array(
  			'---' => t('Please select one'),
  			'new' => t('New Student'),
  			'transfer' => t('Transfer Student'),
  			'concurrent' => t('Concurrent Student'),
  			//'returning' => t('Returning NSC Student'),
  			'returning' => t('Returning NSC Student or transfer from another WA State school'),
  		),
  	'#description' => t('Select the option that best describes student\'s current status for this application.'),
  	'#required' => true,
  );
  $form['education_intent']['applicant_sid'] = array(
  	'#title' => t('SID Number'),
  	'#type' => 'textfield',
  	'#description' => t('Returning student\'s ID number. Ex: ###-##-#### or #########. Students from !NSC, !SCC, !SSC, or another Washington community or technical college: please enter your SID.', array('!NSC' => '<abbr title="North Seattle College">NSC</abbr>', '!SCC' => '<abbr title="Seattle Central College">SCC</abbr>', '!SSC' => '<abbr title="South Seattle College">SSC</abbr>')),
  	'#size' => 11,
  	'#maxlength' => 11,
  );
  $form['education_intent']['application_yrq'] = array(
	 '#title' => t('Beginning Session'),
	 '#type' => 'select',
	 '#options' => array_merge(array('---' => 'Please select one'), _get_yrq_array()),
	 '#description' => t('The academic session student would like to begin studying at NSC.'),
	 '#required' => true,
  );
  $form['education_intent']['program_info'] = array(
	 '#title' => t('Which programs are of interest?'),
	 '#type' => 'checkboxes',
	 '#description' => t('Mark all that apply. Please mark at least one option'),
	 '#options' => array(
		'esl_pgm' => t('Intensive English Program (IEP/ESL)'),
		'transfer_pgm' => t('Associate degree & university/college transfer'),
		'hs_compl_pgm' => t('High school conversion, associate degree, & university/college transfer'),
	 ),
	 '#required' => true,
  );
  $form['education_intent']['major_intent'] = array(
	 '#title' => t('What is student\'s intended major?'),
	 '#type' => 'textfield',
	 '#description' => t('Examples: Art, Biology, Engineering, History, Music, etc.'),
	 '#size' => 25,
	 '#maxlength' => 255,
	 '#required' => true,
  );
  $form['education_intent']['hs_name'] = array(
	 '#title' => t('High School'),
	 '#type' => 'textfield',
	 '#description' => t('The name of student\'s secondary- or high-school.'),
	 '#size' => 60,
	 '#maxlength' => 128,
  );
  $form['education_intent']['hs_graduate'] = array(
	 '#title' => t('Graduated high school?'),
	 '#type' => 'radios',
	 '#description' => t('Please indicate whether student graduated from secondary- or high-school.'),
	 '#options' => array(
	 	't' => t('Yes, student has graduated high school'),
	 	'f' => t('No, student has not yet graduated high school'),
	 ),
	 '#required' => true,
  );
  
  // Conditional Admission subset
  $form['education_intent']['conditional_admission'] = array(
	 '#title' => t('Conditional University Admission'),
	 '#type' => 'fieldset',
	 '#description' => t('<p>NSC has conditional admission and pathway programs to partner universities for students in the college transfer program.<p><p>Transfer Admission Pathways offer clear and specific guidelines about what students will need to obtain / submit in order to have the most competitive transfer admission application.</p></p>If student is interested in receiving conditional acceptance, please indicate the university to which student would like conditional acceptance.</p>'),
	 '#collapsible' => true,
	 '#collapsed' => false,
  );
  $form['education_intent']['conditional_admission']['conditional_admission_request'] = array(
	 '#title' => t('I\'d like conditional admission to'),
	 '#type' => 'radios',
	 '#options' => _get_conditional_admission_univs(),
	 '#default_value' => '---',
	 '#description'=>t('* indicates transfer pathway programs. These schools do not guarantee admission.'),
  );

  
  
  // Housing
  $form['housing_info'] = array (
	 '#title' => t('Housing'),
	 '#type' => 'fieldset',
	 '#description' => t('If student has not already made arrangements for housing while at NSC, we can provide information and assistance on available options close to campus.'),
	 '#collapsible' => true,
  );
  $form['housing_info']['housing_help'] = array(
	 '#title' => t('Send me information about nearby housing options'),
	 '#type' => 'checkboxes',
	 '#description' => t('Select all housing options of interest'),
	 '#options' => array(
		'apt_info' => t('Apartments'),
		'homestay_info' => t('Homestays'),
		'room_info' => t('Rooms & Shared Housing'),		 
	 ),
  );
  
  
  // Referral
  $form['referral'] = array(
	 '#title' => t('Referral'),
	 '#type' => 'fieldset',
	 '#collapsible' => true,
  );
  $form['referral']['referral_source'] = array(
	 '#title' => t('How did you hear about NSC?'),
	 '#type' => 'radios',
	 '#options' => _get_referral_options(),
  );
  $form['referral']['referral_name'] = array(
	 '#title' => t('Name or location'),
	 '#type' => 'textfield',
	 '#description' => t('Name, location, or URL of the source of your referral to NSC.'),
	 '#size' => 25,
	 '#maxlength' => 25,
  );
  
  
  // Financial source
  $form['financial_info'] = array(
	 '#title' => t('Financial Info'),
	 '#type' => 'fieldset',
	 '#description' => t('Please provide information about student\'s financial support. All international applicants are required to show proof of financial support to live and study in the United States. This includes sufficient funds available to pay for all necessary expenses and tuition for the time you are studying in the U.S. The sources of these funds will continue through the duration of your study at North Seattle College. In addition, students will need to purchase health insurance from North Seattle College.'),
	 '#collapsible' => true,
  );
  $form['financial_info']['financial_source'] = array(
	 '#title' => t('Student\'s financial sources'),
	 '#type' => 'checkboxes',
	 '#description' => t('Mark all financial sources that student plans to use. You must mark at least one option.'),
	 '#options' => array(
		'personal_funds' => t('Personal funds'),
		'family_funds' => t('Family funds'),
		'home_govt_funds' => t('Government sponsorship from home country'),
		'corp_sponsor_funds' => t('Company sponsorship'),
		'usa_sponsor_funds' => t('Sponsor within the U.S. (additional documents required)'),
//			'other_sponsor_funds' => t('Other financial sponsor'),
	 ),
	 '#required' => true,
  );
  $form['financial_info']['other_financial_sponsor'] = array(
	 '#title' => t('Other financial sources'),
	 '#type' => 'textfield',
	 '#description' => t('Other financial sources student will use while at NSC. Leave this empty unless student has financial sources not already listed.'),
	 '#size' => 25,
	 '#maxlength' => 64,
  );
  
  
  // Fee Payment
  $form['payment_info'] = array(
  	'#title' => t('Fee Payment'),
  	'#type' => 'fieldset',
  	'#description' => t('A !fee-amt (USD) non-refundable fee is required to process your application. You may either pay the fee now using a credit card, or pay later using a check or money order. NSC accepts all major credit cards for payment. !strongYour application will not be processed until the !fee-amt application fee is received.!end-strong', array('!fee-amt' => money_format('$%.2n', ISP_APPLICATION_FEE), '!strong'=>'<strong class="form-required">', '!end-strong'=>'</strong>')),
  	'#collapsible' => true,
  );
  $form['payment_info']['payment_options'] = array(
  	'#title' => t('Payment Preference'),
  	'#type' => 'radios',
  	'#options' => array(
  		'paynow' => t('Pay now with a credit card'),
  		'paylater' => t('Pay later with a check or money order'),
  	),
  	'#required' => true,
  );
  
  // CC payment
  $form['payment_info']['cc_info_wrapper_start'] = array(
  	'#type' => 'markup',
  	'#value' => '<div class="paynow-info">',
  );
  $form['payment_info']['cc_logos'] = array(
  	'#type' => 'markup',
  	'#prefix' => '<div class="cc-logos">',
  	'#value' => '<p>' . t('MasterCard, Visa, Discover, American Express, JCB, &amp; Diners Club are all accepted for fee payment.') . '</p><img src="' . base_path(). drupal_get_path('module', 'nscc_isp_admission') . '/imgs/cc-logos.png" alt="" />',
  	'#suffix' => '</div>',
  );
  $form['payment_info']['cc_account'] = array(
  	'#title' => t('Account Information'),
  	'#type' => 'fieldset',
  	'#description' => t('Please provide the credit card account information. All fields are required when paying by credit card. This information is only used for processing your payment and will not be retained.'),
  	'#collapsible' => true,
  );
  $form['payment_info']['cc_account']['cc_number'] = array(
  	'#title' => t('Card Number'),
  	'#type' => 'textfield',
  	'#description' => t('The account number embossed on the front of your card.'),
  	'#size' => 23,
  	'#maxlength' => 23,
  );
  $form['payment_info']['cc_account']['cc_exp'] = array(
  	'#title' => t('Expiration Date'),
  	'#type' => 'textfield',
  	'#description' => t('The card expiration date as MM/YY or MM/YYYY. Ex: 05/2013'),
  	'#size' => 8,
  	'#maxlength' => 10,
  );
  $form['payment_info']['cc_account']['cc_cvv_number'] = array(
  	'#title' => t('Card Verification Number'),
  	'#type' => 'textfield',
  	'#description' => t('The card verification number as it appears on your card. The verification number for MasterCard, Visa, Diners Club, Discover, and JCB credit and debit cards are the last group of 3 digits printed on the back of the card near the signature panel. The verification number for American Express cards is the 4-digit code on the front of the card above the account number.'),
  	'#size' => 4,
  	'#maxlength' => 4,
  );
  $form['payment_info']['cc_account']['cc_fname'] = array(
  	'#title' => t('First Name'),
  	'#type' => 'textfield',
  	'#description' => t('The first name of the account holder, as it appears on the card.'),
  	'#maxlength' => 60,
  );
  $form['payment_info']['cc_account']['cc_lname'] = array(
  	'#title' => t('Last Name'),
  	'#type' => 'textfield',
  	'#description' => t('The last name of the account holder, as it appears on the card.'),
  	'#maxlength' => 60,
  );
  $form['payment_info']['avs'] = array (
	'#title' => t('Billing Address'),
	'#type' => 'fieldset',
	'#description' => t('Please provide the following information about the address where the credit card bills are sent. All fields are required when paying with a credit card. This information is only used for processing your payment and will not be retained.'),
	'#collapsible' => true,	
  );
  $form['payment_info']['avs']['cc_use_perm_addr'] = array(
  	'#title' => t('Same as student\'s permanent address'),
  	'#type' => 'checkbox',
  	'#description' => t('Mark this box if the billing address is the same as student\'s permanent address.'),
	'#return_value' => 1,
  );
  $form['payment_info']['avs']['cc_street_addr'] = array(
	 '#title' => t('Street'),
	 '#type' => 'textarea',
	 '#description' => t('Street address where the credit card bill is sent.'),
	 '#rows' => 4,
	 '#cols' => 60,
  );
  $form['payment_info']['avs']['cc_locality'] = array(
	 '#title' => t('City'),
	 '#type' => 'textfield',
	 '#description' => t('The city, town, village, or locality where the credit card bill is sent.'),
	 '#size' => 60,
	 '#maxlength' => 60,
  );
  $form['payment_info']['avs']['cc_region'] = array(
	 '#title' => t('State/Province'),
	 '#type' => 'select',
	 '#description' => t('The state, province, or territory where the credit card bill is sent. Only needed for US and Canadian addresses.'),
	 '#options' => _get_states_list(),
  );
  $form['payment_info']['avs']['cc_postal_code'] = array(
	 '#title' => t('Postal/ZIP Code'),
	 '#type' => 'textfield',
	 '#description' => t('The mailstop, ZIP, or postal-code where the credit card bill is sent. Only needed for US and Canadian addresses.'),
	 '#size' => 60,
	 '#maxlength' => 60,
  );
  $form['payment_info']['avs']['cc_country_code'] = array(
	 '#title' => t('Country'),
	 '#type' => 'select',
	 '#options' => _get_countries_array(true),
	 '#description' => t('The country where the credit card bill is sent.'),
  );
  $form['payment_info']['avs']['cc_email'] = array(
	 '#title' => t('Email'),
	 '#type' =>'textfield',
	 '#description' => t('The account holder\'s email address. Confirmation of payment will be sent here.'),
	 '#size' => 25,
	 '#maxlength' => 255,
  );
  $form['payment_info']['cc_charge_auth'] = array(
  	'#title' => t('I authorize NSC to charge the fee to this card'),
  	'#type' => 'checkbox',
  	'#description' => t('Marking this box means you are authorizing NSC to charge the application fee to this card, and you are legally permitted to provide this authorization. Applications will not be processed without payment.'),
	'#return_value' => 1,
  );
  $form['payment_info']['cc_info_wrapper_end'] = array(
  	'#type' => 'markup',
  	'#value' => '</div>',
  );
  
  // Deferred payment
  $form['payment_info']['pay_later_info'] = array(
  	'#type' => 'markup',
  	'#prefix' => '<div class="paylater-info">',
  	'#suffix' => '</div>',
  	'#value' => '<p>' . t('Checks and money orders must be in U.S. dollars drawn from a U.S. bank account and made payable to North Seattle College. Mail your check/money order to the following address, and please include your Application ID number. Your Application ID number will be provided after the application is submitted.')
  		. '</p>' . nscc_isp_mailing_addr(),
  );

  
  // Additional required documents. These will need custom validation when file-uploads are implemented - #required is not supported for file upload fields.
  $form['documents'] = array(
	 '#title' => t('Documents'),
	 '#type' => 'fieldset',
	 '#description' => t('Copies of the following documents will need to be sent to NSC. Except as noted, all documents are required and this application will not be considered complete until they have been received. Please include a cover sheet with the student\'s name and Application ID number. Your Application ID number will be provided after the application is submitted.'),
	 '#collapsible' => true,
  );
  $req_docs_note = nscc_isp_req_docs_note();
  $form['documents']['notice'] = array(
	 '#type' => 'markup',
	 '#prefix' => '<div>',
	 '#value' => $req_docs_note,
	 '#suffix' => '</div>',
  );
  
  
  // Signature & Acknowledgements
  $form['affirmations'] = array(
	 '#title' => t('Terms and Conditions'),
	 '#type' => 'fieldset'
  );
  $form['affirmations']['terms_note'] = array(
	 '#type' => 'markup',
	 '#prefix' => '<p>',
	 '#value' => t('Withholding information or giving false information may invalidate this application and make student ineligible for admission to the college or subject to dismissal. Statements made, and information supplied, on this online application must be correct and complete. Applicant is required to maintain an accurate address to which statements of account can be delivered and to make payment of all due amounts by required deadlines.'),
	 '#suffix' => '</p>',
  );
  $form['affirmations']['acknowledged_accuracy'] = array(
	 '#title' => t('I certify the statements I have made on this online application are correct and complete.'),
	 '#type' => 'checkbox',
	 '#description' => t('Marking this box means you have provided truthful, complete, and acurate information in this application. You must certify that your application is accurate and complete.'),
	 '#return_value' => 1,
	 '#required' => true,
  );
  $form['affirmations']['acknowledged_terms'] = array(
	 '#title' => t('I understand and agree to all terms of admission.'),
	 '#type' => 'checkbox',
	 '#description' => t('Marking this box means you have read, understand, and agree to all terms and requirements of admission and enrollment at NSC. You must agree to these conditions to attend NSC.'),
	 '#return_value' => 1,
	 '#required' => true,	 
  );
  $form['affirmations']['signature'] = array(
	 '#title' => t('Signature'),
	 '#type' => 'textfield',
	 '#description' => t('Your name, as you would normally sign official documents.'),
	 '#size' => 25,
	 '#maxlength' => 128,
	 '#required' => true,
  );
  $form['affirmations']['signature_date'] = array(
	 '#title' => t('Date'),
	 '#type' => 'date',
	 '#description' => t('The date you are signing this application.'),
	 '#required' => true,
  );
  
  
  // Form controls
  $form['submit'] = array(
	 '#type' => 'submit',
	 '#value' => t('Apply Now'),
  );
  return $form;
}



/**
 *	 ISP student application: Form validation
 *
 *		Validates email syntax, country data, and does basic sanity check on CC data if apropos.
 *
 *		Data will also be copied from perm-addr fields to cc-addr fields if paying by cc and user
 *		indicated addrs are the same. We do this here mainly to ensure the values are preserved
 *		during form rebuild and simplify some of the cc data-validation and processing logic.
 *
 * 	Submit function handles acutal charge approval request to allow hook_form_alter() operations to finish first.
 */
function nscc_isp_admission_form_validate($form, &$form_state) {
	//watchdog('IP Module', 'App validation started');
	//Email
	if (!email_address_is_valid(trim($form_state['values']['student_email']))) {
		form_set_error('student_email', t('Please provide a valid email address for student.'));
	}

	//Countries.
	if ($form_state['values']['home_country_code']=='--') {
		form_set_error('home_country_code',t('You must select a home country.'));
	}
	if ($form_state['values']['home_country_code']=='++'	 && ! $form_state['values']['home_country']){
		form_set_error('home_country_code',t('You must either select a home country, or fill in the home country text field.'));
	}
	if ($form_state['values']['birth_country_code']=='--') {
		form_set_error('birth_country_code',t('You must select a birth country.'));
	}
	if ($form_state['values']['birth_country_code']=='++'  && ! $form_state['values']['birth_country']) {
		form_set_error('birth_country_code',t('You must either select a birth country, or fill in the birth country text field.'));
	}
	if ($form_state['values']['citizen_country_code']=='--') {
		form_set_error('citizen_country_code',t('You must select your country of citizenship.'));
	}
	if ($form_state['values']['citizen_country_code']=='++' && ! $form_state['values']['citizen_country']) {
		form_set_error('citizen_country_code',t('You must either select a country of citizenship, or fill in the country of citizenship text field.'));
	}
	
	//I-20 delivery to agent/contact
	if ($form_state['values']['i20_destination'] == 'agent') {
		if (empty($form_state['values']['local_contact_agency'])) {
			form_set_error('local_contact_agency', t('Agency name must be provided if I-20 is to be mailed to the agency.'));
		}
		if (empty($form_state['values']['local_contact_addr'])) {
			form_set_error('local_contact_addr', t('Agency address must be provided if I-20 is to be mailed to the agency.'));
		}
		if (empty($form_state['values']['local_contact_locality'])) {
			form_set_error('local_contact_locality', t('Agency city must be provided if I-20 is to be mailed to the agency.'));
		}
		if (empty($form_state['values']['local_contact_postal_code'])) {
			form_set_error('local_contact_postal_code', t('Agency postal code must be provided if I-20 is to be mailed to the agency.'));
		}
	}
	
	//Visa type for applicants currently in USA
	if ($form_state['values']['in_usa'] && $form_state['values']['curr_visa_type_code'] == '---') {
		form_set_error('curr_visa_type_code', t('A visa type must be identified for applicants currently in the USA.'));
	}
	
	//Applicant type
	if ($form_state['values']['application_type'] == '---') {
		form_set_error('application_type', t('You must select a valid applicant type.'));
	}
	
	//Returning student SID
	if ($form_state['values']['application_type'] == 'returning') {
		if (! (empty($form_state['values']['applicant_sid']) || preg_match('/\d(?:.*\d){8}/', $form_state['values']['applicant_sid']))) {
			form_set_error('applicant_sid', t('The SID Number is not valid. It must contain 9 digits.'));
		}
	}
	
	//Beginning session
	if ($form_state['values']['application_yrq'] == '---') {
		form_set_error('application_yrq', t('You must select when student would like to start attending NSC.'));
	}
	
	//Duplicate application
	if (_duplicate_ip_application($form_state['values'])) {
		form_set_error('student', t('This seems to be a duplicate application. Please !contact if you need to update your application information.', array('!contact'=>'<a href="/contact">contact us</a>')));
	}
	
	//CC Payment?
	if ($form_state['values']['payment_options'] == 'paynow') {
		$pan = trim($form_state['values']['cc_number']);
		$exp = trim($form_state['values']['cc_exp']);
		$cc_type = _get_cc_type($pan);

		//Cardholder
		if (strlen(trim($form_state['values']['cc_fname'])) == 0) {
			form_set_error('cc_name', t('Account holder\'s first name is required when paying by credit card.'));
		}
		if (strlen(trim($form_state['values']['cc_lname'])) == 0) {
			form_set_error('cc_name', t('Account holder\'s last name is required when paying by credit card.'));
		}

		//Card type
		if (! $cc_type['accepted']) {
				form_set_error('cc_number', t('NSC cannot accept #cc-type cards for fee payment.', array('#cc-type' => $cc_type['name'])));
		}

		//CC number
		if (!_cc_num_is_valid($pan)) {
			form_set_error('cc_number', t('The credit card number is not valid.'));
		}

		//CC expiration
		if (empty($exp)) {
			form_set_error('cc_exp', t('An expiration date is required when paying by credit card.'));
		} elseif (preg_match('/^((?:0[1-9])|(?:1[0-2]))[\/\\\.\-\s]*(\d{2,4})$/', $exp, $matches)) {
			$nxt_month = ($matches[1] == 12) ? 1 : $matches[1] + 1;
			$exp_year = (strlen($matches[2]) == 2) ? '20'.$matches[2] : $matches[2];	// 2-digit year assumed to be 21st century.
			if ($nxt_month == 1) { $exp_year++; }	// Increments year if card expires end of December.
			$exp_ts = mktime(0, 0, 0, $nxt_month, 1, $exp_year);	// 00:00:00 1st day of month after expiration.
			if (time() >= $exp_ts) {
				form_set_error('cc_exp', t('This credit card seems to have expired.'));
			}
			$form_state['values']['cc_exp'] = $matches[1].'/'.$exp_year;	//Normalizes CC expiration to MM/YYYY
		} else {
			form_set_error('cc_exp', t('Please input expiration date as MM/YY or MM/YYYY'));
		}

		//Card verification number
		if ( (substr($pan, 0, 1) == 3 && !preg_match('/\d{4}/', $form_state['values']['cc_cvv_number'])) || (!preg_match('/\d{3}/', $form_state['values']['cc_cvv_number'])) ) {
			form_set_error('cc_cvv_number', t('A valid card verification number is required when paying by credit card.'));
		}

		//Cardholder charge-authorization
		if (!$form_state['values']['cc_charge_auth']) {
			form_set_error('cc_charge_auth', t('You must authorize the charge when paying by credit card.'));
		}

		//AVS
		if (empty($form_state['values']['cc_street_addr'])) {
			form_set_error('cc_street_addr', t('The credit card billing address is required for credit card authorization.'));
		}
		if (empty($form_state['values']['cc_locality'])) {
			form_set_error('cc_locality', t('The credit card billing city is required for credit card authorization.'));
		}
		//US & Canada only
		if ($form_state['values']['cc_country_code'] == 'CA' || $form_state['values']['cc_country_code'] == 'US') {
			if (empty($form_state['values']['cc_region'])) {
				form_set_error('cc_region', t('The province or state of your credit card billing address is required for credit card authorization.'));
			}
			if (empty($form_state['values']['cc_postal_code'])
				|| ($form_state['values']['cc_country_code'] == 'CA' && !preg_match('/[A-Z]\d[A-Z]\s*\d[A-Z]\d)/', $form_state['values']['cc_postal_code']))
				|| ($form_state['values']['cc_country_code'] == 'US' && !preg_match('/(\d{5}(\-\d{4})?)/', $form_state['values']['cc_postal_code']))) {
					form_set_error('cc_postal_code', t('The postal code of your credit card billing address is required for credit card authorization.'));
			}
		}
		if (! email_address_is_valid($form_state['values']['cc_email'])) {
			form_set_error('cc_email', t('Cardholder\'s email address is required for credit card authorization.'));
		}
	}
	//watchdog('IP Module', 'App validation completed');
}



/**
 *	 ISP student application: Form submission (post-validation)
 *
 *	Forwards CC data to payment gateway for charge approval and either rebuilds form (charge denied)
 *	or records application data & issues apropos acknowledgements.
 */
function nscc_isp_admission_form_submit($form, &$form_state) {
	watchdog('IP Module', 'App submit started');
	$paid_fee = false;
	$vcard = nscc_isp_vcard();
	$countries_iso = _get_countries_array();
	$deposit_countries = _get_deposit_countries();
	$avs_rejects = _avs_rejects();
	$cvn_rejects = _cvn_rejects();


	// Prep form data for DB
	$ip_application_data = new stdClass();
	$ip_application_data->student_surname = $form_state['values']['student_surname'];
	$ip_application_data->student_given_name = $form_state['values']['student_given_name'];
	$ip_application_data->student_middle_name = $form_state['values']['student_middle_name'];
	$ip_application_data->home_street_addr = $form_state['values']['home_street_addr'];
	$ip_application_data->home_locality = $form_state['values']['home_locality'];
	$ip_application_data->home_region = $form_state['values']['home_region'];
	$ip_application_data->home_postal_code = $form_state['values']['home_postal_code'];
	if ($form_state['values']['home_country_code']=='++') {
		$ip_application_data->home_country_code = null;
		$ip_application_data->home_country = $form_state['values']['home_country'];
	} else {
		$country_code = $form_state['values']['home_country_code'];
		$ip_application_data->home_country_code = $country_code;
		$ip_application_data->home_country = $countries_iso[$country_code];
	}
	$ip_application_data->home_phone = $form_state['values']['home_phone'];
	$ip_application_data->home_fax = $form_state['values']['home_fax'];
	$ip_application_data->student_email = $form_state['values']['student_email'];
	$ip_application_data->birthdate = _convert_ddate_to_pdate($form_state['values']['birthdate']);
	$ip_application_data->gender = $form_state['values']['gender'];
	$ip_application_data->married = $form_state['values']['married'];
	if ($form_state['values']['birth_country_code']=='++') {
		$ip_application_data->birth_country_code = null;
		$ip_application_data->birth_country = $form_state['values']['birth_country'];
	} else {
		$country_code = $form_state['values']['birth_country_code'];
		$ip_application_data->birth_country_code = $country_code;
		$ip_application_data->birth_country = $countries_iso[$country_code];
	}
	if ($form_state['values']['citizen_country_code']=='++') {
		$ip_application_data->citizen_country_code = null;
		$ip_application_data->citizen_country = $form_state['values']['citizen_country'];
	} else {
		$country_code = $form_state['values']['citizen_country_code'];
		$ip_application_data->citizen_country_code = $country_code;
		$ip_application_data->citizen_country = $countries_iso[$country_code];
	}
	$ip_application_data->emergency_contact_name = $form_state['values']['emergency_contact_name'];
	$ip_application_data->emergency_contact_relation = $form_state['values']['emergency_contact_relation'];
	$ip_application_data->emergency_contact_phone = $form_state['values']['emergency_contact_phone'];
	$ip_application_data->local_contact_name = $form_state['values']['local_contact_name'];
	$ip_application_data->local_contact_agency = $form_state['values']['local_contact_agency'];
	$ip_application_data->local_contact_relation = $form_state['values']['local_contact_relation'];
	$ip_application_data->local_contact_addr = $form_state['values']['local_contact_addr'];
	$ip_application_data->local_contact_locality = $form_state['values']['local_contact_locality'];
	$ip_application_data->local_contact_region = $form_state['values']['local_contact_region'];
	$ip_application_data->local_contact_postal_code = $form_state['values']['local_contact_postal_code'];
	$ip_application_data->local_contact_phone = $form_state['values']['local_contact_phone'];
	$ip_application_data->i20_destination = $form_state['values']['i20_destination'];
	$ip_application_data->esl_pgm = ($form_state['values']['program_info']['esl_pgm']) ? 't' : 'f';
	$ip_application_data->applicant_type = $form_state['values']['application_type'];
	if ($form_state['values']['application_type'] == 'returning' && !empty($form_state['values']['applicant_sid'])) {
		$ip_application_data->sid = preg_replace('/\D+/', '', $form_state['values']['applicant_sid']);
	}
	$ip_application_data->transfer_pgm = ($form_state['values']['program_info']['transfer_pgm']) ? 't' : 'f';
	$ip_application_data->hs_compl_pgm = ($form_state['values']['program_info']['hs_compl_pgm']) ? 't' : 'f';
	$ip_application_data->major_intent = $form_state['values']['major_intent'];
	$ip_application_data->application_yrq = $form_state['values']['application_yrq'];
	$ip_application_data->hs_graduate = $form_state['values']['hs_graduate'];
	$ip_application_data->hs_name = $form_state['values']['hs_name'];
	$ip_application_data->conditional_admission = $form_state['values']['conditional_admission_request'];
	$ip_application_data->in_usa = $form_state['values']['in_usa'];
	$ip_application_data->curr_usa_school = $form_state['values']['curr_usa_school'];
	if ($form_state['values']['in_usa'] && $form_state['values']['curr_visa_type_code'] != '---') {
		$ip_application_data->curr_visa_type_code = $form_state['values']['curr_visa_type_code'];
	}
	$ip_application_data->assist_homestay = ($form_state['values']['housing_help']['homestay_info']) ? 't' : 'f';
	$ip_application_data->assist_apt = ($form_state['values']['housing_help']['apt_info']) ? 't' : 'f';
	$ip_application_data->assist_room = ($form_state['values']['housing_help']['room_info']) ? 't' : 'f';
	$ip_application_data->referral_source = $form_state['values']['referral_source'];
	$ip_application_data->referral_name = $form_state['values']['referral_name'];
	$ip_application_data->personal_funds = ($form_state['values']['financial_source']['personal_funds']) ? 't' : 'f';
	$ip_application_data->family_funds = ($form_state['values']['financial_source']['family_funds']) ? 't' : 'f';
	$ip_application_data->home_govt_funds = ($form_state['values']['financial_source']['home_govt_funds']) ? 't' : 'f';
	$ip_application_data->corp_sponsor_funds = ($form_state['values']['financial_source']['corp_sponsor_funds']) ? 't' : 'f';
	$ip_application_data->usa_sponsor_funds = ($form_state['values']['financial_source']['usa_sponsor_funds']) ? 't' : 'f';
	$ip_application_data->other_financial_sponsor = $form_state['values']['other_financial_sponsor'];
	$ip_application_data->acknowledged_terms = $form_state['values']['acknowledged_terms'];
	$ip_application_data->acknowledged_accuracy = $form_state['values']['acknowledged_accuracy'];
	$ip_application_data->signature = $form_state['values']['signature'];
	$ip_application_data->signature_date = _convert_ddate_to_pdate($form_state['values']['signature_date']);

	
	// Write data to DB now so we have the record ID in case we need to do additional work.
	_checkadd_ip_db();	//ensure IP is in Drupal's gobal list of accessible DB's.
	$result = nscc_write_record('application', $ip_application_data, 'international_programs');
	if ($result === false) {
		$form_state['rebuild'] = true;
		drupal_set_message( t('Sorry, there was a problem that prevented your application from being received. Please try again. If this continues to occur, please !report to us.', array('!report'=>'<a href="/contact">report the problem</a>')), 'error');
		watchdog('IP Module', 'DB failed to write record. Result = <pre>'.print_r($ip_application_data, true)."</pre>\n", array(), WATCHDOG_ERROR, null);
		return;
	}
	
	// Log the DB activity.
	watchdog('IP Module', 'App no. '.$ip_application_data->id.' recorded in DB.');


	// Online fee payment?
	if ($form_state['values']['payment_options'] == 'paynow') {

		// Init Cybersource SOAP client.
		include('nscc_isp_admission.cybersource.class.php');
		try {
			$client = new CybersourceClient(WSDL_URL, array('cache_wsdl'=>WSDL_CACHE_NONE, 'trace'=>true));	//no cache wsdl and trace for dev only.
		} catch (Exception $e) {
			$purge_msg = _purge_ip_application('student', $ip_application_data->id)
				? 'App no. '.$ip_application_data->id.' purged due to SoapClient init failure.'
				: 'Failed to purge app no. '.$ip_application_data->id.' due to SoapClient init failure.';
			watchdog('IP Module', 'Unable to instantiate SoapClient - exception at line '.$e->getLine().' in '.$e->getFile().' ('.$e->getCode().') '.$e->getMessage(), array(), WATCHDOG_ERROR, null);
			watchdog('IP Module', $purge_msg);
			form_set_error('payment_info', t('A system error occurred that prevented processing your payment. If this continues to occur, please !report to us and use a different payment option.', array('!report'=>'<a href="/contact">report the problem</a>')));
			$form_state['rebuild'] = true;
			return;
		}


		// Build request struct.
		$auth_req['merchantID'] = MERCHANT_ID;	//Required. See include for value.

		// Billing info
		$cc_street_adr = explode("\n", $form_state['values']['cc_street_addr']);
		$auth_req['billTo']['firstName'] = trim($form_state['values']['cc_fname']);
		$auth_req['billTo']['lastName'] = trim($form_state['values']['cc_lname']);
		$auth_req['billTo']['email'] = trim($form_state['values']['cc_email']);
		$auth_req['billTo']['street1'] = trim($cc_street_adr[0]);
		if (! empty($cc_street_adr[1])) {
			$auth_req['billTo']['street2'] = trim($cc_street_adr[1]);
		}
		$auth_req['billTo']['city'] = trim($form_state['values']['cc_locality']);
		if ($form_state['values']['cc_country_code'] == 'CA' || $form_state['values']['cc_country_code'] == 'US') {
			$auth_req['billTo']['state'] = trim($form_state['values']['cc_region']);
			$auth_req['billTo']['postalCode'] = strtoupper(trim($form_state['values']['cc_postal_code']));
		}
		$auth_req['billTo']['country'] = $form_state['values']['cc_country_code'];

		// Card info
		$auth_req['card']['accountNumber'] = trim($form_state['values']['cc_number']);
		$auth_req['card']['expirationMonth'] = substr($form_state['values']['cc_exp'], 0, 2);
		$auth_req['card']['expirationYear'] = substr($form_state['values']['cc_exp'], -4);
		$auth_req['card']['cvNumber'] = trim($form_state['values']['cc_cvv_number']);
		$cc_type = _get_cc_type($auth_req['card']['accountNumber']);
		$auth_req['card']['cardType'] = $cc_type['code'];

		// Amount
		$auth_req['purchaseTotals']['currency'] = 'USD';
		$auth_req['purchaseTotals']['grandTotalAmount'] = ISP_APPLICATION_FEE;

		// Authorization service info
		$auth_req['ccAuthService']['run'] = 'true';	//Must be string, bool not correctly converted by SoapClient to WSDL specs.
		$auth_req['ccAuthService']['commerceIndicator'] = 'internet';	//optional

		// AVS & CVN rules.
		$auth_req['businessRules']['declineAVSFlags'] = implode(' ', array_keys($avs_rejects));
		$auth_req['businessRules']['ignoreAVSResult'] = 'false';
		$auth_req['businessRules']['ignoreCVResult'] = 'false';

		// Misc notes for bookkeeping - MUST NOT BE USED TO CAPTURE CARDHOLDER OR CARD INFO.
		$auth_req['merchantReferenceCode'] = 'NSCC-IP-APP-'.$ip_application_data->id;
		$auth_req['merchantDefinedData']['field1'] = 'NSCC International Program fee for application '.$ip_application_data->id;
		$auth_req['merchantDefinedData']['field2'] = 'Fee amount: $'.number_format(ISP_APPLICATION_FEE, 2);
		$auth_req['merchantDefinedData']['field3'] = 'Applicant: '.$ip_application_data->student_surname.', '.$ip_application_data->student_given_name.' '.$ip_application_data->student_middle_name;
		//$auth_req['merchantDefinedData']['field4'] = '';


		// Exec transaction auth_request.
		try {
			$auth_response = $client->runTransaction($auth_req);
			watchdog('IP Module',"auth_response:<pre>\n".print_r($auth_response,true).'</pre>');
		} catch (SoapFault $sf) {
			watchdog('IP Module', 'SoapFault exception caught', array(), WATCHDOG_ERROR, null);
			$exception = $sf;
		} catch (Exception $e) {
			watchdog('IP Module', 'Generic exception caught', array(), WATCHDOG_ERROR, null);
			$exception = $e;
		}
		if ( (isset($auth_response->__soap_fault)) && ($auth_response->__soap_fault != null) ) {
			watchdog('IP Module', 'SoapFault exception detected by examining auth_response', array(), WATCHDOG_ERROR, null);
			$exception = $auth_response->__soap_fault;
		}

		
		// If an error occurred, purge DB record, notify user and rebuild form.
		if ($exception != null) {
			$purge_msg = _purge_ip_application('student', $ip_application_data->id)
				? 'App no. '.$ip_application_data->id.' purged due to auth-request exception.'
				: 'Failed to purge appp no. '.$ip_application_data->id.' after auth-request exception.';
			form_set_error('payment_options', t('A system error occurred that prevented processing your payment. Please try again. If this continues to occur, please !report to us.', array('!report'=>'<a href="/contact">report the problem</a>')));
			$form_state['rebuild'] = true;
			//watchdog('IP Module', 'Exception: <pre>'.print_r($exception, true)."</pre>\n");
			watchdog('IP Module', 'Auth Req: <pre>'.$client->__getLastResponse()."</pre>\n");
			watchdog('IP Module', 'Auth Req Headers: <pre>'.$client->__getLastResponseHeaders()."</pre>\n");
			watchdog('IP Module', $purge_msg);
			return;
		}

		
		// Or, if transaction was approved verify the AVS and CNV codes returned in the
		// response are acceptable, add response data to DB object, and proceed
		// with the rest of the submission processing if they're OK. Otherwise, set
		// error against the apropos field(s), reverse the authorization to release
		// the reserve on the CC account (triggered by auth approval), delete the
		// application data from DB, and rebuild form. 
		elseif ($auth_response->reasonCode == 100) {
			//watchdog('IP Module', 'CC auth: <pre>'.print_r($auth_response, true));

			// AVS & CVN check
			if ( array_key_exists($auth_response->ccAuthReply->avsCode, $avs_rejects) || array_key_exists($auth_response->ccAuthReply->cvCode, $cvn_rejects) ) {
				$auth_rev['ccAuthReversalService']['run'] =	'true';
				$auth_rev['ccAuthReversalService']['authRequestID'] = $auth_response->requestID;
				$auth_rev['merchantID'] = MERCHANT_ID;
				$auth_rev['merchantReferenceCode'] = $auth_response->merchantReferenceCode;
				$auth_rev['purchaseTotals']['currency'] = $auth_response->purchaseTotals->currency;
				$auth_rev['purchaseTotals']['grandTotalAmount'] = $auth_response->ccAuthReply->amount;
				try {
					$auth_rev_response = $client->runTransaction($auth_rev);
				} catch (SoapFault $sf) {
					watchdog('IP Module', 'SoapFault exception caught during auth auth_reversal.');
					$exception = $sf;
				} catch (Exception $e) {
					watchdog('IP Module', 'Generic exception caught during auth auth_reversal.');
					$exception = $e;
				}
				if ( (isset($auth_rev_response->__soap_fault)) && ($auth_rev_response->__soap_fault != null) ) {
					watchdog('IP Module', 'SoapFault exception detected during auth auth_reversal by examining response.');
					$exception = $auth_rev_response->__soap_fault;
				}
				
				// If an exception occurred just log it. Auth auth_reversal is really just
				// a courtesy to the CC holder. Authorizations will auto-expire and
				// release the reserve hold after some number of days (5-7, typically).
				if ($exception != null) {
					watchdog('IP Module', 'Auth auth_reversal failed for '.$auth_rev['merchantReferenceCode'].' due to SoapFault exception: '.$exception->getMessage());
					watchdog('IP Module', 'Last Req: <pre>'.$client->__getLastResponse()."</pre>\n");
					watchdog('IP Module', 'Last Req Headers: <pre>'.$client->__getLastResponseHeaders()."</pre>\n");
				}				

				//set apropos errors and rebuild form.
				if ( array_key_exists($response->ccAuthReply->avsCode, $avs_rejects) )	 {
					form_set_error('avs', t('Fee payment could not be processed because the ').$avs_rejects[$response->ccAuthReply->avsCode].t('. Please verify that the credit card account holder and billing information is correct.'));
				}				
				if ( array_key_exists($response->ccAuthReply->cvCode, $cvn_rejects) ) {
					form_set_error('edit-cc-cvv-number', t('Fee payment could not be processed because ').$cvn_rejects[$response->ccAuthReply->cvCode].'.');
				}
				$form_state['rebuild'] = true;
				$purge_msg = _purge_ip_application('student', $ip_application_data->id)
					? 'App no. '.$ip_application_data->id.' purged due to AVS/CVN rejection.'
					: 'Failed to purge app no. '.$ip_application_data->id.' due to to AVS/CVN rejection.';
				watchdog('IP Module', 'Auth reversal: <pre>'.print_r($auth_rev_response, true).'</pre>');
				watchdog('IP Module', $purge_msg);
				return;
			}

			// All OK - Finalize payment processing
			else {
				$paid_fee = true;

				// Capture payment
				$cap_req['ccCaptureService']['run'] = 'true';
				$cap_req['ccCaptureService']['authRequestID'] = $auth_response->requestID;
				$cap_req['orderRequestToken'] = $auth_response->requestToken;
				$cap_req['merchantID'] = MERCHANT_ID;
				$cap_req['merchantReferenceCode'] = $auth_response->merchantReferenceCode;
				$cap_req['purchaseTotals']['currency'] = 'USD';
				$cap_req['purchaseTotals']['grandTotalAmount'] = ISP_APPLICATION_FEE;
				try {
					$cap_response = $client->runTransaction($cap_req);
				} catch (SoapFault $sf) {
					watchdog('IP Module', 'SoapFault exception caught during payment capture');
					$exception = $sf;
				} catch (Exception $e) {
					watchdog('IP Module', 'Generic exception caught during payment capture');
					$exception = $e;
				}
				if ( (isset($cap_response->__soap_fault)) && ($cap_response->__soap_fault != null) ) {
					watchdog('IP Module', 'SoapFault exception detected during capture by examining response');
					$exception = $cap_response->__soap_fault;
				}
				
				// If an error occurred, notify IP & SCCD staff that they will need
				// to do a manual capture of this transaction.
				if ($exception != null || $cap_response->reasonCode != 100) {
					$staff_addrs = $vcard['email'].', Michael Shaw <michael.shaw@seattlecolleges.edu>, Soroush Maleki <Soroush.Maleki@seattlecolleges.edu>, International <International@seattlecolleges.edu>';
					$msg_params = array('auth_response'=>$response, 'cap_response'=>$cap_response, 'app_id'=>$ip_application_data->id, 'cc_email'=>$req['billTo']['email']);
					drupal_mail('nscc_ip_admission', 'payment_capture_failed', $staff_addrs, $GLOBALS['language'], $msg_params, 'NSC Webserver <webmaster@northseattle.edu>');
					watchdog('IP Module', 'Payment capture failed for application '.$ip_application_data->id, array(), WATCHDOG_WARNING, null);
				}

				// Update DB record with transaction info. Per PCI compliance
				// requirements, we are not allowed to store any info that appears on
				// the card. However, we can store transaction responses.
				$ip_application_data->paid_amt = $auth_response->ccAuthReply->amount;
				$ip_application_data->paid_date = $auth_response->ccAuthReply->authorizedDateTime;
				$ip_application_data->cc_type = $cc_type['name'];
				$ip_application_data->cc_charge_auth = (bool)$form_state['values']['cc_charge_auth'];
				$ip_application_data->cc_transaction_response_info = serialize($auth_response)."\n".serialize($cap_response);
				$log_msg = _record_ip_payment_info('student', $ip_application_data)
					? 'App no. '.$ip_application_data->id.' payment info recorded in DB.'
					: 'Failed to record payment info in DB for app no. '.$ip_application_data->id.". <pre>\nAuth: ".print_r($auth_response,true)."\nCap: ".print_r($cap_response, true)."</pre>\n";
				watchdog('IP Module', $log_msg);
			}
		}


		// Or, handle cases where Cybersource cannot determine transaction status
		// due to bank/processor timeout. We'll presume the payment was approved
		// and process the rest of the application, but alert apropos staff that
		// they need to manually verify transaction and follow-up with applicant
		// accordingly if necessary.
		elseif ($response->reasonCode == 151 || $response->reasonCode == 152 || $response->reasonCode == 250) {
			$paid_fee = null;

			// Record CC type and other transaction data in DB. Per PCI compliance
			// requirements, we are not allowed to store any info that appears on
			// the card. However, we can store transaction response info.
			$ip_application_data->paid_amt = $auth_response->ccAuthReply->amount;
			$ip_application_data->paid_date = $auth_response->ccAuthReply->authorizedDateTime;
			$ip_application_data->cc_type = $cc_type['name'];
			$ip_application_data->cc_charge_auth = (bool)$form_state['values']['cc_charge_auth'];
			$ip_application_data->cc_transaction_auth_response_info = serialize($auth_response);
			$log_msg = _record_ip_payment_info('student', $ip_application_data)
				? 'App no. '.$ip_application_data->id.' payment info recorded in DB, but requires manual confirmation in CBC.'
				: 'Failed to record payment info in DB for app no. '.$ip_application_data->id.'. IP staff will need to maually input after confirmation of payment in CBC.';

			// Notify user of transaction issue.
			$txmsg = t('Credit card transaction status unknown due to ambiguous response from processor. We will assume the payment was approved and are accepting your application pending verification that we have received payment of the $!fee application fee.', array('!fee'=>number_format(ISP_APPLICATION_FEE, 2)));
			drupal_set_message($txmsg, 'warning');
			
			// Also send to card holder's email.
			$usr_to =  '"'.addslashes(mime_header_encode("{$req['billTo']['firstName']} {$req['billTo']['lastName']}"))."\" <{$req['billTo']['email']}>";	//ensures RFC 2822 compliance.;
			$usr_params = array('app_id'=>$ip_application_data->id);
			$usr_from = $vcard['email'];
			drupal_mail('nscc_isp_admission', 'payment_verification_pending', $usr_to, $GLOBALS['language'], $usr_params, $usr_from);
			
			// Notify IP & SCCD staff of problem.
			$staff_email = $vcard['email'].', Michael Shaw <michael.shaw@seattlecolleges.edu>, Soroush Maleki <Soroush.Maleki@seattlecolleges.edu>, International <International@seattlecolleges.edu>';
			$staff_params = array('response'=>$auth_response, 'app_id'=>$ip_application_data->id,'cc_email'=>$auth_req['billTo']['email']);
			drupal_mail('nscc_isp_admission', 'verify_cc_transaction', $staff_email, $GLOBALS['language'], $staff_params, 'NSC Webserver <webmaster@northseattle.edu>');			

			watchdog('IP Module', 'CC status unknown: <pre>'.print_r($auth_response, true)."\n\n</pre>\nSerialized: {$ip_application_data->cc_transaction_response_info}", array(), WATCHDOG_WARNING, null);
			watchdog('IP Module', $log_msg);
		}

		
		// Otherwise, the transaction was declined for some reason. Analyze response,
		// purge application record from DB, and rebuild form with message informing
		// user of likely problem. Note that Cybersource discourages direct passthru
		// of decline codes and descriptions.
		else {
			$paid_fee = false;
			$purge_msg = _purge_ip_application('student', $ip_application_data->id)
				? 'App no. '.$ip_application_data->id.' purged from DB due to payment rejection.'
				: 'Failed to purge app no. '.$ip_application_data->id.' from DB for payment rejection.';
			$reason = _get_cc_reject_reason($auth_response);
			if (! empty($reason)) {
				watchdog('IP Module', 'Payment rejected: <pre>'.print_r($reason, true)."</pre>\n");
				foreach($reason['fields'] as $field=>$msg) {
					form_set_error($field, $msg);
				}
			} else {
				form_set_error('payment_info', t('The transaction was declined. Please use a different card or select another payment option.'));
			}
			$form_state['rebuild'] = true;
			//watchdog('IP Module', 'CC declined: <pre>'.print_r($auth_response, true)."</pre>\n");
			watchdog('IP Module', $purge_msg);
			return;
		}
	}


	// If we've not bailed out by this point, everything seems OK. Archive a copy
	// of the application data and issue apropos confirmations and notifications.
	$log_msg = _archive_ip_application($ip_application_data->id)
		? 'App no. '.$ip_application_data->id.' copied to archive table in DB.'
		: 'Failed to copy app no. '.$ip_application_data->id.' to archive table in DB.';
	watchdog('IP Module', $log_msg);

	$ack_msg[] = ($paid_fee === true)
		? '<p>'.t('Thank you! We have received your application and fee payment.').'</p>'
		: '<p>'.t('Thank you! We have received your application.').'</p>';
	$ack_msg[] = '<p>'.t('Your Application ID number is !app-id. Please include this number with all correspondence. If you need to change any of your application information, please contact us by phone or email with the changes. Submitting multiple admission forms will delay processing your application.', array('!app-id' => '<strong>'.$ip_application_data->id.'</strong>')).'</p>';
	$ack_msg[] = '<p>'.t('Please remember to send the following items to us. Except as noted, they are all required and your application will not be complete until they have been received.');
	$ack_msg[] = t('Please include a cover sheet with the student\'s name and Application ID number !app-id when sending these items.', array('!app-id' => '<strong>'.$ip_application_data->id.'</strong>')).'</p>';
	$ack_msg[] = nscc_isp_req_docs_note();
	if ($paid_fee === false) {
		$ack_msg[] = '<p>'.t('You can also send your check or money order for the $!app-fee (USD) application fee to the address above.', array('!app-fee'=>number_format(ISP_APPLICATION_FEE, 2)));
		$ack_msg[] = t('We cannot process your application without payment of the application fee.').'</p>';
	} elseif ($paid_fee === null) {
		$ack_msg[] = '<p>'.t('Due to a bank problem, we are not able to determine if your payment was successfully processed. We have tentatively accepted your application pending verification that the $!app-fee (USD) fee payment was received.', array('!app-fee'=>number_format(ISP_APPLICATION_FEE, 2))).'</p>';
	}

	// Add deposit-required message as needed.
	$deposit_country = '';
	if (in_array($ip_application_data->home_country_code, $deposit_countries)) {
		$ack_msg[] = _formatted_deposit_notice($countries_iso[$ip_application_data->home_country_code]);
		$deposit_country = $countries_iso[$ip_application_data->home_country_code];
	} elseif (in_array($ip_application_data->citizen_country_code, $deposit_countries)) {
		$ack_msg[] = _formatted_deposit_notice($countries_iso[$ip_application_data->citizen_country_code]);
		$deposit_country = $countries_iso[$ip_application_data->citizen_country_code];
	}

	$ack_msg[] = '<p>'.t('If you have any questions, please feel free to contact us.').'</p>';
	$msg['text'] = implode("\n", $ack_msg);
	$msg['type'] = 'status';
	drupal_set_message($msg['text'], $msg['type']);

	//Email confirmations
	$student_email = '"'.addslashes(mime_header_encode($ip_application_data->student_given_name.' '.$ip_application_data->student_surname))."\" <{$ip_application_data->student_email}>";	//ensures RFC 2822 compliance.

	// Applicant ack email.
	drupal_mail(
		'nscc_isp_admission',
		'student_ack',
		$student_email,
		$GLOBALS['language'],
		array(
			'app_id'=>$ip_application_data->id,
			'paid_fee'=>$paid_fee,
			'deposit_notice'=>$deposit_country,
		),
		$vcard['email'],
		true
	);

	// IP Staff email-tickle.
//		$vcard['email'],
	drupal_mail(
		'nscc_isp_admission',
		'dept_notice_student',
		'international@seattlecolleges.edu',
		$GLOBALS['language'],
		array(
			'app_id'=>$ip_application_data->id,
			'applicant'=>"{$ip_application_data->student_given_name} {$ip_application_data->student_surname}",
		),
		'"NSC Web Server" <webmaster@northseattle.edu>',
		true
	);

	// IP staff payment heads-up.
	if ($paid_fee === true) {
		drupal_mail(
			'nscc_isp_admission',
			'fee_payment_processed',
			'Soroush Maleki <Soroush.Maleki@seattlecolleges.edu>, International <International@seattlecolleges.edu>',
			$GLOBALS['language'],
			array(
				'auth_response'=>$auth_response,
				'capture_response'=>$cap_response,
				'app_id'=>$ip_application_data->id,
				'applicant'=>$ip_application_data->student_surname.', '.$ip_application_data->student_given_name,
			),
			'"NSC Web Server" <webmaster@northseattle.edu>',
			true
		);
	}

	$form_state['redirect'] = 'international-application-received';
	//watchdog('IP Module', 'ISP application submitted with ID '.$ip_application_data->id));
	watchdog('IP Module', 'App submit completed');
}



/**
 *	ISP agent application: Form definition
 */
function nscc_isp_agent_form($form_state) {
	drupal_add_js(drupal_get_path('module', 'nscc_isp_admission') . '/nscc_isp_admission.js');
	
  $form['#attributes'] = array(
	 'enctype' => 'multipart/form-data',
  );
  $form['#redirect'] = 'international-application-received';


	// Agency Info
	$form['agency_info'] = array(
	 '#title' => t('Agency Information'),
	 '#type' => 'fieldset',
	 '#description' => t("Please provide your agency's business-name and primary location."),
	 '#collapsible' => true,
	);
	$form['agency_info']['agency_name'] = array(
		'#title' => t('Agency Name'),
		'#type' => 'textfield',
		'#description' => t('The official or legal name of your agency.'),
		'#size' => 60,
		'#maxlength' => 255,
		'#required' => true,
	);
	$form['agency_info']['agency_addr'] = array(
		'#title' => t('Street Address'),
		'#type' => 'textfield',
		'#description' => t('The street address for your agency.'),
		'#size' => 60,
		'#maxlength' => 255,
		'#required' => true,
	);
	$form['agency_info']['agency_locality'] = array(
		'#title' => t('City'),
		'#type' => 'textfield',
		'#description' => t('The city, town, village, or locality in which your agency is located.'),
	 '#size' => 60,
	 '#maxlength' => 60,
	 '#required' => true,
	);
	$form['agency_info']['agency_region'] = array(
		'#title' => t('State/Province'),
		'#type' => 'textfield',
	 '#description' => t('The state, province, or region in which your agency is located.'),
	 '#size' => 60,
	 '#maxlength' => 60,
	 '#required' => true,
	);
	$form['agency_info']['agency_postal_code'] = array(
	 '#title' => t('Postal/ZIP Code'),
	 '#type' => 'textfield',
	 '#description' => t('The mailstop, ZIP, or postal-code for your agency.'),
	 '#size' => 60,
	 '#maxlength' => 60,
	 '#required' => true,
	);
  $form['agency_info']['agency_country_code'] = array(
	 '#title' => t('Country'),
	 '#type' => 'select',
	 '#options' => _get_countries_array(),
	 '#description' => t("The country in which your agency is located."),
	 '#required' => true,
  );
  $form['agency_info']['agency_country'] = array(
	 '#title' => t('Country (not listed)'),
	 '#type' => 'textfield',
	 '#description' => t('If the agency country is not listed above, select "Other" and enter the country name into this field.'),
  );
	$form['agency_info']['agency_url'] = array(
		'#title' => t('Web Site'),
		'#type' => 'textfield',
		'#description' => t("The URL for your agency's Web site."),
	);

	// Agency Executive
	$form['agency_executive'] = array(
	 '#title' => t('Agency Executive'),
	 '#type' => 'fieldset',
	 '#description' => t("Please provide information about your agency's pricipal owner, director, or president."),
	 '#collapsible' => true,
	);
	$form['agency_executive']['exec_fname'] = array(
		'#title' => t('First Name'),
		'#type' => 'textfield',
		'#description' => t("The first or personal-name of your agency's executive."),
	 '#size' => 60,
	 '#maxlength' => 60,
	 '#required' => true,
	);
	$form['agency_executive']['exec_lname'] = array(
		'#title' => t('Family/Last Name'),
		'#type' => 'textfield',
		'#description' => t("The family or last-name of your agency's executive."),
	 '#size' => 60,
	 '#maxlength' => 60,
	 '#required' => true,
	);
	$form['agency_executive']['exec_title'] = array(
		'#title' => t('Title'),
		'#type' => 'textfield',
		'#description' => t("The official business-title of your agency's executive."),
	 '#size' => 60,
	 '#maxlength' => 60,
	 '#required' => true,
	);
	$form['agency_executive']['exec_phone'] = array(
	 '#title' => t('Phone'),
	 '#type' => 'textfield',
	 '#description' => t("The direct telephone number for your agency's executive."),
	 '#size' => 25,
	 '#maxlength' => 25,
	 '#required' => true,
	);
	$form['agency_executive']['exec_mobile'] = array(
	 '#title' => t('Mobile Phone'),
	 '#type' => 'textfield',
	 '#description' => t("The direct mobile telephone number for your agency's executive."),
	 '#size' => 25,
	 '#maxlength' => 25,
	);
	$form['agency_executive']['exec_fax'] = array(
	 '#title' => t('Fax'),
	 '#type' => 'textfield',
	 '#description' => t("The direct fax number for your agency's executive."),
	 '#size' => 25,
	 '#maxlength' => 25,
	);
	$form['agency_executive']['exec_email'] = array(
	 '#title' => t('Email'),
	 '#type' =>'textfield',
	 '#description' => t("The email address for your agency's executive."),
	 '#size' => 25,
	 '#maxlength' => 254,
	 '#required' => true,
	);

	// Agency Contact
	$form['agency_contact'] = array(
	 '#title' => t('Agency Contact'),
	 '#type' => 'fieldset',
	 '#description' => t('Please provide information about the primary contact person for your agency.'),
	 '#collapsible' => true,
	);
	$form['agency_contact']['same_as_exec'] = array(
	 '#title' => t("Use Executive's Info"),
	 '#type' => 'checkbox',
	 '#default_value' => 0,
	 '#return_value' => 1,
	 '#description' => t("Mark this box if the primary contact person is your agency's executive. Otherwise, leave it empty and provide contact info below."),
	 '#required' => false,
	);
	$form['agency_contact']['contact_fname'] = array(
		'#title' => t('First Name'),
		'#type' => 'textfield',
		'#description' => t("The first or personal-name of your agency's contact person."),
	 '#size' => 60,
	 '#maxlength' => 60,
	);
	$form['agency_contact']['contact_lname'] = array(
		'#title' => t('Family/Last Name'),
		'#type' => 'textfield',
		'#description' => t("The family or last-name of your agency's contact person."),
	 '#size' => 60,
	 '#maxlength' => 60,
	);
	$form['agency_contact']['contact_title'] = array(
		'#title' => t('Title'),
		'#type' => 'textfield',
		'#description' => t("The official business-title of your agency's contact person."),
	 '#size' => 60,
	 '#maxlength' => 60,
	);
	$form['agency_contact']['contact_phone'] = array(
	 '#title' => t('Phone'),
	 '#type' => 'textfield',
	 '#description' => t("The direct telephone number for your agency's contact person."),
	 '#size' => 25,
	 '#maxlength' => 25,
	);
	$form['agency_contact']['contact_mobile'] = array(
	 '#title' => t('Mobile Phone'),
	 '#type' => 'textfield',
	 '#description' => t("The direct mobile telephone number for your agency's contact person."),
	 '#size' => 25,
	 '#maxlength' => 25,
	);
	$form['agency_contact']['contact_fax'] = array(
	 '#title' => t('Fax'),
	 '#type' => 'textfield',
	 '#description' => t("The direct fax number for your agency's contact person."),
	 '#size' => 25,
	 '#maxlength' => 25,
	);
	$form['agency_contact']['contact_email'] = array(
	 '#title' => t('Email'),
	 '#type' =>'textfield',
	 '#description' => t("The email address for your agency's contact person."),
	 '#size' => 25,
	 '#maxlength' => 254,
	);

	// Agency Stats
	$form['agency_stats'] = array(
	 '#title' => t('Agency Statistics'),
	 '#type' => 'fieldset',
	 '#description' => t("Please provide information about your agency's history, licensing, and typical student distribution."),
	 '#collapsible' => true,
	);
	$form['agency_stats']['agency_estabilished'] = array(
		'#title' => t('Year Agency was Established'),
		'#type' => 'textfield',
		'#description' => t('Please provide the year your agency began business operations.'),
		'#size' => 3,
		'#maxlength' => 4,
		'#required' => true,
	);
	$form['agency_stats']['students_abroad'] = array(
		'#title' => t('Number of Students Sent Abroad Last Year'),
		'#type' => 'textfield',
		'#description' => t('How many students did your agency send abroad last year?'),
		'#size' => 6,
		'#maxlength' => 11,
		'#required' => true,
	);
	$form['agency_stats']['students_to_us'] = array(
		'#title' => t('Number of Students Sent to U.S.A. last year'),
		'#type' => 'textfield',
		'#description' => t('How many students did your agency send to the United States of America last year?'),
		'#size' => 6,
		'#maxlength' => 11,
		'#required' => true,
	);
	$form['agency_stats']['student_distribution'] = array(
	 '#title' => t('U.S.A. Student Distribution'),
	 '#type' => 'fieldset',
	 '#description' => t("What percentage of all the students sent to the U.S every year by your agency intend to study the following?"),
	 '#collapsible' => true,
	);
	$form['agency_stats']['student_distribution']['esl_only'] = array(
		'#title' => '% ' . t('Intensive English Program (IEP/ESL) Only'),
		'#type' => 'textfield',
		'#size' => 3,
		'#maxlength' => 4,
		'#required' => true,
	);
	$form['agency_stats']['student_distribution']['univ_transfer'] = array(
		'#title' => '% ' . t('University/College Transfer'),
		'#type' => 'textfield',
		'#size' => 3,
		'#maxlength' => 4,
		'#required' => true,
	);
	$form['agency_stats']['student_distribution']['hs_compl'] = array(
		'#title' => '% ' . t('High School Completion'),
		'#type' => 'textfield',
		'#size' => 3,
		'#maxlength' => 4,
		'#required' => true,
	);
	$form['agency_stats']['student_distribution']['special_prgms'] = array(
		'#title' => '% ' . t('Short-term or Special Programs'),
		'#type' => 'textfield',
		'#size' => 3,
		'#maxlength' => 4,
		'#required' => true,
	);
	$form['agency_stats']['agency_licensed'] = array(
		'#title' => t('Agency is government-licensed'),
		'#type' => 'checkbox',
		'#description' => t('Mark this box if your agency is licensed by the government of your country. Otherwise, leave it empty.'),
	);
	$form['agency_stats']['us_counselors'] = array(
		'#title' => t('USA Counselors'),
		'#type' => 'textfield',
		'#description' => t('Please provide the number of U.S.A. counselors or advisors your agency employs.'),
		'#size' => 6,
		'#maxlength' => 11,
		'#required' => true,
	);
	$form['agency_stats']['annual_training'] = array(
		'#title' => t('Request Annual Training Visit'),
		'#type' => 'checkbox',
		'#description' => t('Mark this box if your agency would like a yearly visit from NSC staff for training. Otherwise, leave it empty.'),
	);

	
	// Agency References
	$form['agency_references'] = array(
	 '#title' => t('Agency References'),
	 '#type' => 'fieldset',
	 '#description' => t("Please provide 2 references of other U.S. colleges or IEP/ESL programs at public institutions your are currently working with."),
	 '#collapsible' => true,
	);
	$form['agency_references']['ref_1'] = array(
	 '#title' => t('1st Reference'),
	 '#type' => 'fieldset',
	 '#collapsible' => true,
	);
	$form['agency_references']['ref_1']['ref_1_org'] = array(
		'#title' => t('Institution'),
		'#type' => 'textfield',
		'#description' => t('Please provide the name of the organization.'),
	);
	$form['agency_references']['ref_1']['ref_1_contact'] = array(
		'#title' => t('Contact'),
		'#type' => 'textfield',
		'#description' => t('Please provide the name of the contact person at that organization.'),
	);
	$form['agency_references']['ref_1']['ref_1_email'] = array(
		'#title' => t('Email'),
		'#type' => 'textfield',
		'#description' => t('Please provide the current email address of the contact person at that organization.'),
		'#size' => 25,
		'#maxlength' => 254,
	);
	$form['agency_references']['ref_1']['ref_1_phone'] = array(
		'#title' => t('Telephone'),
		'#type' => 'textfield',
		'#description' => t('Please provide the current telephone number of the contact person at that organization.'),
		'#size' => 25,
		'#maxlength' => 25,
	);
	$form['agency_references']['ref_2'] = array(
	 '#title' => t('2nd Reference'),
	 '#type' => 'fieldset',
	 '#collapsible' => true,
	);
	$form['agency_references']['ref_2']['ref_2_org'] = array(
		'#title' => t('Institution'),
		'#type' => 'textfield',
		'#description' => t('Please provide the name of the organization.'),
	);
	$form['agency_references']['ref_2']['ref_2_contact'] = array(
		'#title' => t('Contact'),
		'#type' => 'textfield',
		'#description' => t('Please provide the name of the contact person at that organization.'),
	);
	$form['agency_references']['ref_2']['ref_2_email'] = array(
		'#title' => t('Email'),
		'#type' => 'textfield',
		'#description' => t('Please provide the current email address of the contact person at that organization.'),
		'#size' => 25,
		'#maxlength' => 254,
	);
	$form['agency_references']['ref_2']['ref_2_phone'] = array(
		'#title' => t('Telephone'),
		'#type' => 'textfield',
		'#description' => t('Please provide the current telephone number of the contact person at that organization.'),
		'#size' => 25,
		'#maxlength' => 25,
	);


	// Misc
	$form['agency_misc'] = array(
		'#title' => t('Additional Information'),
		'#type' => 'fieldset',
		'#description' => t('Please provide the following additional information.'),
	 '#collapsible' => true,
	);
  $form['agency_misc']['referral_source'] = array(
	 '#title' => t('How did you hear about NSC?'),
	 '#type' => 'radios',
	 '#options' => _get_referral_options(),
  );
  $form['agency_misc']['referral_name'] = array(
	 '#title' => t('Name or location'),
	 '#type' => 'textfield',
	 '#description' => t("Please provide the name, location, or URL of the source of your agency's referral to NSC."),
  );
	$form['agency_misc']['est_annual_vol'] = array(
		'#title' => t('Anticipated Annual Number of Students to NSC'),
		'#type' => 'textfield',
		'#description' => t('Please provide an estimate of the number of students your agency anticipates sending to NSC every year.'),
		'#size' => 6,
		'#maxlength' => 11,
	);
	$form['agency_misc']['student_services_reqs'] = array(
		'#type' => 'markup',
		'#prefix' => '<p>',
		'#suffix' => '</p>',
		'#value' => t('North Seattle College expects all of its agents to provide pre-departure orientation services about visa requirements and program options, assistance with visa processing and travel/housing arrangements. We also expect all agents to work with NSC for airport pickup and student accomodation.'),
	);
	$form['agency_misc']['student_services'] = array(
		'#title' => t('Student Assistance Services'),
		'#type' => 'textarea',
		'#description' => t("Please provide a detailed description of your agency's capacity to provide the expected services"),
		'#rows' => 8,
	);
	$form['agency_misc']['legal_disputes'] = array(
		'#title' => t('This agency (or one of its employees or representitives) has been involved, is currently involved, or has received notice of a possible future legal dispute related to educational counseling or consulting.'),
		'#type' => 'checkbox',
		'#description' => t("Mark this box only if your agency is, or was, involved in an educational legal dispute; or has been notified about it's involvement in a possible future legal dispute. Otherwise, leave it empty."),
	);
	$form['agency_misc']['legal_disputes_details'] = array(
		'#title' => t('Dispute Details'),
		'#type' => 'textarea',
		'#description' => t('If you marked the previous checkbox, please provide a detailed explanation.'),
		'#rows' => 8,
	);


	// Legal
	$form['legal_signatory'] = array(
		'#title' => t('Legal Signatory'),
		'#type' => 'fieldset',
	);
	$form['legal_signatory']['agency_ack'] = array(
		'#title' => t('As an authorized agency signatory, I certify that the information provided in the application form is true and accurate, and I understand that North Seattle College (NSC) reserves the right to terminate any and all relationships with agency or its representatives if NSC discovers, or has reasonable suspicion, that any information provided in this application is false or misleading.'),
		'#type' => 'checkbox',
		'#required' => true,
	);
	$form['legal_signatory']['agency_signature'] = array(
		'#title' => t('Signature'),
		'#type' => 'textfield',
		'#description' => t("Please input the full legal name of the agency's authorized signatory."),
		'#required' => true,
	);
	$form['legal_signatory']['signature_date'] = array(
		'#title' => t('Date'),
		'#type' => 'date',
		'#required' => true,
	);
  
  
  // Form controls
  $form['submit'] = array(
	 '#type' => 'submit',
	 '#value' => t('Apply Now'),
  );


	return $form;
}



/**
 *	ISP agent application: custom validation
 */
function nscc_isp_agent_form_validate($form, &$form_state) {
	if ($form_state['values']['agency_country_code'] == '--') {
		form_set_error('agency_country_code',t('You must select the country in which your agency is located.'));
	}
	if ($form_state['values']['agency_country_code'] == '++'  && ! $form_state['values']['agency_country']) {
		form_set_error('agency_country_code',t('You must either select a country, or enter the name of the country in which your agency is located into the appropriate text field.'));
	}
	if (!email_address_is_valid($form_state['values']['exec_email'])) {
		form_set_error('exec_email', t('Please provide a valid email address for your agency\'s executive.'));
	}
	if (!$form_state['values']['same_as_exec']) {
		$err_msg = 'If the contact person for your agency is not the executive, you must provide the contact person\'s %field-name.';
		if (!$form_state['values']['contact_fname']) { form_set_error('contact_fname', t($err_msg, array('%field-name' => 'first name'))); }
		if (!$form_state['values']['contact_lname']) { form_set_error('contact_lname', t($err_msg, array('%field-name' => 'last name'))); }
		if (!$form_state['values']['contact_title']) { form_set_error('contact_title', t($err_msg, array('%field-name' => 'title'))); }
		if (!$form_state['values']['contact_phone']) { form_set_error('contact_phone', t($err_msg, array('%field-name' => 'phone number'))); }
		if (!email_address_is_valid($form_state['values']['contact_email'])) {
			form_set_error('contact_email', t($err_msg, array('%field-name' => 'valid email address')));
		}
	}
	if (! preg_match('/\d{4}/', $form_state['values']['agency_estabilished'])) {
		form_set_error('agency_estabilished', t('The year your agency was established must be a 4-digit integer.'));
	}
	if (! preg_match('/\d+/', $form_state['values']['students_abroad'])) {
		form_set_error('students_abroad', t('The number of students sent abroad must be an integer.'));
	}
	if (! preg_match('/\d+/', $form_state['values']['students_to_us'])) {
		form_set_error('students_to_us', t('The number of students sent to the U.S.A. must an integer.'));
	}
	if (! preg_match('/\d+((\.|,)\d+)?\s*%?/', $form_state['values']['esl_only'])) {
		form_set_error('esl_only', t('Distribution percentage must be a number'));
	}
	if (! preg_match('/\d+((\.|,)\d+)?\s*%?/', $form_state['values']['univ_transfer'])) {
		form_set_error('univ_transfer', t('Distribution percentage must be a number'));
	}
	if (! preg_match('/\d+((\.|,)\d+)?\s*%?/', $form_state['values']['hs_compl'])) {
		form_set_error('hs_compl', t('Distribution percentage must be a number'));
	}
	if (! preg_match('/\d+((\.|,)\d+)?\s*%?/', $form_state['values']['special_prgms'])) {
		form_set_error('special_prgms', t('Distribution percentage must be a number'));
	}
	if (! preg_match('/\d+/', $form_state['values']['us_counselors'])) {
		form_set_error('us_counselors', t('The number of U.S.A. counselors must an integer.'));
	}
	if (! $form_state['values']['agency_ack']) {
		form_set_error('agency_ack', t('Your agency must certify the accuracy of information provided, and acknowledge the terms and conditions specified, in this application.'));
	}
	if (! $form_state['values']['agency_signature']) {
		form_set_error('agency_signature', t('The full legal name of your agency\'s authorized signatory must be provided in lieu of a physical signature.'));
	}
}



/**
 *	ISP agent application: submission (post validation)
 */
function nscc_isp_agent_form_submit($form, &$form_state) {
	$vcard = nscc_isp_vcard();
	$isp_agent_data = new stdClass();

	$isp_agent_data->agency_name = $form_state['values']['agency_name'];
	$isp_agent_data->agency_addr = $form_state['values']['agency_addr'];
	$isp_agent_data->agency_locality = $form_state['values']['agency_locality'];
	$isp_agent_data->agency_region = $form_state['values']['agency_region'];
	$isp_agent_data->agency_postal_code = $form_state['values']['agency_postal_code'];
	if ($form_state['values']['agency_country_code'] == '++') {
		$isp_agent_data->agency_country = $form_state['values']['agency_country'];
	} else {
		$isp_agent_data->agency_country = $form_state['values']['agency_country_code'];
	}
	$isp_agent_data->agency_url = $form_state['values']['agency_url'];
	$isp_agent_data->exec_given_name = $form_state['values']['exec_fname'];
	$isp_agent_data->exec_surname = $form_state['values']['exec_lname'];
	$isp_agent_data->exec_title = $form_state['values']['exec_title'];
	$isp_agent_data->exec_phone = $form_state['values']['exec_phone'];
	$isp_agent_data->exec_mobile = $form_state['values']['exec_mobile'];
	$isp_agent_data->exec_fax = $form_state['values']['exec_fax'];
	$isp_agent_data->exec_email = $form_state['values']['exec_email'];
	if ($form_state['values']['same_as_exec']) {
		$isp_agent_data->contact_given_name = $form_state['values']['exec_fname'];
		$isp_agent_data->contact_surname = $form_state['values']['exec_lname'];
		$isp_agent_data->contact_title = $form_state['values']['exec_title'];
		$isp_agent_data->contact_phone = $form_state['values']['exec_phone'];
		$isp_agent_data->contact_mobile = $form_state['values']['exec_mobile'];
		$isp_agent_data->contact_fax = $form_state['values']['exec_fax'];
		$isp_agent_data->contact_email = $form_state['values']['exec_email'];	
	} else {
		$isp_agent_data->contact_given_name = $form_state['values']['contact_fname'];
		$isp_agent_data->contact_surname = $form_state['values']['contact_lname'];
		$isp_agent_data->contact_title = $form_state['values']['contact_title'];
		$isp_agent_data->contact_phone = $form_state['values']['contact_phone'];
		$isp_agent_data->contact_mobile = $form_state['values']['contact_mobile'];
		$isp_agent_data->contact_fax = $form_state['values']['contact_fax'];
		$isp_agent_data->contact_email = $form_state['values']['contact_email'];
	}
	$isp_agent_data->year_established = $form_state['values']['agency_estabilished'];
	$isp_agent_data->students_sent_abroad = $form_state['values']['students_abroad'];
	$isp_agent_data->students_sent_to_usa = $form_state['values']['students_to_us'];
	$isp_agent_data->percent_esl_only = $form_state['values']['esl_only'];
	$isp_agent_data->percent_univ_transfer = $form_state['values']['univ_transfer'];
	$isp_agent_data->percent_hs_compl = $form_state['values']['hs_compl'];
	$isp_agent_data->percent_special_prgms = $form_state['values']['special_prgms'];
	$isp_agent_data->agency_is_licensed = $form_state['values']['agency_licensed'];
	$isp_agent_data->num_us_counselors = $form_state['values']['us_counselors'];
	$isp_agent_data->annual_training_visit = $form_state['values']['annual_training'];
	$isp_agent_data->ref_1_org = $form_state['values']['ref_1_org'];
	$isp_agent_data->ref_1_contact = $form_state['values']['ref_1_contact'];
	$isp_agent_data->ref_1_email = $form_state['values']['ref_1_email'];
	$isp_agent_data->ref_1_phone = $form_state['values']['ref_1_phone'];
	$isp_agent_data->ref_2_org = $form_state['values']['ref_2_org'];
	$isp_agent_data->ref_2_contact = $form_state['values']['ref_2_contact'];
	$isp_agent_data->ref_2_email = $form_state['values']['ref_2_email'];
	$isp_agent_data->ref_2_phone = $form_state['values']['ref_2_phone'];
	$isp_agent_data->referral_source = $form_state['values']['referral_source'];
	$isp_agent_data->referral_name = $form_state['values']['referral_name'];
	$isp_agent_data->est_annual_vol = $form_state['values']['est_annual_vol'];
	$isp_agent_data->student_services = $form_state['values']['student_services'];
	$isp_agent_data->legal_disputes = $form_state['values']['legal_disputes'];
	$isp_agent_data->legal_disputes_details = $form_state['values']['legal_disputes_details'];
	$isp_agent_data->signatory_acknowledgement = $form_state['values']['agency_ack'];
	$isp_agent_data->authorized_signature = $form_state['values']['agency_signature'];
	$isp_agent_data->signed_date = _convert_ddate_to_pdate($form_state['values']['signature_date']);
	
	_checkadd_ip_db();
	if (nscc_write_record('agent_applications', $isp_agent_data, 'international_programs') !== false) {
		$msg['text'] = t('Thank you! Your application has been received. If you need to contact us about your application, please include your NSC Agency ID number in any correspondence. Your Agency ID number is %id.', array('%id' => $isp_agent_data->id));
		$msg['type'] = 'status';
		$agent_email = '"'. addslashes(mime_header_encode($isp_agent_data->contact_given_name.' '.$isp_agent_data->contact_surname)) ."\" <{$isp_agent_data->contact_email}>";	//ensures RFC 2822 compliance.
		drupal_mail('nscc_isp_admission', 'agent_ack', $agent_email, $language, array('app_id'=>$isp_agent_data->id), $vcard['email'], true);
		drupal_mail('nscc_isp_admission', 'dept_notice_agent', 'van.pham@seattlecolleges.edu', $language, array('app_id'=>$isp_agent_data->id, 'applicant'=>$isp_agent_data->agency_name), '"NSC Web Server" <webmaster@northseattle.edu>', true);
		watchdog('nscc_isp_agent', 'ISP agent application submitted with id %id.', array('%id'=>$isp_agent_data->id,));
	} else {
		$msg['text'] = t('Sorry, there was a problem that prevented your application from being received. Please try again.');
		$msg['type'] = 'warning';
		$form_state['rebuild'] = true;
		watchdog('nscc_isp_agent', 'ISP agent application failed to submit. Result = %result <pre>'.print_r($isp_agent_data,true).'</pre>', array('%result' => $result));
	}
	drupal_set_message($msg['text'], $msg['type']);
}



/**
 *	Email acknowledgement and notice templates.
 *	@see HOOK_mail()
 */
function nscc_isp_admission_mail($key, &$msg, $params) {
	$lang = $msg['language'];
	switch ($key) {
	
		// Acknowledgement: student application
		case 'student_ack' :
			$vcard = nscc_isp_vcard();
			$reqs = nscc_isp_required_docs();
			if ($params['paid_fee'] !== true) { array_unshift($reqs, t('$!app-fee (USD) non-refundable application fee', array('!app-fee'=>number_format(ISP_APPLICATION_FEE, 2)))); }
			$msg['subject'] = t('Student Application (#!app-id) Received', array('!app-id' => $params['app_id']), $lang->language);
			$msg['body'][] = t('Thank you for your interest in North Seattle College!', null, $lang->language);
			$msg['body'][] = ($params['paid_fee'] === true)
				? t('We have received both your application and fee payment.', null, $lang->language)
				: t('We have received your application.', null, $lang->language);
			$msg['body'][] = t('Your Application ID number is !app-id. Please include this number with all correspondence. If you need to change any of your application information, please contact us by phone or email with the changes. Submitting multiple admission forms will delay processing your application.', array('!app-id'=>$params['app_id']), $lang->language);
			$msg['body'][] = t('The following items still need to be sent to NSC. Except as noted, they are all required and this application will not be considered complete until they have been received. Please include a cover sheet with the student\'s name and Application ID number !app-id when sending these items.', array('!app-id'=>$params['app_id']), $lang->language);
			foreach ($reqs as $item) { $msg['body'][] = "\t* $item"; }
			$msg['body'][] = t('You can send documents by fax to !fax_num, by email: NAdmissions@seattlecolleges.edu). or by postal mail to:', array('!fax_num'=>$vcard['tel']['fax']));
			$msg['body'][] = "\t{$vcard['org']['org-name']}";
			$msg['body'][] = "\t{$vcard['org']['org-unit']}";
			$msg['body'][] = "\t{$vcard['addr']['street']}";
			$msg['body'][] = "\t{$vcard['addr']['locality']}, {$vcard['addr']['region']['abbr']} {$vcard['addr']['postal']}}";
			$msg['body'][] = "\t{$vcard['addr']['country']['abbr']}";
			$msg['body'][] = "\tRE: Application Number {$params['app_id']}";
			if ($params['paid_fee'] !== true) {
				$msg['body'][] = t('You can also send your check or money order for the $!app-fee (USD) application fee to the address above.', array('!app-fee'=>number_format(ISP_APPLICATION_FEE, 2)), $lang->language);
				//$msg['body'][] = t('You can also send your check or money order for the $!app-fee (USD) application fee to the address above. If you prefer to pay your fee by phone with a credit card, please call us at !phone during normal business hours.', array('!app-fee'=>number_format(ISP_APPLICATION_FEE, 2),'!phone'=>$vcard['tel']['voice']), $lang->language);
			}
			
			// Add deposit-required message as needed.
			if (! empty($params['deposit_notice'])) {
				$dep_note_arr = _get_deposit_notice($params['deposit_notice']);
				foreach ($dep_note_arr as $paragraph) {
					$msg['body'][] = $paragraph;
				}
			}
		
			$msg['body'][] = t('If you have any questions, please feel free to contact us.');
			$msg['body'][] = t('Sincerely'). ',';
			$msg['body'][] = ' ';
			$msg['body'][] = "NSC {$vcard['org']['org-unit']}";
			break;
		
		// Acknowledgement: agent application
		case 'agent_ack' :
			$vcard = nscc_isp_vcard();
			$msg['subject'] = t('NSC Agency Application (#!agency_num) Received', array('!agency_num' => $params['app_id']), $lang->language);
			$msg['body'][] = t('Thank you for your interest in partnering with North Seattle College!', null, $lang->language);
			$msg['body'][] = t('We have received your agency application. After reviewing your application, an NSC International Programs Agency Coordinator will contact you directly.', null, $lang->language);
			$msg['body'][] = t('Your NSC Agency ID number is !agency-num. Please include this number with all correspondence.', array('!agency-num'=>$params['app_id']), $lang->language);
			$msg['body'][] = t('If you have any questions, please feel free to contact us.');
			$msg['body'][] = t('Sincerely'). ',';
			$msg['body'][] = "NSC {$vcard['org']['org-unit']}";
			break;
		
		// Notice: new student application
		case 'dept_notice_student' :
			$msg['subject'] = "New Student Application (no. {$params['app_id']})";
			$msg['body'][] = "Student application no. {$params['app_id']} for {$params['applicant']} has been received.";
			$msg['body'][] = 'This is an automated message from the college Web server, please do not reply to it.';
			break;
		
		// Notice: new agent application
		case 'dept_notice_agent' :
			$msg['subject'] = "New Agent Application (no. {$params['app_id']})";
			$msg['body'][] = "Agent application no. {$params['app_id']} for {$params['applicant']} has been received.";
			$msg['body'][] = 'This is an automated message from the college Web server, please do not reply to it.';
			break;

		// Notice: fee payment processed (staff)
		case 'fee_payment_processed' :
			//watchdog('IP Module', 'Mail params: <pre>'.print_r($params,true)."</pre>\n");
			$auth = $params['auth_response'];
			$cap = $params['capture_response'];
			$msg['subject'] = "Applicant fee payment processed";
			$msg['body'][] = 'Fee payment has been successfully processed. See details below.';
			$msg['body'][] = 'Application number: '.$params['app_id'];
			$msg['body'][] = "Applicant name: {$params['applicant']}";
			$msg['body'][] = 'Amount paid: '.$cap->ccCaptureReply->amount;
			$msg['body'][] = 'Authorization request: '.$auth->requestID;
			$msg['body'][] = 'Reconciliation ID: '.$cap->ccCaptureReply->reconciliationID;
			$msg['body'][] = 'This is an automated message from the college Web server, please do not reply to it.';
			break;

		// Notice: fee payment needs verification (staff).
		case 'verify_cc_transaction' :
			$response = $params['response'];
			$ref_code = $response->merchantReferenceCode;
			$req_id = $response->requestID;
			$app_id = $params['app_id'];
			$fee_amt = '$'.number_format(ISP_APPLICATION_FEE, 2);
			$cc_email = $params['cc_email'];
			$msg['headers']['Cc:'] = 'webmaster@northseattle.edu';
			$msg['subject'] = 'Verification of payment to NSC International Program needed';
			$msg['body'][] = "The credit card transaction for payment of the NSC International Program student admission application fee needs to be verified manually via the Cybersource Business Center. Cybersource returned a transaction response acknowledging it had received our payment request, but did not indicate whether the payment was approved or declined.";
			$msg['body'][] = 'As a courtesy the student\'s application has been accepted pending verification of fee payment, and the applicant has been advised of the situation via direct response from the application form and by email to the address provided. A follow up contact from IP staff would likely be appreciated by the applicant.';
			$msg['body'][] = "The Merchant Reference Code for the transaction in question is $ref_code.";
			$msg['body'][] = "The Cybersource Request ID is $req_id.";
			$msg['body'][] = "The NSC International Program application number is $app_id.";
			$msg['body'][] = "The amount in question is $fee_amt.";
			$msg['body'][] = "The account holder's email address is $cc_email.";
			break;

		// Notice: fee payment needs verification (cardholder).
		case 'payment_verification_pending' :
			$vcard = nscc_isp_vcard();
			$app_id = $params['app_id'];
			$fee_amt = '$'.number_format(ISP_APPLICATION_FEE, 2).' (USD)';
			$msg['headers']['Cc:'] = $vcard['email'];
			$msg['subject'] = t('Payment verification to NSC International Program pending');
			$msg['body'][] = t('There was a problem processing your application payment.');
			$msg['body'][] = t('Payment of the !fee-amt fee for application number !app-id to the NSC International Program needs to be verified by NSC staff. The bank or payment processor did not provide a clear reponse when payment was requested, so we were unable to determine at that time if payment has been received.', array('!fee-amt'=>$fee_amt, '!app-id'=>$app_id));
			$msg['body'][] = t('A representative from the NSC International Program will contact you once they have verified if the payment transaction was successful or not.');
			$msg['body'][] = t('While the cause of the problem was not under our control, we understand that you may have some concern. Please do not hesitate to contact us if you need to.');
			$msg['body'][] = t('We appologize for any inconvenience this may have caused you.');
			$msg['body'][] = t('Sincerely,');
			$msg['body'][] = $vcard['org']['org-unit'];
			$msg['body'][] = $vcard['org']['org-name'];
			$msg['body'][] = $vcard['tel']['voice'];
			$msg['body'][] = $vcard['email'];
			break;

		// Notice: manual payment capture required (staff).
		case 'payment_capture_failed' :
			$auth_response = $params['auth_response'];
			$cap_response = $params['cap_response'];
			$ref_code = $auth_response->merchantReferenceCode;
			$req_id = $auth_response->requestID;
			$app_id = $params['app_id'];
			$fee_amt = '$'.number_format(ISP_APPLICATION_FEE, 2);
			$cc_email = $params['cc_email'];
			$msg['headers']['Cc:'] = 'webmaster@northseattle.edu';
			$msg['subject'] = 'Capture of payment to NSC International Program needed';
			$msg['body'][] = 'The credit card payment of an NSC International Program student admission application fee needs to be captured manually via the Cybersource Business Center. During the payment processing a transmission error prevented capturing payment for this transaction. Therefore to ensure we actually receive payment, please do a manual capture.';
			$msg['body'][] = "The Merchant Reference Code for the transaction in question is $ref_code.";
			$msg['body'][] = "The Cybersource Request ID is $req_id.";
			$msg['body'][] = "The NSC International Program application number is $app_id.";
			$msg['body'][] = "The amount in question is $fee_amt.";
			$msg['body'][] = "The account holder's email address is $cc_email.";
			break;
	}
}



/**
 *	Helper function: List of required documents w/ fax number and mailing address in HTML format.
 *	@return string
 */
function nscc_isp_req_docs_note() {
	$req_docs = nscc_isp_required_docs();
	$vcard = nscc_isp_vcard();
	$html[] = '<ul>';
	foreach ($req_docs as $doc) {
		$html[] = "<li>$doc</li>";
	}
	$html[] = '</ul>';
	$html[] = '<p>' . t('You can send copies of these documents by fax to %fax_num', array('%fax_num' => $vcard['tel']['fax']), '; email to NAdmissions@seattlecolleges.edu,') . '</p>';
	$html[] = '<p>' . t('Or, in-person to our front office or you can send them by postal mail to:') . '</p>' . nscc_isp_mailing_addr();
	return implode("\n", $html);
}



/**
 *	Helper function: ISP mailing address as hcard
 *	@return string
 */
function nscc_isp_mailing_addr() {
	$vcard = nscc_isp_vcard();
	return <<<ISP_MAIL_ADDR
<div class="vcard">
 	<span class="org">
		<span class="organization-name">{$vcard['org']['org-name']}</span>
		<span class="organization-unit fn">{$vcard['org']['org-unit']}</span>
	</span>
 	<div class="addr">
		<span class="street-address">{$vcard['addr']['street']}</span>
 		<span class="locality">{$vcard['addr']['locality']}</span>,
		<abbr class="region" title="{$vcard['addr']['region']['name']}">{$vcard['addr']['region']['abbr']}</abbr> 
		<span class="postal-code">{$vcard['addr']['postal']}</span> 
		<abbr class="country-name" title="{$vcard['addr']['country']['name']}">{$vcard['addr']['country']['abbr']}</abbr>
	</div>
</div>
<p>Attn: {$vcard['org']['org-unit']}</p>
ISP_MAIL_ADDR;
}



/**
 *	Helper function: ISP vcard
 *	Returns an array of ISP vcard data.
 *	@return array
 */
function nscc_isp_vcard() {
	return array(
		'org' => array(
			'org-name' => 'North Seattle College',
			'org-unit' => 'International Programs',
			),
		'addr' => array(
			'street' => '9600 College Way N',
			'locality' => 'Seattle',
			'region' => array(
				'abbr' => 'WA',
				'name' => 'Washington',
				),
			'postal' => '98103-3514',
			'country' => array(
				'abbr' => 'USA',
				'name' => 'United States of America',
				),
			),
		'tel' => array(
			'voice' => '(206) 934-3672',
			'fax' => '(206) 934-3794',
			),
		'email' => array(
			'text' => 'International Programs',
			'address' => 'international@seattlecolleges.edu',
			),
		//'email' => '"Webmaster Testing" <michael.vellines@seattlecolleges.edu>',
		);
}



/**
 *	Helper function: ISP required docs list
 *	Returns a list of ISP required documents passed through t().
 *	@return array
 */
function nscc_isp_required_docs() {
	return array(
		t('Passport photo page'),
		t('Bank/Financial statement
			o   IEP: $20,404 USD
			o   College-Level (Associate Degree): $20,782 USD
			o   BAS: $29,723 USD'),
		t('High school transcript (If applying for high school completion or student is under 18 years old)'),
		t('I-20 (If transferring from another college)'),
		t('I-94 (If transferring from another college; both I-94 and Travel History found at https://i94.cbp.dhs.gov/I94/#/home)'),
		t('Visa (If transferring from another college)'),
	);
}



/**
 *	Date conversion utility function.
 */
function _convert_ddate_to_pdate($ddate){
		$months = array('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
		$pdate = $months[$ddate['month']-1].'-'.$ddate['day'].'-'.$ddate['year'];
	return $pdate;
}



/**
 *	 Helper function to supply array of ISO country codes and standard names.
 */
function _get_countries_array() {
//	if ($testing) {
		return array(
			'--' => t('Please select one'),
			'AF' => t('Afghanistan'),
			'AX' => t('Åland Islands'),
			'AL' => t('Albania'),
			'DZ' => t('Algeria'),
			'AS' => t('American Samoa'),
			'AD' => t('Andorra'),
			'AO' => t('Angola'),
			'AI' => t('Anguilla'),
			'AQ' => t('Antarctica'),
			'AG' => t('Antigua & Barbuda'),
			'AR' => t('Argentina'),
			'AM' => t('Armenia'),
			'AW' => t('Aruba'),
			'AU' => t('Australia'),
			'AT' => t('Austria'),
			'AZ' => t('Azerbaijan'),
			'BS' => t('Bahama'),
			'BH' => t('Bahrain'),
			'BD' => t('Bangladesh'),
			'BB' => t('Barbados'),
			'BY' => t('Belarus'),
			'BE' => t('Belgium'),
			'BZ' => t('Belize'),
			'BJ' => t('Benin'),
			'BM' => t('Bermuda'),
			'BT' => t('Bhutan'),
			'BO' => t('Bolivia'),
			'BQ' => t('Bonaire, Sint Eustatius and Saba'),
			'BA' => t('Bosnia and Herzegovina'),
			'BW' => t('Botswana'),
			'BV' => t('Bouvet Island'),
			'BR' => t('Brazil'),
			'IO' => t('British Indian Ocean Territory'),
			'BN' => t('Brunei Darussalam'),
			'BG' => t('Bulgaria'),
			'BF' => t('Burkina Faso'),
			'BI' => t('Burundi'),
			'KH' => t('Cambodia'),
			'CM' => t('Cameroon'),
			'CA' => t('Canada'),
			'CV' => t('Cape Verde'),
			'KY' => t('Cayman Islands'),
			'CF' => t('Central African Republic'),
			'TD' => t('Chad'),
			'CL' => t('Chile'),
			'CN' => t('China'),
			'CX' => t('Christmas Island'),
			'CC' => t('Cocos (Keeling) Islands'),
			'CO' => t('Colombia'),
			'KM' => t('Comoros'),
			'CG' => t('Congo'),
			'CD' => t('Congo, the Democratic Republic of the'),
			'CK' => t('Cook Islands'),
			'CR' => t('Costa Rica'),
			'CI' => t("Côte d'Ivoire"),
			'HR' => t('Croatia'),
			'CU' => t('Cuba'),
			'CW' => t('Curaçao'),
			'CY' => t('Cyprus'),
			'CZ' => t('Czech Republic'),
			'DK' => t('Denmark'),
			'DJ' => t('Djibouti'),
			'DM' => t('Dominica'),
			'DO' => t('Dominican Republic'),
			'EC' => t('Ecuador'),
			'EG' => t('Egypt'),
			'SV' => t('El Salvador'),
			'GQ' => t('Equatorial Guinea'),
			'ER' => t('Eritrea'),
			'EE' => t('Estonia'),
			'ET' => t('Ethiopia'),
			'FK' => t('Falkland Islands (Malvinas)'),
			'FO' => t('Faroe Islands'),
			'FJ' => t('Fiji'),
			'FI' => t('Finland'),
			'FR' => t('France'),
			'GF' => t('French Guiana'),
			'PF' => t('French Polynesia'),
			'TF' => t('French Southern Territories'),
			'GA' => t('Gabon'),
			'GM' => t('Gambia'),
			'GE' => t('Georgia'),
			'DE' => t('Germany'),
			'GH' => t('Ghana'),
			'GI' => t('Gibraltar'),
			'GR' => t('Greece'),
			'GL' => t('Greenland'),
			'GD' => t('Grenada'),
			'GP' => t('Guadeloupe'),
			'GU' => t('Guam'),
			'GT' => t('Guatemala'),
			'GG' => t('Guernsey'),
			'GN' => t('Guinea'),
			'GW' => t('Guinea-Bissau'),
			'GY' => t('Guyana'),
			'HT' => t('Haiti'),
			'HM' => t('Heard Island & McDonald Islands'),
			'VA' => t('Holy See (Vatican City State)'),
			'HN' => t('Honduras'),
			'HK' => t('Hong Kong'),
			'HU' => t('Hungary'),
			'IS' => t('Iceland'),
			'IN' => t('India'),
			'ID' => t('Indonesia'),
			'IR' => t('Iran, Islamic Republic of'),
			'IQ' => t('Iraq'),
			'IE' => t('Ireland'),
			'IL' => t('Israel'),
			'IT' => t('Italy'),
			'JM' => t('Jamaica'),
			'JP' => t('Japan'),
			'JE' => t('Jersey'),
			'JO' => t('Jordan'),
			'KZ' => t('Kazakhstan'),
			'KE' => t('Kenya'),
			'KI' => t('Kiribati'),
			'KP' => t("Korea, Democratic People's Republic of"),
			'KR' => t('Korea, Republic of'),
			'KW' => t('Kuwait'),
			'KG' => t('Kyrgyzstan'),
			'LA' => t("Lao People's Democratic Republic"),
			'LV' => t('Latvia'),
			'LB' => t('Lebanon'),
			'LS' => t('Lesotho'),
			'LR' => t('Liberia'),
			'LY' => t('Libya'),
			'LI' => t('Liechtenstein'),
			'LT' => t('Lithuania'),
			'LU' => t('Luxembourg'),
			'MO' => t('Macao'),
			'MK' => t('Macedonia, the former Yugoslav Republic of'),
			'MG' => t('Madagascar'),
			'MW' => t('Malawi'),
			'MY' => t('Malaysia'),
			'MV' => t('Maldives'),
			'ML' => t('Mali'),
			'MT' => t('Malta'),
			'MH' => t('Marshall Islands'),
			'MQ' => t('Martinique'),
			'MR' => t('Mauritania'),
			'MU' => t('Mauritius'),
			'YT' => t('Mayotte'),
			'MX' => t('Mexico'),
			'FM' => t('Micronesia, Federated States of'),
			'MD' => t('Moldova, Republic of'),
			'MC' => t('Monaco'),
			'MN' => t('Mongolia'),
			'ME' => t('Montenegro'),
			'MS' => t('Monserrat'),
			'MA' => t('Morocco'),
			'MZ' => t('Mozambique'),
			'MM' => t('Myanmar'),
			'NA' => t('Namibia'),
			'NR' => t('Nauru'),
			'NP' => t('Nepal'),
			'NL' => t('Netherlands'),
			'NC' => t('New Caledonia'),
			'NZ' => t('New Zealand'),
			'NI' => t('Nicaragua'),
			'NE' => t('Niger'),
			'NG' => t('Nigeria'),
			'NU' => t('Niue'),
			'NF' => t('Norfolk Island'),
			'MP' => t('Northern Mariana Islands'),
			'NO' => t('Norway'),
			'OM' => t('Oman'),
			'PK' => t('Pakistan'),
			'PW' => t('Palau'),
			'PS' => t('Palestinian Territory, Occupied'),
			'PA' => t('Panama'),
			'PG' => t('Papua New Guinea'),
			'PY' => t('Paraguay'),
			'PE' => t('Peru'),
			'PH' => t('Philippines'),
			'PN' => t('Pitcairn'),
			'PL' => t('Poland'),
			'PT' => t('Portugal'),
			'PR' => t('Puerto Rico'),
			'QA' => t('Qatar'),
			'RE' => t('Réunion'),
			'RO' => t('Romania'),
			'RU' => t('Russian Federation'),
			'RW' => t('Rwanda'),
			'BL' => t('Saint Barthélemy'),
			'SH' => t('Saint Helena, Ascension and Tristan da Cunha'),
			'KN' => t('Saint Kitts and Nevis'),
			'LC' => t('Saint Lucia'),
			'MF' => t('Saint Martin (French part)'),
			'PM' => t('Saint Pierre and Miquelon'),
			'VC' => t('Saint Vincent and the Grenadines'),
			'WS' => t('Samoa'),
			'SM' => t('San Marino'),
			'ST' => t('Sao Tome & Principe'),
			'SA' => t('Saudi Arabia'),
			'SN' => t('Senegal'),
			'SC' => t('Seychelles'),
			'SL' => t('Sierra Leone'),
			'SG' => t('Singapore'),
			'SX' => t('Sint Maarten (Dutch part)'),
			'SK' => t('Slovakia'),
			'SI' => t('Slovenia'),
			'SB' => t('Solomon Islands'),
			'SO' => t('Somalia'),
			'ZA' => t('South Africa'),
			'GS' => t('South Georgia and the South Sandwich Islands'),
			'SS' => t('South Sudan'),
			'ES' => t('Spain'),
			'LK' => t('Sri Lanka'),
			'SD' => t('Sudan'),
			'SR' => t('Suriname'),
			'SJ' => t('Svalbard and Jan Mayen'),
			'SZ' => t('Swaziland'),
			'SE' => t('Sweden'),
			'CH' => t('Switzerland'),
			'SY' => t('Syrian Arab Republic'),
			'TW' => t('Taiwan, Province of China'),
			'TJ' => t('Tajikistan'),
			'TZ' => t('Tanzania, United Republic of'),
			'TH' => t('Thailand'),
			'TL' => t('Timor-Leste'),
			'TG' => t('Togo'),
			'TK' => t('Tokelau'),
			'TO' => t('Tonga'),
			'TT' => t('Trinidad and Tobago'),
			'TN' => t('Tunisia'),
			'TR' => t('Turkey'),
			'TM' => t('Turkmenistan'),
			'TC' => t('Turks and Caicos Islands'),
			'TV' => t('Tuvalu'),
			'UG' => t('Uganda'),
			'UA' => t('Ukraine'),
			'AE' => t('United Arab Emirates'),
			'GB' => t('United Kingdom'),
			'US' => t('United States of America'),
			'UM' => t('United States Minor Outlying Islands'),
			'UY' => t('Uruguay'),
			'UZ' => t('Uzbekistan'),
			'VU' => t('Vanuatu'),
			'VE' => t('Venezuela, Bolivarian Republic of'),
			'VN' => t('Viet Nam'),
			'WF' => t('Wallis and Futuna'),
			'EH' => t('Western Sahara'),
			'YE' => t('Yemen'),
			'ZM' => t('Zambia'),
			'ZW' => t('Zimbabwe'),
			'++' => t('Other (Please type in the country name in the field below)'),
		);
/*
	} else {
		return array(
			'--' => t('Please select one'),
			'Afghanistan' => t('Afghanistan'),
			'Albania' => t('Albania'),
			'Algeria' => t('Algeria'),
			'American Samoa' => t('American Samoa'),
			'Andorra' => t('Andorra'),
			'Angola' => t('Angola'),
			'Anguilla' => t('Anguilla'),
			'Antarctica' => t('Antarctica'),
			'Antigua & Barbuda' => t('Antigua & Barbuda'),
			'Argentina' => t('Argentina'),
			'Armenia' => t('Armenia'),
			'Aruba' => t('Aruba'),
			'Australia' => t('Australia'),
			'Austria' => t('Austria'),
			'Azerbaijan' => t('Azerbaijan'),
			'Bahama' => t('Bahama'),
			'Bahrain' => t('Bahrain'),
			'Bangladesh' => t('Bangladesh'),
			'Barbados' => t('Barbados'),
			'Belarus' => t('Belarus'),
			'Belgium' => t('Belgium'),
			'Belize' => t('Belize'),
			'Benin' => t('Benin'),
			'Bermuda' => t('Bermuda'),
			'Bhutan' => t('Bhutan'),
			'Bolivia' => t('Bolivia'),
			'Bosnia and Herzegovina' => t('Bosnia and Herzegovina'),
			'Botswana' => t('Botswana'),
			'Bouvet Island' => t('Bouvet Island'),
			'Brazil' => t('Brazil'),
			'British Indian Ocean Territory' => t('British Indian Ocean Territory'),
			'British Virgin Islands' => t('British Virgin Islands'),
			'Brunei Darussalam' => t('Brunei Darussalam'),
			'Bulgaria' => t('Bulgaria'),
			'Burkina Faso' => t('Burkina Faso'),
			'Burma (no longer exists)' => t('Burma (no longer exists)'),
			'Burundi' => t('Burundi'),
			'Cambodia' => t('Cambodia'),
			'Cameroon' => t('Cameroon'),
			'Canada' => t('Canada'),
			'Cape Verde' => t('Cape Verde'),
			'Cayman Islands' => t('Cayman Islands'),
			'Central African Republic' => t('Central African Republic'),
			'Chad' => t('Chad'),
			'Chile' => t('Chile'),
			'China' => t('China'),
			'Christmas Island' => t('Christmas Island'),
			'Cocos (Keeling) Islands' => t('Cocos (Keeling) Islands'),
			'Colombia' => t('Colombia'),
			'Comoros' => t('Comoros'),
			'Congo' => t('Congo'),
			'Cook Islands' => t('Cook Islands'),
			'Costa Rica' => t('Costa Rica'),
			'Croatia' => t('Croatia'),
			'Cote Divoire (Ivory Coast)' => t('Cote Divoire (Ivory Coast)'),
			'Cuba' => t('Cuba'),
			'Cyprus' => t('Cyprus'),
			'Czech Republic' => t('Czech Republic'),
			'Czechoslovakia (no longer exists)' => t('Czechoslovakia (no longer exists)'),
			'Democratic Yemen (no longer exists)' => t('Democratic Yemen (no longer exists)'),
			'Denmark' => t('Denmark'),
			'Djibouti' => t('Djibouti'),
			'Dominica' => t('Dominica'),
			'Dominican Republic' => t('Dominican Republic'),
			'East Timor' => t('East Timor'),
			'Ecuador' => t('Ecuador'),
			'Egypt' => t('Egypt'),
			'El Salvador' => t('El Salvador'),
			'Equatorial Guinea' => t('Equatorial Guinea'),
			'Eritrea' => t('Eritrea'),
			'Estonia' => t('Estonia'),
			'Ethiopia' => t('Ethiopia'),
			'Falkland Islands (Malvinas)' => t('Falkland Islands (Malvinas)'),
			'Faroe Islands' => t('Faroe Islands'),
			'Fiji' => t('Fiji'),
			'Finland' => t('Finland'),
			'France' => t('France'),
			'France, Metropolitan' => t('France, Metropolitan'),
			'French Guiana' => t('French Guiana'),
			'French Polynesia' => t('French Polynesia'),
			'French Southern Territories' => t('French Southern Territories'),
			'Gabon' => t('Gabon'),
			'Gambia' => t('Gambia'),
			'Georgia' => t('Georgia'),
			'German Democratic Republic (no longer exists)' => t('German Democratic Republic (no longer exists)'),
			'Germany' => t('Germany'),
			'Ghana' => t('Ghana'),
			'Gibraltar' => t('Gibraltar'),
			'Greece' => t('Greece'),
			'Greenland' => t('Greenland'),
			'Grenada' => t('Grenada'),
			'Guadeloupe' => t('Guadeloupe'),
			'Guam' => t('Guam'),
			'Guatemala' => t('Guatemala'),
			'Guinea' => t('Guinea'),
			'Guinea-Bissau' => t('Guinea-Bissau'),
			'Guinea-Conakry' => t('Guinea-Conakry'),
			'Guyana' => t('Guyana'),
			'Haiti' => t('Haiti'),
			'Heard & McDonald Islands' => t('Heard & McDonald Islands'),
			'Honduras' => t('Honduras'),
			'Hong Kong' => t('Hong Kong'),
			'Hungary' => t('Hungary'),
			'Iceland' => t('Iceland'),
			'India' => t('India'),
			'Indonesia' => t('Indonesia'),
			'Iraq' => t('Iraq'),
			'Ireland' => t('Ireland'),
			'Islamic Republic of Iran' => t('Islamic Republic of Iran'),
			'Israel' => t('Israel'),
			'Italy' => t('Italy'),
			'Jamaica' => t('Jamaica'),
			'Japan' => t('Japan'),
			'Jordan' => t('Jordan'),
			'Kazakhstan' => t('Kazakhstan'),
			'Kenya' => t('Kenya'),
			'Kiribati' => t('Kiribati'),
			'Korea, Democratic Peoples Republic of' => t('Korea, Democratic Peoples Republic of'),
			'Korea, Republic of' => t('Korea, Republic of'),
			'Kuwait' => t('Kuwait'),
			'Kyrgyzstan' => t('Kyrgyzstan'),
			'Lao Peoples Democratic Republic' => t('Lao Peoples Democratic Republic'),
			'Latvia' => t('Latvia'),
			'Lebanon' => t('Lebanon'),
			'Lesotho' => t('Lesotho'),
			'Liberia' => t('Liberia'),
			'Libyan Arab Jamahiriya' => t('Libyan Arab Jamahiriya'),
			'Liechtenstein' => t('Liechtenstein'),
			'Lithuania' => t('Lithuania'),
			'Luxembourg' => t('Luxembourg'),
			'Macau' => t('Macau'),
			'Madagascar' => t('Madagascar'),
			'Malawi' => t('Malawi'),
			'Malaysia' => t('Malaysia'),
			'Maldives' => t('Maldives'),
			'Mali' => t('Mali'),
			'Malta' => t('Malta'),
			'Marshall Islands' => t('Marshall Islands'),
			'Martinique' => t('Martinique'),
			'Mauritania' => t('Mauritania'),
			'Mauritius' => t('Mauritius'),
			'Mayotte' => t('Mayotte'),
			'Mexico' => t('Mexico'),
			'Micronesia' => t('Micronesia'),
			'Moldova, Republic of' => t('Moldova, Republic of'),
			'Monaco' => t('Monaco'),
			'Mongolia' => t('Mongolia'),
			'Monserrat' => t('Monserrat'),
			'Morocco' => t('Morocco'),
			'Mozambique' => t('Mozambique'),
			'Myanmar' => t('Myanmar'),
			'Namibia' => t('Namibia'),
			'Nauru' => t('Nauru'),
			'Nepal' => t('Nepal'),
			'Netherlands' => t('Netherlands'),
			'Netherlands Antilles' => t('Netherlands Antilles'),
			'Neutral Zone (no longer exists)' => t('Neutral Zone (no longer exists)'),
			'New Caledonia' => t('New Caledonia'),
			'New Zealand' => t('New Zealand'),
			'Nicaragua' => t('Nicaragua'),
			'Niger' => t('Niger'),
			'Nigeria' => t('Nigeria'),
			'Niue' => t('Niue'),
			'Norfolk Island' => t('Norfolk Island'),
			'Northern Mariana Islands' => t('Northern Mariana Islands'),
			'Norway' => t('Norway'),
			'Oman' => t('Oman'),
			'Pakistan' => t('Pakistan'),
			'Palau' => t('Palau'),
			'Panama' => t('Panama'),
			'Papua New Guinea' => t('Papua New Guinea'),
			'Paraguay' => t('Paraguay'),
			'Peru' => t('Peru'),
			'Philippines' => t('Philippines'),
			'Pitcairn' => t('Pitcairn'),
			'Poland' => t('Poland'),
			'Portugal' => t('Portugal'),
			'Puerto Rico' => t('Puerto Rico'),
			'Qatar' => t('Qatar'),
			'Romania' => t('Romania'),
			'Russian Federation' => t('Russian Federation'),
			'Rwanda' => t('Rwanda'),
			'Reunion' => t('Reunion'),
			'Saint Lucia' => t('Saint Lucia'),
			'Samoa' => t('Samoa'),
			'San Marino' => t('San Marino'),
			'Sao Tome & Principe' => t('Sao Tome & Principe'),
			'Saudi Arabia' => t('Saudi Arabia'),
			'Senegal' => t('Senegal'),
			'Seychelles' => t('Seychelles'),
			'Sierra Leone' => t('Sierra Leone'),
			'Singapore' => t('Singapore'),
			'Slovakia' => t('Slovakia'),
			'Slovenia' => t('Slovenia'),
			'Solomon Islands' => t('Solomon Islands'),
			'Somalia' => t('Somalia'),
			'South Africa' => t('South Africa'),
			'South Georgia and the South Sandwich Islands' => t('South Georgia and the South Sandwich Islands'),
			'Spain' => t('Spain'),
			'Sri Lanka' => t('Sri Lanka'),
			'St. Helena' => t('St. Helena'),
			'St. Kitts and Nevis' => t('St. Kitts and Nevis'),
			'St. Pierre & Miquelon' => t('St. Pierre & Miquelon'),
			'St. Vincent & the Grenadines' => t('St. Vincent & the Grenadines'),
			'Sudan' => t('Sudan'),
			'Suriname' => t('Suriname'),
			'Svalbard & Jan Mayen Islands' => t('Svalbard & Jan Mayen Islands'),
			'Swaziland' => t('Swaziland'),
			'Sweden' => t('Sweden'),
			'Switzerland' => t('Switzerland'),
			'Syrian Arab Republic' => t('Syrian Arab Republic'),
			'Taiwan, Province of China' => t('Taiwan, Province of China'),
			'Tajikistan' => t('Tajikistan'),
			'Tanzania, United Republic of' => t('Tanzania, United Republic of'),
			'Thailand' => t('Thailand'),
			'Togo' => t('Togo'),
			'Tokelau' => t('Tokelau'),
			'Tonga' => t('Tonga'),
			'Trinidad & Tobago' => t('Trinidad & Tobago'),
			'Tunisia' => t('Tunisia'),
			'Turkey' => t('Turkey'),
			'Turkmenistan' => t('Turkmenistan'),
			'Turks & Caicos Islands' => t('Turks & Caicos Islands'),
			'Tuvalu' => t('Tuvalu'),
			'Uganda' => t('Uganda'),
			'Ukraine' => t('Ukraine'),
			'Union of Soviet Socialist Republics (no longer exists)' => t('Union of Soviet Socialist Republics (no longer exists)'),
			'United Arab Emirates' => t('United Arab Emirates'),
			'United Kingdom (Great Britain)' => t('United Kingdom (Great Britain)'),
			'United States Minor Outlying Islands' => t('United States Minor Outlying Islands'),
			'United States of America' => t('United States of America'),
			'United States Virgin Islands' => t('United States Virgin Islands'),
			'Uruguay' => t('Uruguay'),
			'Uzbekistan' => t('Uzbekistan'),
			'Vanuatu' => t('Vanuatu'),
			'Vatican City State (Holy See)' => t('Vatican City State (Holy See)'),
			'Venezuela' => t('Venezuela'),
			'Viet Nam' => t('Viet Nam'),
			'Wallis & Futuna Islands' => t('Wallis & Futuna Islands'),
			'Western Sahara' => t('Western Sahara'),
			'Yemen' => t('Yemen'),
			'Yugoslavia' => t('Yugoslavia'),
			'Zaire' => t('Zaire'),
			'Zambia' => t('Zambia'),
			'Zimbabwe' => t('Zimbabwe'),
			'++' => t('Other (Please type in the country name in the field below)'),
		);
	}
*/
}



/**
 *	Helper function: States, provinces, and territories
 *
 *	@return array List of states, provinces, and territories keyed by postal abbr
 */
function _get_states_list() {
	return array(
		'--' => 'Select state/province/territory',
		'AL' => 'Alabama',
		'AB' => 'Alberta',
		'AK' => 'Alaska',
		'AS' => 'American Samoa',
		'AZ' => 'Arizona',
		'AR' => 'Arkansas',
		'BC' => 'British Columbia',
		'CA' => 'California',
		'CO' => 'Colorado',
		'CT' => 'Connecticut',
		'DE' => 'Delaware',
		'DC' => 'District of Columbia',
		'FM' => 'Federated States of Micronesia',
		'FL' => 'Florida',
		'GA' => 'Georgia',
		'GU' => 'Guam',
		'HI' => 'Hawaii',
		'ID' => 'Idaho',
		'IL' => 'Illinois',
		'IN' => 'Indiana',
		'IA' => 'Iowa',
		'KS' => 'Kansas',
		'KY' => 'Kentucky',
		'LA' => 'Louisiana',
		'ME' => 'Maine',
		'MB' => 'Manitoba',
		'MH' => 'Marshall Islands',
		'MD' => 'Maryland',
		'MA' => 'Massachusetts',
		'MI' => 'Michigan',
		'AA' => 'Military: AA',
		'AE' => 'Military: AE',
		'AP' => 'Military: AP',
		'MN' => 'Minnesota',
		'MS' => 'Mississippi',
		'MO' => 'Missouri',
		'MT' => 'Montana',
		'NE' => 'Nebraska',
		'NV' => 'Nevada',
		'NB' => 'New Brunswick',
		'NH' => 'New Hampshire',
		'NJ' => 'New Jersey',
		'NM' => 'New Mexico',
		'NY' => 'New York',
		'NL' => 'Newfoundland and Labrador',
		'NC' => 'North Carolina',
		'ND' => 'North Dakota',
		'MP' => 'Northern Mariana Islands',
		'NT' => 'Northwest Territories',
		'NS' => 'Nova Scotia',
		'NU' => 'Nunavut',
		'OH' => 'Ohio',
		'OK' => 'Oklahoma',
		'ON' => 'Ontario',
		'OR' => 'Oregon',
		'PW' => 'Palau',
		'PA' => 'Pennsylvania',
		'PE' => 'Prince Edward Island',
		'PR' => 'Puerto Rico',
		'QC' => 'Quebec',
		'RI' => 'Rhode Island',
		'SK' => 'Saskatchewan',
		'SC' => 'South Carolina',
		'SD' => 'South Dakota',
		'TN' => 'Tennessee',
		'TX' => 'Texas',
		'UT' => 'Utah',
		'VT' => 'Vermont',
		'VI' => 'Virgin Islands',
		'VA' => 'Virginia',
		'WA' => 'Washington',
		'WV' => 'West Virginia',
		'WI' => 'Wisconsin',
		'WY' => 'Wyoming',
		'YT' => 'Yukon',
		'**' => 'Other/Not Applicable',
	);
}


/**
 *	Utility function to identify those countries whose students are required to
 *	provide a refundable pre-admission deposit.
 *
 *	@return array List of country-names for which deposit is required.
 */
function _get_deposit_countries() {
	//if ($testing) {
		return array(
			'CG',	//Congo
			'GM',	//Gambia
			'GN',	//Guinea
			'KE',	//Kenya
			'ML',	//Mali
			'MR',	//Mauritania
			'NE',	//Niger
			'NG',	//Nigeria
			'RW',	//Rwanda
			'SN',	//Senegal
			'SO',	//Somalia
			'SD',	//Sudan
			'TZ',	//Tanzania, United Republic of
		);
/*
	} else {
		return array(
			'Congo',
			'Gambia',
			'Guinea-Conakry',
			'Kenya',
			'Mali',
			'Mauritania',
			'Niger',
			'Nigeria',
			'Rwanda',
			'Senegal',
			'Somalia',
			'Sudan',
			'Tanzania, United Republic of',
		);
	}
*/
}



/**
 *	 Helper function to supply array of visa types.
 */
function _get_visa_types_array() {
  return array(
	 '---' => t('Please select one'),
	 'F1' => 'F1 - ' . t('Student'),
	 'F2' => 'F2 - ' . t('Family of Student'),
	 'M1' => 'M1 - ' . t('Vocational/nonacademic student'),
	 'M2' => 'M2 - ' . t('Family of nonacademic student'),
	 'J1' => 'J1 - ' . t('Exchange visitor'),
	 'J2' => 'J2 - ' . t('Family of exchange visitor'),
	 'B1' => 'B1 - ' . t('Business'),
	 'B2' => 'B2 - ' . t('Pleasure'),
	 'H1' => 'H1 - ' . t('Temporary Worker'),
	 'H2' => 'H2 - ' . t('Temporary Worker'),
	 'H3' => 'H3 - ' . t('Trainee'),
	 'H4' => 'H4 - ' . t('Family of Alien'),
	 'L1' => 'L1 - ' . t('Intracompany transferee'),
	 'L2' => 'L2 - ' . t('Family of intracompany transferee'),
  );
}



/**
 *	 Helper function to supply array of future year-quarters
 *	in human-readable form with date ranges included.
 */
function _get_yrq_array() {
	$how_far_to_go = 4;
	$current_yrq = _schedule_get_next_starting_yrq('all');
	$quarter_list = array();
	$quarter_name_list = array();
	for($i = 1; $i <= $how_far_to_go; $i++) {
		$quarter_details = _schedule_get_quarter_details($current_yrq);
		if ($quarter_details) {
			$quarter_list[$i] = $current_yrq;
			$qtr_name = _schedule_yrq_to_quarter($current_yrq);
			$qtr_start = date('M j',_schedule_hpdate_to_date($quarter_details->first_day_yrq));
			$qtr_end = date('M j',_schedule_hpdate_to_date($quarter_details->last_day_yrq));
			$quarter_name_list[$i] = "$qtr_name ($qtr_start - $qtr_end)";
		}
		$current_yrq = _schedule_increment_yrq($current_yrq,false);
	}
	$qtrs_list = array_combine($quarter_list,$quarter_name_list);
	return empty($qtrs_list) ? array() : $qtrs_list;
}



/**
 *	 Helper function to supply array of universities with conditional-acceptance agreements.
 */
function _get_conditional_admission_univs() {
  return array(
	 '---' => t('none'),
	 'Arizona State University' => t('Arizona State University'),
	 'Cal State: Northridge' => t('California State Univ., Northridge'),
	 'Cal State: San Marcos' => t('California State Univ., San Marcos'),
	 'Eastern Connecticut State University' => t('Eastern Connecticut State University'),
	 'Eastern Washington University' => t('Eastern Washington University'),
	 'Montana State University' => t('Montana State University'),
	 'Seattle University' => t('Seattle University (must enroll by 2017)'),
	 'SF State University' => t('San Francisco State University'),
	 'SUNY Oneonta' => t('SUNY Oneonta'),
	 'Purdue University (IUPUI)' => t('Purdue University (IUPUI)'),
	 'UAK: Fairbanks' => t('University of Alaska, Fairbanks College of Engineering and Mines(Transfer by Spring 2016)'),
	 'University of Nevada, Las Vegas' => t('University of Nevada, Las Vegas'),
	 'University of Washington, Bothell' => t('University of Washington, Bothell'),
	 'UW: Tacoma' => t('University of Washington, Tacoma'),
	 'WSU' => t('Washington State University'),
	 'WWU' => t('Western Washington University'),
  );
}

/**
 *	 Helper function to supply array of referral options.
 */
function _get_referral_options() {
  return array(
	 'agency' => t('Agency'),
	 'language school' => t('Language school'),
	 'friend/relative' => t('Friend or relative'),
	 'ed fair' => t('Education fair'),
	 'embassy' => t('Embassy or consulate'),
	 'web' => t('Web site'),
	 'ad' => t('Advertisement'),
	 'teacher/advisor' => t('Teacher or advisor'),
	 'student' => t('NSC student'),
	 'other' => t('Other referral'),
  );
}



/**
 *	 Helper function to add database reference to the foreign database.
 */
function _checkadd_ip_db() {

	global $db_url;
	global $db_prefix;
	
	// If current $db_url is not an array make it one (and don't forget to insert the default connection)
	if (!is_array($db_url)) {
		$default = $db_url;
		$db_url = array();
		$db_url['default'] = $default;
	}

  // Add the new reference
	if(!$db_url['international_programs']){
		$db_url['international_programs'] = 'pgsql://isp_applicant:rz7ksuevjhs82s@onering.inf/nscc';
	}
	if(!$db_url['ip_app_system']){
		$db_url['ip_app_system'] = 'pgsql://isp_app_system:Cb5_6V?#_u&U_QBn@onering.inf/nscc';
	}
	if(!$db_prefix['application']){
		$db_prefix['application'] = 'international_programs.';
	}
	if(!$db_prefix['application_archive']){
		$db_prefix['application_archive'] = 'international_programs.';
	}
	if(!$db_prefix['agent_applications']) {
		$db_prefix['agent_applications'] = 'international_programs.';
	}
	if(!$db_prefix['application_dev']){
		$db_prefix['application_dev'] = 'international_programs.';
	}
}



/**
 *	Utility function to determine CC type from account number
 *	based on ISO/IEC 7812 standards.
 *
 * @param string Primary Account Number (PAN) for the card
 * @return array Keyed array of type info for the specified card.
 */
function _get_cc_type($cc_num) {
	$cc_type = array();
	switch (true) {
	
		// AmEx
		case preg_match('/^(?:34|37)\d{13}$/', $cc_num) :
			$cc_type['name'] =  'American Express';
			$cc_type['code'] = '003';
			$cc_type['accepted'] = true;
			break;

		/* Switch - inactive
		case preg_match('/^(?:(?:(?:4903|4905|4911|4936|6333|6759)\d{12})|(?:(?:564182|633110)\d{10})(\d\d)?\d?)$/', $cc_num);
			// UK debit card - merged w/ Maestro
			$cc_type['name'] = 'Switch';
			$cc_type['code'] = '';	// unknown
			$cc_type['accepted'] = false;
			break;
		*/

		//Visa Electron
		case preg_match('/^(?:(?:4026|4508|4844|4913|4917)\d{12}|417500\d{10})$/', $cc_num) :
			// Debit card mostly issued in europe.
			$cc_type['name'] = 'Visa Electron';
			$cc_type['code'] = '033';
			$cc_type['accepted'] = false;
			break;

		/*	Bankcard - inactive since 2006
		case preg_match('/^(?:5610\d{12}|56022[1-5]\d{10})$/', $cc_num) :
			// Domestic credit card for Australia and New Zealand
			$cc_type['name'] = 'Bankcard';
			$cc_type['code'] = ''; //unkown
			$cc_type['accepted'] = false;
			break;
		*/

		// Maestro
		case preg_match('/^(?:5018|5020|5038|6304|6759|6761|6763)\d{8,15}$/', $cc_num) :
			// International debit card - owned by MasterCard
			$cc_type['name'] = 'Maestro';
			$cc_type['code'] = '024';
			$cc_type['accepted'] = false;
			break;

		// Solo - inactive
		case preg_match('/^(?:6334|6767)(?:\d{12}|\d{14,15})$/', $cc_num) :
			// UK debit card - merged w/ Maestro
			$cc_type['name'] = 'Solo';
			$cc_type['code'] = '';
			$cc_type['accepted'] = false;
			break;

		// Laser
		case preg_match('/^(?:6333|6304|6706|6771|6709)\d{12,15}$/', $cc_num) :
			// Irish debit card - cobranded with Maestro
			$cc_type['name'] = 'Laser';
			$cc_type['code'] = '035';
			$cc_type['accepted'] = false;
			break;

		// Discover
		case preg_match('/^(?:6011\d{12}|65\d{14}|64[4-9]\d{13})$/', $cc_num) :
		case (strlen($cc_num) == 16 && substr($cc_num, 0, 6) >= 622126 && substr($cc_num, 0, 6) <= 622925) :
			$cc_type['name'] = 'Discover';
			$cc_type['code'] = '004';
			$cc_type['accepted'] = true;
			break;

		// Carte Blanche
		case preg_match('/^30[0-5]\d{11}$/', $cc_num) :
			// Subsidiary of Diners Club
			$cc_type['name'] = 'Carte Blanche';
			$cc_type['code'] = '006';
			$cc_type['accepted'] = true;
			break;

		/* EnRoute - inactive
		case preg_match('/^(?:2014|2149)\d{11}$/', $cc_num) :
			// Canadian bank card - subsidiary of Diners Club since 1992
			$cc_type['name'] = 'EnRoute';
			$cc_type['code'] = '014';
			$cc_type['accepted'] = false;
			break;
		*/

		// InstaPayment
		case preg_match('/^63[7-9]\d{13}$/', $cc_num) :
			// (No info found)
			$cc_type['name'] = 'InstaPayment';
			$cc_type['code'] = ''; //unknown
			$cc_type['accepted'] = false;
			break;

		// JCB
		case (strlen($cc_num) == 16 && substr($cc_num, 0, 4) >= 3528 && substr($cc_num, 0, 4) <= 3589) :
			// Japanese cc - uses Discover network.
			$cc_type['name'] = 'JCB';
			$cc_type['code'] = '007';
			$cc_type['accepted'] = true;
			break;

		// MasterCard
		case preg_match('/^5[1-5]\d{14}$/', $cc_num) :
				$cc_type['name'] = 'MasterCard';
				$cc_type['code'] = '002';
				$cc_type['accepted'] = false;
			break;

		//	UnionPay (China)
		case preg_match('/^62[0-5]\d{13}$/', $cc_num) :
			// PRC bank card - uses Discover network, but not approved for online transactions.
			$cc_type['name'] = 'China UnionPay';
			$cc_type['code'] = ''; //unkown
			$cc_type['accepted'] = false;
			break;

		// Diners Club (International)
		case preg_match('/^36\d{12}$/', $cc_num) :
			$cc_type['name'] = 'Diners Club International';
			$cc_type['code'] = '005';
			$cc_type['accepted'] = true;
			break;

		// Visa
		case preg_match('/^4\d{15}$/', $cc_num) :
			$cc_type['name'] = 'Visa';
			$cc_type['code'] = '001';
			$cc_type['accepted'] = true;
			break;

		// Anything else (gas, dept stores, airline, etc.)
		default :
			$cc_type['name'] = 'Other/Unknown';
			$cc_type['code'] = '';
			$cc_type['accepted'] = false;
	}
	return $cc_type;
}



/**
 *	Utility function to validate CC numbers via Luhn Algorithm
 */
function _cc_num_is_valid($cc_num) {
	if (strlen($cc_num) < 12 || strlen($cc_num) > 19) {	return false; }
	$sum = 0;
	$alt = false;
	for ($i = strlen($cc_num) - 1; $i >= 0; $i--) {
		if ($alt) {
		 $temp = $cc_num[$i];
		 $temp *= 2;
		 $cc_num[$i] = ($temp > 9) ? $temp = $temp - 9 : $temp;
		}
		$sum += $cc_num[$i];
		$alt = !$alt;
	}
	return $sum % 10 == 0;
}



/**
 *	Utility function to generate a notice about required deposit.
 *
 *	@param $country Name of country to be included in message (optional)
 * @return array Message is returned as an array for convenient formatting by caller; one paragraph per item.
 */
function _get_deposit_notice($country) {
	if (! empty($country)) {
		$prefix = t('For students from !country: ', array('!country'=>$country));
	}
	
	$msg[] = $prefix . t('NSC will require an advance deposit of !dep-amt to ensure that applicants with sponsors from these countries are financially prepared to study in the United States, and that applicants intend to enroll as international students.', array('!dep-amt' => sprintf('$%01.2f USD', ISP_DEPOSIT_AMOUNT)));
	$msg[] = t('Acceptance materials (including an I-20 form) will not be issued until the deposit is received. Exception: students who are sponsored by a United States citizen or resident will not be required to make this deposit. If a student who has paid the deposit is unable to obtain an F-1 student visa, s/he will be eligible to defer to a later quarter. Deferment can only occur once. If the student is still unable to obtain an F-1 visa, the original I-20 form, as well the original letter from the United States Embassy showing proof of the visa denial, must be mailed directly to NSC in order to get a refund of the deposit. The student will then be refunded the deposit, minus any applicable bank charges. The application and processing fee (!app-fee) is not refundable.', array('!app-fee' => sprintf('$%01.2f USD', ISP_APPLICATION_FEE)));
	$msg[] = t('Deposits should be made by wire transfer. Please refer to !link for wire transfer instructions.', array('!link'=>'https://isp.northseattle.edu/documents/bank.pdf'));
	
	return $msg;
}



/**
 *	Utility function to generate an HTML-formatted notice about required deposit.
 *
 *	@param $country Name of country to be included in message (optional)
 * @return string HTML-formatted message
 */
function _formatted_deposit_notice($country) {
	$msg_arr = _get_deposit_notice($country);
	$notice = array();
	foreach ($msg_arr as $paragraph) {
		$ptrn = '/(.*)(http(?:s)?:\/\/(?:(?:\w)+(?:\.|\/)?)+\w+\.\w+)(\s.*)/';
		if (preg_match($ptrn, $paragraph, $matches)) {
			$paragraph = preg_replace($ptrn, $matches[1] . l('Wire Transfer Info', $matches[2]) . $matches[3], $paragraph);
		}
		$notice[] = '<p>'.$paragraph.'</p>';
	}
	return implode("\n", $notice);
}



/**
 *	Helper function: Payment declined reason
 *
 *	Provides a more user-friendly message for a declined CC transaction based
 * on the specified reason-code returned from payment processor (Cybersource).
 * @param obj The SOAP response returned from payment processor (Cybersource)
 * @return array Apropos form-fields and reason messages suitable for use by form_set_error()
 */
function _get_cc_reject_reason($response) {
	$df = 'payment_options'; //default field for error.
	$reason = array();

	switch($response->reasonCode) {
		case 101 :	//The request is missing one or more required fields.
			$reason['fields'][$df] = t('Some of the credit card payment information seems to be missing. Please verify that all information has been provided and try again. If this problem continues, please please !report-it to us.', array('!report-it'=>'<a href="/contact">report the problem</a>'));
			break;
		case 102 :	//One or more fields in the request contains invalid data.
			$reason['fields'][$df] = t('Some of the credit card payment information seems to be invalid. Please verify that all information provided is correct and try again. If this problem continues, please please !report-it to us.', array('!report-it'=>'<a href="/contact">report the problem</a>'));
			break;
		case 110 :	//Only a partial amount was approved.
			$reason['fields'][$df] = t('The transaction was declined because payment was not authorized for the full amount of the application fee. Partial payments are not accepted. Please use a different card or select another payment option.');
			break;
		case 151 :	//Error: The request was received but there was a server timeout. This error does not include timeouts between the client and the server.
		case 152 :	//Error: The request was received, but a service did not finish running in time.
		case 250 :	//Error: The request was received, but there was a timeout at the payment processor.
			//Will never get here - conditions preempted in form submit-handler.
			break;
		case 200 :	//The authorization request was approved by the issuing bank but declined by CyberSource because it did not pass the Address Verification Service (AVS) check.
			$reason['fields']['avs'] = t('Address verification failed. Please be sure the credit card billing address is correct. If this error continues, please use a different card or select another payment option.');
			break;
		case 202 :	//Expired card. You might also receive this if the expiration date you provided does not match the date the issuing bank has on file.
			$reason['fields']['cc_exp'] = t('The expiration date is incorrect, or your card has expired. Please provide the expiration date as it appears on your card, use a different card, or select another payment option.');
			break;
		case 201 :	//The issuing bank has questions about the request.
		case 203 :	//General decline of the card. No other information provided by the issuing bank.
		case 204 :	//Insufficient funds in the account.
		case 205 :	//Stolen or lost card.
		case 208 :	//Inactive card or card not authorized for card-not-present transactions.
		case 210 :	//The card has reached the credit limit.
		case 221 :	//The customer matched an entry on the processor’s negative file.
		case 233 :	//General decline by the processor.
			$reason['fields']['cc_number'] = t('The transaction was declined. Please use a different card or select another payment option.');
			break;
		case 150 :	//Error: General system failure.
		case 207 :	//Issuing bank unavailable.
		case 236 :	//Processor failure.
			$reason['fields'][$df] = t('The bank is unavailable at this time. Please wait a few minutes and resend your application.');
			break;
		case 209 :	//American Express Card Identification Digits (CID) did not match.
		case 211 :	//Invalid CVN.
		case 230 :	//The authorization request was approved by the issuing bank but declined by CyberSource because it did not pass the CVN check.
			$reason['fields']['cc_cvv_number'] = t('The card verification number is incorrect. Please provide the correct number, use a different card, or select another payment option.');
			break;
		case 231 :	//Invalid account number.
			$reason['fields']['cc_number'] = t('The credit card number is invalid. Please provide the correct number as it appears on your card, use a different card, or select another payment option.');
			break;
		case 232 :	//The card type is not accepted by the payment processor.
		case 240 :	//The card type sent is invalid or does not correlate with the credit card number.
			$reason['fields']['cc_number'] = t('Our payment processor will not accept this type of card. Please use a different card or select another payment option.');
		case 234 :	//There is a problem with your CyberSource merchant configuration.
		case 235 :	//The requested amount exceeds the originally authorized amount.
		case 237 :	//The authorization has already been reversed.
		case 238 :	//The authorization has already been captured.
		case 239 :	//The requested transaction amount must match the previous transaction amount.
		case 241 :	//The request ID is invalid.
		case 242 :	//You requested a capture, but there is no corresponding, unused authorization record.
		case 243 :	//The transaction has already been settled or reversed.
		case 246 :	//The capture or credit is not voidable because the capture or credit information has already been submitted to your processor. Or, you requested a void for a type of transaction that cannot be voided.
		case 247 :	//You requested a credit for a capture that was previously voided.
		default :
			$reason['fields'][$df] = t('Payment transaction cannot procede due to system error. Please select another payment option.');
	}

	return $reason;
}



/**
 *	Utility function: Next Database ID value		*** NO LONGER USED DUE TO SUBMIT-HANDLER REFACTOR ***
 *
 * @param string The table who's next ID value is to be retrieved.
 *	@param bool Synchronize the archive table? When true (default) the archive table's
 *		sequence-generator will be sync'd with the primary's.
 * @return int The next value from the specified table sequence-generator, or FALSE on query failure.
 */
function _next_ipdbid($table, $sync_archive=true) {
	$id = null;
	_checkadd_ip_db();
	db_set_active('international_programs');
	$id = db_result(db_query("SELECT nextval('".$table."_id_seq');"));
	if ($sync_archive && $id) {
		db_query("SELECT setval('".$table."_archive_id_seq',$id);");
	}
	db_set_active('default');
	return $id;
}



/**
 *	Helper function: AVS reject codes
 *
 * List of Address verification Service codes that should cause a payment-declined response from payment processor.
 * @return array List of AVS reject codes (key) and descriptions (value).
 */
function _avs_rejects() {
	return array(
		'C' => t('address and postal code does not match'),	//Visa (non-US) only
		'F' => t('card member name does not match'),	//AmEx only (postal code matched)
		'K' => t('address and postal code does not match'),	//AmEx only (name matched)
		'N' => t('name, address, and postal code do not match'),
		'O' => t('postal code does not match'),	//AmEx only (name & addr matched)
		'T' => t('card member name does not match'),	//AmEx only (addr matched)
	);
}



/**
 *	Helper function: CVN reject codes
 *
 * List of Card Verification Number codes that should cause a payment-declined response from payment processor.
 * @return array List of CVN reject codes (key) and descriptions (value).
 */
function _cvn_rejects() {
	return array(
		'D' => t('the transaction was determined to be suspicious by the issuing bank'),
		'N' => t('the CVN did not match'),
	);
}



/**
 *	Helper function: Checks for existing DB record with select matching fields.
 *	@param (array) Values array from $form_state
 */
function _duplicate_ip_application($vals) {
	_checkadd_ip_db();
	$query = "SELECT count(*) FROM application WHERE student_surname = '%s' AND student_given_name = '%s' AND gender = '%s' AND home_country_code = '%s' AND birthdate = '%s'";
	db_set_active('ip_app_system');
	$result = db_query($query, $vals['student_surname'], $vals['student_given_name'], $vals['gender'], $vals['home_country_code'], _convert_ddate_to_pdate($vals['birthdate']));
	db_set_active('default');
	if ($result) {
		$row = db_fetch_object($result);
		if ($row->count > 0) {
			watchdog('IP Module', 'Duplicate application submitted. '.$row->count.' record(s) match submitted data.');
			return true;
		}
	}
	return false;
}



/**
 *	Helper function: Remove specific application record from database.
 *	@param (string) The type of application form being processed; determines which table to remove record from.
 * @param (int) ID of the record to be purged.
 *	@return (mixed) Query result.
 */
function _purge_ip_application($app_type, $record_id) {
	switch ($app_type) {
		case 'student':
			$query = 'DELETE FROM application WHERE id = %d';
			break;
		case 'agent':
			$query = 'DELETE FROM agent_applications WHERE id = %d';
			break;
	}
	_checkadd_ip_db();
	db_set_active('ip_app_system');
	$result = db_query($query, $record_id);
	db_set_active('default');
	return $result;
}



/**
 *	Helper function: Record fee-payment data for existing application in database.
 *	@param (string) The type of application form being processed; determines which table to query.
 * @param (stdObject) Complete data-object used for original insertion of the record.
 *	@return (mixed) Query result.
 */
function _record_ip_payment_info($app_type, &$data) {
	_checkadd_ip_db();
	db_set_active('ip_app_system');
	switch ($app_type) {
		case 'student':
			$query = "UPDATE application SET paid_amt = %f, paid_date = '%s', cc_type = '%s', cc_charge_auth ='%s', cc_transaction_response_info = '%s' WHERE id = %d";
			$result = db_query($query, $data->paid_amt, $data->paid_date, $data->cc_type, $data->cc_charge_auth, $data->cc_transaction_response_info, $data->id);
			break;
		case 'agent':
			$query = 'agent_applications';	//stub
			break;
	}
	db_set_active('default');
	return $result;
}



/**
 *	Helper function: Copy the specified record from application table to archive table.
 * @param (int) ID of the record to be copied.
 *	@return (mixed) Query result.
 */
function _archive_ip_application($record_id) {
	$query = "INSERT INTO application_archive SELECT * FROM application WHERE id = %d";
	_checkadd_ip_db();
	db_set_active('ip_app_system');
	$result = db_query($query, $record_id);
	db_set_active('default');
	return $result;
}
