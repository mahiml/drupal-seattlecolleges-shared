<?php

/**
 * Implementation of hook_init().
 *
 * Makes sure the right files have been loaded.
 */
function nscc_geo_polygon_field_init() {
}


/* --------- Field information ----------- */

/**
 * Implementation of CCK's hook_field_info().
 *
 * Returns basic information about this CCK field.
 */
function nscc_geo_polygon_field_field_info() {
	//watchdog('geopoint','field_info');
  return array(
    'map_polygon' => array(
    'label' => 'Map Polygon',
    'description'=>'Stores a polygonal map overlay.',
    ),
  );
}


/** Implementation of CCK's hook_field_settings().
 *
 * Defines database storage for this field, and field settings forms.
 *
 */
function nscc_geo_polygon_field_field_settings($op, $field) {
	//watchdog('geopoint','field_settings - '.$op);
  switch ($op) {
    case 'database columns':
      $columns = array(
      	'polygon_ajax'=>array(
														'type'=>'text',
														'default'=>null,
														'description'=>t('serialized ajax of polygon point array.'),
				),
      );
      return $columns;
  }
}

function nscc_geo_polygon_field_field($op, &$node, $field, &$items, $teaser, $page) {
   switch ($op) {
  }
}

function nscc_geo_polygon_field_content_is_empty( $item, $field ){
	if(empty($item['polygon_ajax'])){
		return TRUE;
	}
	return FALSE;
}
/* --------- Widget information ----------- */

/**
 * Implementation of CCK's hook_widget_info().
 *
 * Returns basic information about the widget.
 */
function nscc_geo_polygon_field_widget_info() {
	//watchdog('geopoint','widget_info');
  return array(
    'map_polygon' => array(
      'label' => t('Map polygon Editor'),
      'field types' => array('map_polygon'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array('default value' => CONTENT_CALLBACK_NONE),
      'description' => t('An edit widget for Map Polygon fields that allows the user to draw a polygon on a map.' ),
    ),
  );
}

function nscc_geo_polygon_field_elements(){
	//watchdog('geopoint','elements');
	$elements=array();
	$elements['map_polygon'] = array(
    '#input' => TRUE,
    '#columns' =>array('polygon_ajax'),
    '#delta'=>0,
    '#process' => array('nscc_geo_polygon_field_process'),
    '#autocomplete_path'=>FALSE,
   );
	return $elements;
}


function nscc_geo_polygon_field_process($element, $edit, $form_state, $form) {
	//watchdog('geopoint','field_process');
	
	$defaults = $element['#value'];
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];
  $element['map_polygon_inputs_prefix'] = array(
  	'#type'=>'markup',
  	'#value'=>'<div id="'.$form['#field_info'][$element['#field_name']]['field_name'].'_'.$element['#delta'].'_map_polygon" class="">',
  );
  $element['polygon_ajax'] = array(
  	'#title'=> t('polygon_ajax'),
    '#type' => 'hidden',
    '#prefix'=>'<div id="'.$form['#field_info'][$element['#field_name']]['field_name'].'_'.$element['#delta'].'_polygon_ajax" class="">',
    '#suffix'=>'</div>',
    '#default_value' => isset($defaults['polygon_ajax']) ? $defaults['polygon_ajax'] : NULL,
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  $element['map_polygon_inputs_suffix'] = array(
  	'#type'=>'markup',
  	'#value'=>'</div>',
  );
	$element['map'] = array(
		'#type' =>'markup',
		'#value' =>'<div class="">Click on the map below to draw your overlay:</div><div id="'.$form['#field_info'][$element['#field_name']]['field_name'].'_'.$element['#delta'].'_mapdiv" class="map_polygon_input_map" style="height:800px;"></div>',
	);
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($element['#parents'], array($field_key))),
  );
	
    return $element;
}

/**
* Implementation of hook_theme().
*/
function nscc_geo_polygon_field_theme() {
	//watchdog('geopoint','theme');
  return array(
    // Themes for the formatters.
    'map_polygon' => array(
    	'arguments' => array('element' => NULL),
    ),
    'nscc_geo_polygon_field_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'nscc_geo_polygon_field_formatter_map' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}


function theme_map_polygon($element){
	//watchdog('geopoint','theme point_coordinates');
	return '<fieldset class="map-polygon-form collapsible"><legend class="">'.$element['#title'].'</legend> '.$element['#children'].'</fieldset>';
}

/**
 * Implementation of CCK's hook_widget().
 *
 * Returns a skeleton Form API array that defines callbacks 
 * for the widget form. Note that filefield_widget assumes a
 * file (module)_widget.inc exists!
 */
function nscc_geo_polygon_field_widget(&$form, &$form_state, $field, $items, $delta = 0) {
	drupal_set_html_head('<script src="http://maps.google.com/maps/api/js?sensor=false&region=US"></script>');
	drupal_add_js('sites/all/libraries/jquery-json/jquery.json-2.2.min.js');
	drupal_add_js(drupal_get_path('module', 'nscc_geo_polygon_field') .'/nscc_geo_polygon_field.js');  	
	//watchdog('geopoly','hook_widget-- widget: '.print_r($field['widget'],TRUE).'items: '.print_r($items,TRUE) );
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}


/**
* Implementation of hook_field_formatter_info().
* 
* All fields should have a 'default' formatter.
* Any number of other formatters can be defined as well.
* It's nice for there always to be a 'plain' option
* for the raw value, but that is not required.
* 
*/
function nscc_geo_polygon_field_field_formatter_info() {
	//watchdog('geopoint','formatter_info');
  return array(
    // The machine name of the formatter.
    'default' => array(
      // The human-readable label shown on the Display 
      // fields screen.
      'label' => t('Default'),
      // An array of the field types this formatter 
      // can be used on.
      'field types' => array('map_polygon'),
      // CONTENT_HANDLE_CORE:   CCK will pass the formatter
      // a single value.
      // CONTENT_HANDLE_MODULE: CCK will pass the formatter
      // an array of all the values. None of CCK's core 
      // formatters use multiple values, that is an option
      // available to other modules that want it.
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'map' => array(
      // The human-readable label shown on the Display 
      // fields screen.
      'label' => t('Map'),
      // An array of the field types this formatter 
      // can be used on.
      'field types' => array('map_polygon'),
      // CONTENT_HANDLE_CORE:   CCK will pass the formatter
      // a single value.
      // CONTENT_HANDLE_MODULE: CCK will pass the formatter
      // an array of all the values. None of CCK's core 
      // formatters use multiple values, that is an option
      // available to other modules that want it.
      'multiple values' => CONTENT_HANDLE_CORE,
    ),

  );
}


/**
* Theme function for 'default' example field formatter.
* 
* $element['#item']: the sanitized $delta value for the item,
* $element['#field_name']: the field name,
* $element['#type_name']: the $node->type,
* $element['#formatter']: the $formatter_name,
* $element'#node']: the $node,
* $element['#delta']: the delta of this item, like '0',
* 
*/
function theme_nscc_geo_polygon_field_formatter_default($element) {
	watchdog('geopoly','formatter_default');
  if(empty($element['#item'])) {
      return '';
  }
  
  $stuff = $element['#item'];
  $flds = array('map_polygon');
  $output = '<div class="map_polygon">';
  $sep='';
  foreach($flds as $fld){
    if(!empty($stuff[ $fld ])) {
     $output .= $sep . '<span class="' . $fld . '">' ."$fld: ". $stuff[ $fld ] . '</span>';
     $sep = "<br />\n";
     }  	
  }
  $output .='</div>';	
  return $output;
}

function theme_nscc_geo_polygon_field_formatter_map($element) {
	watchdog('geopoly','formatter_map');
  if(empty($element['#item'])) {
      return '';
  }
	drupal_set_html_head('<script src="http://maps.google.com/maps/api/js?sensor=false&region=US"></script>');
	drupal_add_js('sites/all/libraries/jquery-json/jquery.json-2.2.min.js');
	drupal_add_js(drupal_get_path('module', 'nscc_geo_polygon_field') .'/nscc_geo_polygon_field_display.js');  	
  
  $stuff = $element['#item'];
  $output = '<div id="'.$element['#field_name'].'-'.$element['#item']['#delta'].'-display-map" class="map_polygon_display_map" style="width:500px;height:600px;"></div>'."\n";
  $output .='<form><input id="'.$element['#field_name'].'-'.$element['#item']['#delta'].'-pointlist" name="'.$element['#field_name'].'-'.$element['#item']['#delta'].'-pointlist" type="hidden" value=\''.$element['#item']['polygon_ajax'].'\'></form>';
  return $output;
}

function theme_nscc_geo_polygon_field_formatter($field, $item, $formatter, $node) {
	switch($formatter){
		case 'map':
			watchdog('geopoly','formatter -- map');
			return "<h2>Map</h2>";
		default:
			watchdog('geopoly','formatter -- default');
			return "<h2>default</h2>";	
	}
}



/**
* Implementation of hook_widget_settings().
*/
function nscc_geo_polygon_field_widget_settings($op, $widget) {
	//watchdog('geopoint','widget_settings - '.$op);
  switch ($op) {
    // Create the form element to be used on the widget 
    // settings form. Widget settings can be different 
    // for each shared instance of the same field and 
    // should define the way the value is displayed to 
    // the user in the edit form for that content type.
    case 'form':
      $form = array();
			$form['edit_map_zoom'] = array(
       '#type' => 'textfield',
       '#title' => t('Edit Map Zoom Level'),
       '#default_value' => 15,
       '#required' => FALSE,
       '#description' => t('The Starting Zoom level of the map used to input the point.'),
      );
			$form['edit_map_center_lat'] = array(
       '#type' => 'textfield',
       '#title' => t('Edit Map Center Latitude'),
       '#default_value' => 47.6995,
       '#required' => FALSE,
       '#description' => t('The Latitude of the center of the edit map.'),
      );
			$form['edit_map_center_long'] = array(
       '#type' => 'textfield',
       '#title' => t('Edit Map Center Longitude'),
       '#default_value' => -122.3325,
       '#required' => FALSE,
       '#description' => t('The Longitude of the center of the edit map.'),
      );
      return $form;

    // Return an array of the names of the widget settings 
    // defined by this module. These are the items that 
    // CCK will store in the widget definition and they 
    // will be available in the $field['widget'] array.
    // This should match the items defined in 'form' above.
     case 'save':
      return array('edit_map_zoom','edit_map_center_lat','edit_map_center_long');
   }
}

