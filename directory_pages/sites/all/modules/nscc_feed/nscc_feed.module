<?php
// $Id: nscc_feed.module,v 1.236.2.3 2009/01/12 10:09:19 goba Exp $

/**
 * Implementation of hook_help().
 */
function nscc_feed_help($path, $arg){
	switch($path){
		case 'admin/help#nscc_feed':
			return '<p>'. t('This is what little help we provide for '.$path.' at this time').'</p>';
		case 'admin/content/feeds':
			return '<p>'. t('This is what little help we provide for '.$path.' at this time').'</p>';
		case 'admin/user/feed_permissions':
			return '<p>'. t('This is what little help we provide for '.$path.' at this time').'</p>';
	}
}

/**
* Implementation of hook_menu().
*/
function nscc_feed_menu(){
 $items['admin/content/feeds'] = array(
    'title' => 'NSCC Feeds',
    'description' => 'List, edit, or add NSCC feeds',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nscc_feed_new_feed'),
    'access arguments' => array('administer nscc feeds'),
    'file' => 'nscc_feed.admin.inc',
 );
 $items['admin/content/feeds/edit'] = array(
    'title' => 'Edit Feed',
    'description' => 'Edit an NSCC feed',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nscc_feed'),
    'access arguments' => array('administer nscc feeds'),
    'type' => MENU_CALLBACK,
    'file' => 'nscc_feed.admin.inc',
 );
 $items['admin/content/feeds/feed_permissions'] = array(
    'title' => 'Manage feed permissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nscc_feed_permissions'),
    'access arguments' => array('administer nscc feeds'),
    'file' => 'nscc_feed.admin.inc',
 );
 return $items;
}

/**
 * Implementation of hook_forms().
 */
function nscc_feed_forms() {
  $forms['nscc_feed_new_feed']['callback'] = 'nscc_feed';
  $forms['nscc_feed_permissions']['callback'] = 'nscc_feed_permissions_form';
  //$forms['nscc_feed_picker']['callback'] = 'nscc_feed_picker_form';
  return $forms;
}


/**
* Implementation of hook_perm().
*/
function nscc_feed_perm(){
	return array('administer nscc feeds');
}


/**
 * Retrieve an array of feeds matching specified conditions.
 *
 *
 * @return
 *   An associative array with the role id as the key and the role name as
 *   value.
 */
function nscc_feeds() {
  $result = db_query('SELECT * FROM {nscc_feed} ORDER BY feedname');

  while ($feed = db_fetch_object($result)) {
        $feeds[$feed->feedid] = $feed->feedname;
  }
  if(is_array($feeds)){
  	return array_filter($feeds);
  } else {
	return false;
  }
}

function get_nscc_feeds_for_user($uid) {
  $result = db_query('SELECT DISTINCT nf.feedid,nf.feedname  FROM {nscc_feed} nf join {nscc_feed_acl} nfa using (feedid) join {role} r using (rid) join {users_roles} ur using (rid) where ur.uid=%d ORDER BY feedname',$uid);

  while ($feed = db_fetch_object($result)) {
        $feeds[$feed->feedid] = $feed->feedname;
  }
  if(is_array($feeds)){
  	return array_filter($feeds);
  } else {
	return array();
  }
}

function get_nscc_feeds_for_node($nid) {
  $result = db_query('SELECT nf.feedid,nf.feedname  FROM {nscc_feed} nf join {nscc_feed_content} nfc using (feedid) where nfc.nid=%d ORDER BY feedname',$nid);

  while ($feed = db_fetch_object($result)) {
        //$feeds[$feed->feedid] = $feed->feedname;
		$feeds[] = $feed->feedid;
  }
  if(is_array($feeds)){
  	return array_filter($feeds);
  } else {
	return array();
  }
}

function get_nscc_feed_names_for_node($nid) {
  $result = db_query('SELECT nf.feedname  FROM {nscc_feed} nf join {nscc_feed_content} nfc using (feedid) where nfc.nid=%d ORDER BY feedname',$nid);

  while ($feed = db_fetch_object($result)) {
        //$feeds[$feed->feedid] = $feed->feedname;
		$feeds[] = $feed->feedname;
  }
  if(is_array($feeds)){
  	return array_filter($feeds);
  } else {
	return array();
  }
}


function get_nscc_feeds() {
  $result = db_query('SELECT nf.feedid,nf.feedname  FROM {nscc_feed} nf ORDER BY feedname');

  while ($feed = db_fetch_object($result)) {
        //$feeds[$feed->feedid] = $feed->feedname;
		$feeds[] = array('feedid'=>$feed->feedid,'feedname'=> rtrim($feed->feedname)) ;
  }
  if(is_array($feeds)){
  	return array_filter($feeds);
  } else {
	return array();
  }
}


function nscc_feed_theme() {
  return array(
    'nscc_feed_new_feed' => array(
      'arguments' => array('form' => NULL),
      'file' => 'nscc_feed.admin.inc',
    ),
  );
}


/**
* Implementation of hook_nodeapi().
*/
function nscc_feed_nodeapi(&$node, $op, $teaser, $page){
 global $user;	
 switch ($op){
 	case 'view':
		$node->nscc_feed_list = get_nscc_feed_names_for_node($node->nid);
		$node->hide_sources = TRUE;
 	    //error_log(print_r($node,TRUE),3,"/var/tmp/nodelog.txt");
 		if ($user->uid == 0 ||!$page){
 			break;
 		}
 		
		if ($user_feedlist = get_nscc_feeds_for_user($user->uid) ){
			$node->hide_sources = FALSE;
	 		$node->content['nscc_feed_picker'] = array(	'#value'=>drupal_get_form('nscc_feed_picker_form',$node,$user_feedlist),
 												'#weight'=>10 );
 		}
 		break;
	case 'rss item' :
	  $get_assoc_date_sql = "select floor(date_part('epoch', association_date at time zone 'PST8PDT'))  as assoc_ts from {nscc_feed_content} where nid=%d";
	  $assoc_date = db_result(db_query($get_assoc_date_sql,$node->nid));
	  $node->created = $assoc_date;
		watchdog('news_order','Nid: '.$node->nid.' Assoc_date: '.$assoc_date.'<pre>'.print_r($node, true).'</pre>');
		break;

	case 'delete':
	case 'delete revision':
		$sql='DELETE FROM {nscc_feed_content} WHERE nid=%d';
		db_query($sql,$node->nid);
	break;
 }
 
}

function nscc_feed_picker_form($form_state, $node, $user_feedlist){
	global $user;
	//global $node;
	//$user_feedlist = get_nscc_feeds_for_user($user->uid);
	$node_feedlist = get_nscc_feeds_for_node($node->nid);
	$form['feeds_multiselect'] = array(
		'#type'=>'select',
		'#title'=>t('Feed Associations'),
		'#description'=>'<p>'.t('Associating content with feeds allows that content to be found via rss feeds.!line-break Note that you must select an option to make this workâ€”even if you only have one option.', array('!line-break'=>'<br />')).'</p>',
		'#multiple'=> TRUE,
		'#options'=> $user_feedlist,
		'#default_value'=>$node_feedlist
	);
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Update Feeds'),
    );
    $form['nodeid'] = array('#type'=>'value','#value'=>$node->nid);
    $form['#submit'][] = 'nscc_feed_picker_form_submit';
    $form['#validate'][] = 'nscc_feed_picker_form_validate';
	return $form;	
}

function nscc_feed_picker_form_validate($form, &$form_state){
//no validation.
	return;
}

/**
 * Process nscc_feed_picker_form submissions.
 */
function nscc_feed_picker_form_submit($form, &$form_state) {
  global $user;
   db_query("DELETE FROM {nscc_feed_content} WHERE nid = %d and feedid in (SELECT DISTINCT nf.feedid FROM {nscc_feed} nf join {nscc_feed_acl} nfa using (feedid) join {role} r using (rid) join {users_roles} ur using (rid) where ur.uid=%d)", $form_state['values']['nodeid'],$user->uid);
  foreach(array_filter($form_state['values']['feeds_multiselect']) as $feedid){
	db_query("INSERT into {nscc_feed_content} VALUES(%d,%d,now())",$feedid,$form_state['values']['nodeid']);
  }
  drupal_set_message(t('This content\'s feed associations have been saved.'));
  return;
}


/**
* Implementation of hook_views_api().
*/
function nscc_feed_views_api(){
	return array('api'=>2.000);	
}

/**
* Implementation of hook_block().
*/
function nscc_feed_block($op='list', $delta=0,$edit=array()){
		switch ($op){
		case 'view':
			switch($delta){
				case '0':
					$block['subject'] = t('Feeds');
					$target_time = date('Y-m-d H:i:s',time()-300);
					$feeds = get_nscc_feeds();
					$block['content'] .= "<ul>\n";
					foreach($feeds as $current_feed){
						$feedname_url = '/nscc_feed/'.preg_replace('/\s/','-',$current_feed['feedname']);
						$block['content'] .= "<li><a href=\"$feedname_url/feed\">{$current_feed['feedname']}</a></li>\n";
					}
					$block['content'] .= "</ul>\n";
					break;
				case '1':
					$block['subject'] = t('Current News');
					$feeds = get_nscc_feeds();
					$block['content'] = "<ul>\n";
					$nightmare_sql = "SELECT DISTINCT n.nid AS nid, n.title as title, nfc.association_date FROM {node} n LEFT JOIN {content_type_notice} node_data_field_expire_date ON n.vid = node_data_field_expire_date.vid LEFT JOIN {content_type_notice} node_data_field_publish_date ON n.vid = node_data_field_publish_date.vid LEFT JOIN {content_field_date} node_data_field_date ON n.vid = node_data_field_date.vid LEFT JOIN {nscc_feed_content} nfc ON n.nid = nfc.nid LEFT JOIN {nscc_feed} nf ON nfc.feedid = nf.feedid WHERE (n.status <> 0  AND nf.feedid = %d) AND ( ( n.type in ('story') ) OR ( n.type in ('notice') AND node_data_field_expire_date.field_expire_date_value > now() AND node_data_field_publish_date.field_publish_date_value <= now() ) OR ( n.type in ('event') AND node_data_field_date.field_date_value >= now() ) ) ORDER BY nfc.association_date DESC"; 	
					foreach($feeds as $current_feed){
						$noderesult =  db_query_range(db_rewrite_sql($nightmare_sql),$current_feed['feedid'],0,5);
  						if ($node_title_list = node_title_list($noderesult)) {
							$feedname_url = '/nscc_feed/'.preg_replace('/\s/','-',$current_feed['feedname']);
							$block['content'] .= "<li><a href=\"$feedname_url\">{$current_feed['feedname']}</a>\n";
						    $block['content'] .= $node_title_list;
							$block['content'] .= "</li>\n";
						}
					}
					$block['content'] .= "</ul>\n";
					break;
			}
			return $block;
		case 'list':
			$blocks[0]['info'] = t('Feeds List');
			$blocks[0]['cache'] = BLOCK_CACHE_GLOBAL;
			$blocks[1]['info'] = t('Current News');
			$blocks[1]['cache'] = BLOCK_CACHE_GLOBAL;
			return $blocks;
	}
}


