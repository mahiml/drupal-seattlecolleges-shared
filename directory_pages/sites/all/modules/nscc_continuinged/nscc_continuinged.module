<?php
// $Id$

/**
 * @file:	nscc_continuinged.module
 *
 * Custom module to support additional functionality needed by Continuing Ed site.
 */


// *** DEV ONLY: needed until we have access to current data from CampusCE ***
//$GLOBALS['curr_hp3k_yrq'] = 'B233';




/**
 * HOOK init
function nscc_continuinged_init() {

}
 */





/**
 * HOOK menu
 */
function nscc_continuinged_menu() {

	// List of active categories that have classes.
	$items['courses'] = array(
		'title' => 'Courses',
		'description' => 'Listing of categories and subcategories for which classes are being offered.',
		'access arguments' => array('access content'),
		'page callback' => 'nscc_continuinged_categories_page',
		'page arguments' => array(),
		//'type' => MENU_NORMAL_ITEM,	// Must omit this if using 'menu_name' property.
		'menu_name' => 'primary-links',
		'expanded' => false,
	);

	// List of courses in a category.
	$items['courses/%nscc_continuinged_ce_category'] = array(
		'title callback' => 'nscc_continuinged_course_category_title',
		'title arguments' => array(1),
		'description' => 'Listing of courses associated with a specified category.',
		'access arguments' => array('access content'),
		'page callback' => 'nscc_continuinged_category_page',
		'page arguments' => array(1),
		//'type' => MENU_NORMAL_ITEM,	// Must omit this if using 'menu_name' property.
		//'menu_name' => 'primary-links',
		//'expanded' => false,
		'type' => MENU_CALLBACK,
	);
	
	// Course exists in CampusCE data, but does not have corresponding Drupal node.
	$items['courses/%/%'] = array(
		'description' => 'Course details page.',
		'access arguments' => array('access content'),
		'page callback' => 'nscc_continuinged_course_page',
		'page arguments' => array(2),
		//'type' => MENU_NORMAL_ITEM,	// Must omit this if using 'menu_name' property.
		//'menu_name' => 'primary-links',
		//'expanded' => false,
		'type' => MENU_CALLBACK,
	);

	// Setup Drupal node for CampusCE course.
	$items['course/%/add'] = array(
		'description' => 'Setup a Drupal node for a specified CampusCE course.',
		'access arguments' => array('create course content'),
		'page callback' => 'nscc_continuinged_create_course',
		'page arguments' => array(1),
		'type' => MENU_CALLBACK,
	);

	return $items;
}





/**
 * HOOK theme
 *
 * Registers theming hooks for content built by this module.
 */
function nscc_continuinged_theme($existing, $type, $theme, $path) {
	return array(

		// Theme a list of active categories that have classes.
		'ce_categories_listing' => array(
			'arguments' => array('categories' => null),
		),
		
		// Theme a list of courses in a category.
		'ce_course_for_category' => array(
			'arguments' => array('course' => null),
		),
		
		// Theme a course that exists in CampusCE data, but does not have corresponding Drupal node.
		'nodeless_ce_course' => array(
			'arguments' => array(
				'course' => null,
				'teaser' => null,
				'page' => null,
			),
			'template' => 'nodeless-ce-course',
		),
	);
}





/**
 * HOOK block
 *
 * @see HOOK_preprocess_block() for theming operations.
 */
function nscc_continuinged_block($op='list', $delta=0, $edit=array()) {
	//watchdog('conted_block','Executing hook_block, op='.$op.',delta='.$delta.',edit='.print_r($edit,true));
	switch ($op) {

		case 'list':
			$blocks[0]['info'] = t('Front page categories list');
			$blocks[0]['cache'] = BLOCK_NO_CACHE;
			$blocks[1]['info'] = t('Newsletter subscription form');
			$blocks[1]['cache'] = BLOCK_CACHE_GLOBAL;
			$blocks[2]['info'] = t('Newsletter CTA for sidebar');
			$blocks[2]['cache'] = BLOCK_CACHE_GLOBAL;
			$blocks[3]['info'] = t('Parking Banner');
			$blocks[3]['cache'] = BLOCK_CACHE_GLOBAL;
			$blocks[4]['info'] = t('Parking Left Block');
			$blocks[4]['cache'] = BLOCK_CACHE_GLOBAL;

			return $blocks;
			break;	


		case 'view':
			$block = array();
			switch ($delta) {

				// Categories-list for front page
				case 0:
					$block['subject'] = t('Categories');
					$block['content'] = _nscc_continuinged_get_categories();
					return $block;

				// Newsletter subscription form
				case 1:
					$block['subject'] = t('Email Newsletter');
					$block['content'] = _nscc_continuinged_get_newsletter_block();
					return $block;

				// Newsletter CTA button for sidebar
				case 2:
					$block['subject'] = t('Email Newsletter');
					$block['content'] = _nscc_continuinged_newsletter_cta();
					return $block;
				// Parking Banner
				case 3:
					//$block['subject'] = t('Parking Banner');
					$block['content'] = _nscc_continuinged_parking_block('banner');
					return $block;
				// Parking Left Block
				case 4:
					//$block['subject'] = t('Parking Block');
					$block['content'] = _nscc_continuinged_parking_block('left');
					return $block;
			}
			break;


		case 'configure':
			break;


		case 'save':
			break;

	}
}





/**
 * HOOK node api
 */
function nscc_continuinged_nodeapi(&$node, $op, $a3=null, $a4=null) {
	switch ($op) {
		case 'prepare':
			break;
		case 'validate':
			break;
		case 'presave':
			break;
		case 'insert':
			break;
		case 'update':
			break;
		case 'delete':
			break;
		case 'load':
			switch ($node->type) {

				case 'course':
					$ce_course_id = $node->field_ce_course_id[0]['value'];
					//$yrq = _nscc_continuinged_get_yrq();
					//$node->ce_course_data = _nscc_continuinged_get_course_details($ce_course_id, $yrq);	// redundant.
					//$node->ce_course_items = _nscc_continuinged_get_classes_by_course($ce_course_id, $yrq);	// don't want to limit by yrq
					$node->ce_course_items = _nscc_continuinged_get_classes_by_course($ce_course_id);
					$node->ce_categories = _nscc_continuinged_get_categories_of_course($node->field_ce_course_id[0]['value']);
					break;

				case 'instructor':
					$classes = _nscc_continuinged_get_courses_by_instructor($node->field_ce_instr_num[0]['value']);
					//watchdog('ce module', 'Classes (nodeapi): <pre>'.print_r($classes, true)."</pre>\n");
					if ($classes) {
						foreach ($classes as &$class) {
							$course_nid = _nscc_continuinged_map_ce_course_id_to_nid($class['ce_course_id']);
							if ($course_nid !== false) {
								$class['course_nid'] = $course_nid;
								//$class['path_alias'] = drupal_get_path_alias("node/$course_nid");
								//$class['course_node'] = node_load($course_nid);
							}
						}
						$node->classes_taught = $classes;
					}
					break;

				case 'story':
				
					// Automatically close commenting after 2 weeks.
					
					if ($node->comment == 2 && ($node->changed <= strtotime('-2 weeks'))) {
						$node->comment = 1;
						$sql = "UPDATE {node} SET comment = 1 WHERE nid = %d;";
						$result = db_query($sql, $node->nid);
						if ($result !== false) {
						   watchdog('ce module', "Automatically closed comments for node {$node->nid}.");
						}
					}
					//watchdog('ce module', 'Story node (nodeapi): <pre>'.print_r($node, true)."A3: $a3\nA4: $a4\n </pre>\n");
					break;
			}
			break;
		case 'alter':
			break;
		case 'view':
			break;
		case 'search result':
			break;
		case 'update index':
			break;
		case 'prepare translation':
			break;
		case 'rss item':
			break;
	}
}





/**
 * Title callback: Course Category
 *
 * @param array Category for which the title is to be extracted.
 * @return string Title of specified category.
 */
function nscc_continuinged_course_category_title($category) {
	return $category['title'];
}






/**
 * Page callback: Course Categories
 *
 * Compiles and themes the active course-categories for a given academic term.
 * @param string optional Academic term as HP3000-compatible year-quarter code.
 * @return string Themed list of all active categories for specific academic term.
 */
function nscc_continuinged_categories_page($yrq = null) {
	//global $user;	// needed for dev use only; remove when deployed.
	//$yrq = $yrq ? $yrq : _nscc_continuinged_get_yrq();	// Use arg value if supplied, or lookup current one otherwise.
	$categories = _nscc_continuinged_get_categories();
	$at = menu_set_active_trail();
	//watchdog('ce module', 'Categories active trail: <pre>'.print_r($at, true)."</pre>\n");

	//if (array_search('theme_developer', $user->roles) !== false || array_search('conted_webmaster', $user->roles) !== false) {	// Limit output to selecet roles during dev/testing
		return theme('ce_categories_listing', $categories);
	//}
	//return 'Check out our <a href="http://www.campusce.net/NSCC/category/category.aspx">class schedule</a>!';
}





/**
 * Page callback: Course Category
 *
 * Compiles and themes courses that are associated with the specified category.
 * @param array Category data loaded by Drupal's menu-router.
 * @return string Themed list of courses suitable for use as page content.
 * @see nscc_continuinged_ce_category_load()
 */
function nscc_continuinged_category_page($category) {
	//$at = menu_set_active_trail();
	//watchdog('ce module', "{$category['title']} active trail: <pre>".print_r($at, true)."</pre>\n");
	//watchdog('ce module', 'Category (page): <pre>'.print_r($category, true)."</pre>\n");
	foreach ($category['courses'] as $course) {
		$content[] = theme('ce_course_for_category', $course);
	}

	if (! empty($content)) {
		drupal_add_js(drupal_get_path('theme', 'nscc_conted') . '/js/nscc_conted.course_teaser_tooltips.js');
		$breadcrumb = drupal_get_breadcrumb();
		$path = explode('/', $_GET['q']);
		//watchdog('ce module', 'cat path = <pre>'.print_r($path, true)."</pre>\n");
		$breadcrumb[] = l(ucwords($path[0]), $path[0]);
		drupal_set_breadcrumb($breadcrumb);
		$content = implode("\n", $content);
		return "<div class=\"category-course-list category-{$category['urlized_title']}\">$content</div>";
	}
	
	// Handle invalid page request.
	//drupal_not_found();
	return "<div class=\"category-course-list no-courses\">No classes currently available. Please contact us to find out about future offerings.</div>";
	module_invoke_all();
	exit();
}





/**
 * Page callback: Course
 *
 * Renders a course from CampusCE data that does not have a corresponding Drupal node.
 * @param int URL component used to determine which course to render.
 * @return string Page content (themed course info).
 */
function nscc_continuinged_course_page($course_id) {
	$breadcrumb = drupal_get_breadcrumb();
	$path = explode('/', $_GET['q']);
	//watchdog('ce module', 'cat path = <pre>'.print_r($path, true)."</pre>\n");
	$breadcrumb[] = l(ucwords($path[0]), $path[0]);
	$categories = _nscc_continuinged_get_categories_of_course($course_id);
	if ($categories) {
		$breadcrumb[] = l($categories[0]['category'], "courses/{$categories[0]['url_title']}", array('alias'=>true));
	}
	drupal_set_breadcrumb($breadcrumb);

	// If node does exist for this course ID, redirect user there.
	$nid = _nscc_continuinged_map_ce_course_id_to_nid($course_id);
	if ($nid > 0) {
		drupal_goto("node/$nid", null, null, 301);
	}

	//$yrq = _nscc_continuinged_get_yrq();
	//$course = _nscc_continuinged_get_course_details($course_id, $yrq);
	$course = _nscc_continuinged_get_course_details($course_id);
	return theme('nodeless_ce_course', $course, false, true);
}





/**
 * Theme function: Course Categories Listing
 * Generates output markup for displaying a list of current course categories
 *
 * @param Array The categories to be themed.
 * @return String Themed list of categories.
 */
function theme_ce_categories_listing($categories) {
	if (! is_array($categories) || empty($categories)) { return ''; }

	// Remove "New Classes" category from column calculations, but keep data for use later.
	//if (isset($categories['new'])) {
	//	$new_cat = $categories['new'];
	//	unset($categories['new']);
	//	//watchdog('ce module', 'New Category: <pre>'.print_r($new_cat, true)."</pre>\n");
	//}
	$cat_count = count($categories);
	//$cols = 2;
	//$grid_class = 'grid-6';
	$cols = 3;
	$grid_class = 'grid-4';
	//$cols = 4;
	//$grid_class = 'grid-3';
	$rows = intval($cat_count / $cols);
	$remainder = $cat_count % $cols;
	//watchdog('ce module', "Cats mod Cols = $remainder");
	$remainders_allocated = 0;
	$prev_col = 0;
	$curr_col = 1;
	$curr_row = 1;

	foreach ($categories as $cat => $subcat) {

		// Open column wrapper.
		//if ($curr_col > $prev_col) {
		//	//watchdog('ce module', "Start col $curr_col: curr-col=$curr_col/$cols prev-col=$prev_col/$cols curr-row=$curr_row/$rows");
		//	$col_attr['class'][] = "column column-$curr_col $grid_class";
		//	if ($curr_col == 1) {
		//		$col_attr['class'][] = 'first alpha';
		//	} elseif ($curr_col == $cols) {
		//		$col_attr['class'][] = 'last omega';
		//	}
		//	$col_attr['class'] = implode(' ', $col_attr['class']);
		//	$html[] = '<div '.drupal_attributes($col_attr).'>';
		//	$prev_col = $curr_col;
		//	unset($col_attr);
		//}
		
		$links = array();
		foreach ($subcat as $sc_val) {
			if ($cat != 'new') {
			  //$url_title = urlize_category_title($sc_val['title']);
			  $title = htmlentities($sc_val['title'], ENT_QUOTES, 'UTF-8', false);
			  $links[] = "<li><a href=\"/courses/{$sc_val['urlized_title']}\">$title</a></li>";
			}
		}
		$id = ($cat == 'new') ? ' id="new-classes-category"' : '';
		$html[] = "<div class=\"course-category\"$id>";
		//$html[] = "<div class=\"course-category $grid_class\"$id>";
		$html[] = '<h2>'.ucwords($cat).'</h2>';
		if ($cat == 'new') {
		   $num_classes = $subcat['num_classes'];
		   $html[] = '<p>'.t('We have %count new classes! !link', array('%count'=>$num_classes,'!link'=>l('More info…', 'courses/new', array('attributes'=>array('class'=>'more-link'))))).'</p>';
		} else {
		  $html[] = !empty($links) ? '<ul>'.implode("\n", $links).'</ul>' : '';
		}
		$html[] = '</div>';
		//$curr_row++;

		// Close column wrapper.
		//if ($curr_row === $rows) {
		//	// Adjust for remainders
		//	if ($remainder > 0) {
		//		if ($remainders_allocated === $curr_col) {
		//			// end col - remainder allocated for this col
		//			$html[] = '</div>';
		//			//watchdog('ce module', "End col $curr_col/$cols - remainder $remainders_allocated allocated to col $curr_col/$cols");
		//			$curr_row = 0;
		//			$curr_col++;
		//		} else {
		//			// update counts to add a remainder to this column.
		//			$remainders_allocated++;
		//			//watchdog('ce module', "Adding remainder $remainders_allocated/$remainder to col $curr_col/$cols at row $curr_row/$rows");
		//			$remainder--;
		//			$curr_row--;
		//		}
		//	} else {
		//		$html[] = '</div>';
		//		//watchdog('ce module', "End col $curr_col/$cols at row $curr_row/$rows - no remainder");
		//		$curr_row = 0;
		//		$curr_col++;
		//	}
		//}
		//$curr_row++;
	}
	$out = '<div class="categories-list">'.implode("\n", $html).'<div class="clearfix">&nbsp;</div></div>';
	//if ($new_cat) {
	//	$out .= '<div class="new-classes-notice"><p>'.t('We have %count new classes! !link', array('%count'=>$new_cat['num_classes'],'!link'=>l('More info…', 'courses/'.$new_cat['urlized_title'], array('attributes'=>array('class'=>'more-link'))))).'</p></div>';
	//}
	//watchdog('ce module', 'Categories theming: <pre>'.print_r($categories, true)."</pre>\n");
	return $out;
}






/**
 * Theme: Course (for category listing)
 *
 * Renders a course suitable for display in a category listing.
 * @param array The course to be rendered.
 * @return string Themed course for category listing.
 */
function theme_ce_course_for_category($course) {
	$nid = _nscc_continuinged_map_ce_course_id_to_nid($course['ce_course_id']);
	$link_url = ($nid > 0) ? drupal_get_path_alias("node/$nid") : "{$_GET['q']}/{$course['ce_course_id']}";
	//watchdog('ce module', "Node alias for 'node/$nid' = $link_url\narg(0) = ".arg(0).' arg(1) = '.arg(1));
	//$link_url = "{$_GET['q']}/{$course['ce_course_id']}";
	//$link_url = "node/$nid";
	$link_opts = array(
		'attributes' => array('title' => 'Course details'),
		'options' => array('alias' => true),
	);
	//$title_link = l($course['title'], $link_url, $link_opts);
	$title_link = "<a href=\"/$link_url\">{$course['title']}</a>";
	$course_img = '';	//TODO.
	//$content = $course['description'] . '<span class="more-link">' . l('More…', $link_url, $link_opts) . '</span>';
	$content = node_teaser($course['description'],null, 150) . '<span class="more-link">' . l('More…', $link_url, $link_opts) . '</span>';
	//watchdog('ce module', 'Course for catgory (course):<pre>'.print_r($course,true)."</pre>\n");

	return <<<THEMED_CE_COURSE

<div id="course-{$course['ce_course_id']}" class="course">
	<h2>$title_link</h2>$course_img
	<div class="content course-teaser">
		$content
	</div>
	
</div>
THEMED_CE_COURSE;
}





/**
 * Template Preprocessor: Page
 */
function nscc_continuinged_preprocess_page(&$variables) {
	$node = $variables['node'];
	$breadcrumb = drupal_get_breadcrumb();
	switch ($node->type) {

		case 'course':
		case 'story':
			$path = explode('/', drupal_get_path_alias($_GET['q']));
			$breadcrumb[] = l(ucwords($path[0]), $path[0]);
			if ($node->ce_categories[0]['view']) {
				$breadcrumb[] = $node->ce_categories[0]['view'];
			}
//			array_pop($path);
//			if (!empty($path)) {
//				$parent_path = implode('/', $pieces);  
//				$menu_item = menu_get_item($parent_path);
//				if($parent_path && $menu_item) {
//					menu_set_item(NULL, $menu_item);
//				}
//			}
			break;
	}
//	watchdog('ce module', 'Active trail: <pre>'.print_r(menu_set_active_trail(),true)."</pre>\n");
	drupal_set_breadcrumb($breadcrumb);
	//watchdog('ce module', 'Page preproc vars: <pre>'.print_r($variables, true)."</pre>\n");
}





/**
 * Template Preprocessor: CE Course with no corresponding Drupal node.
 *
 * Renders a CE course suitable for use as primary page content.
 * @param array Prepared template variables from Core.
 */
function nscc_continuinged_preprocess_nodeless_ce_course(&$variables) {
	global $user;
	
	$course = $variables['course'][0];
	$variables['id_attr'] = 'course-'.$class['ce_course_id'];
	$variables['class_attr'] = 'course';
	$variables['title'] = $course['title'];
	$variables['description'] = $course['description'];
	drupal_set_title($course['title']);
	
	// Add a create node button for content managers.
	if (user_access('create course content') === true && (user_access('edit any course content') === true || user_access('edit own course content') === true)) {
		$variables['create_node_url'] = "/course/{$course['ce_course_id']}/add";
	}
	//watchdog('ce module', 'Nodeless course vars (preproc): <pre>'.print_r($variables, true)."</pre>\n");
}





/**
 * Menu Callback: Add node for CE Course
 *
 * Creates a new node for a CampusCE course and redirects to the edit form for follow-up completion by content manager.
 * @param int CE course ID
 */
function nscc_continuinged_create_course($ce_course_id) {

	// If node does exist for this course ID, redirect user there.
	$nid = _nscc_continuinged_map_ce_course_id_to_nid($course_id);
	if ($nid > 0) {
		drupal_goto("node/$nid", null, null, 301);
	}

	//$yrq = _nscc_continuinged_get_yrq();
	//$classes = _nscc_continuinged_get_classes_by_course($ce_course_id, $yrq);
	$classes = _nscc_continuinged_get_classes_by_course($ce_course_id);
	if (! function_exists('node_object_prepare')) {
		module_load_include('inc', 'node', 'node.pages');
	}
	$node = new stdClass();
	$node->type = 'course';
	$node->title = html_entity_decode($classes[0]['title'], ENT_QUOTES);
	$node->body = $classes[0]['description'];
	$node->format = 1;	// filtered HTML
	$node->promote = 0;
	$node->comment = 0;
	$node->sticky = 0;
	$node->field_ce_course_id[0]['value'] = $ce_course_id;
	
	// Setup node references for instructors if possible.
	watchdog('ce module', 'Classes: <pre>'.print_r($classes,true)."</pre>\nNode:<pre>".print_r($node,true)."</pre>\n");
	foreach ($classes as $class) {
		$instructors = json_decode($class['instructor_ids']);
		if (!empty($instructors)) {
			foreach ($instructors as $instructor) {
				$prop_keys = array_keys(get_object_vars($instructor));
				if ($instr_nid = _nscc_continuinged_map_instructor_id_to_nid($prop_keys[0])) {
					$node->field_instructors[]['nid'] = $instr_nid;
				}
			}
		}
	}
	node_object_prepare($node);
	node_save($node);
	if ($node->nid) {
		drupal_set_message(t('Course page has been created for !title', array('!title'=>$node->title)));
	}
	drupal_goto("node/{$node->nid}/edit", null, null, 301);
}





/**
 * Autoloader: CE Category
 *
 * Compiles data for a specific CE course-category. Called automatically from
 * menu-router callback.
 * @param string URL-friendly name of category.
 * @return array Category data.
 */
function nscc_continuinged_ce_category_load($cat_arg) {
	//watchdog('ce module', "Cat arg: $cat_arg");
	//$yrq = _nscc_continuinged_get_yrq();
	$categories = _nscc_continuinged_get_categories();
	//watchdog('ce module', 'Categories: <pre>'.print_r($categories, true)."</pre>\n");
	//watchdog('ce module', "Category arg: $cat_arg");
	$category = _nscc_continuinged_extract_category($cat_arg, $categories);
	//watchdog('ce module', 'Extracted category: <pre>'.print_r($category, true)."</pre>\n");
	//$category['courses'] = _nscc_continuinged_get_courses_by_category($category['category_id'], $yrq);
	$category['courses'] = _nscc_continuinged_get_courses_by_category($category['category_id']);
	return $category;
}





/**
 * To Arg: CE Category
 */
function nscc_continuinged_ce_category_to_arg($arg) {
	//watchdog('ce module', "ToArg arg: $arg");
	return (empty($arg) || $arg == '%') ? '' : $arg;
}





/**
 * DB Connection helper
 * Adds foreign database credentials to array of sources available to system.
 */
function _checkadd_campusce_db() {
	global $db_url;
	
	// If current $db_url is not an array make it one and insert the default connection.
	if (!is_array($db_url)) {
		$default = $db_url;
		$db_url = array();
		$db_url['default'] = $default;
	}

  // Add the keyed creds to the global DB collection.
  if (!$db_url['campusce']) {
	  $db_url['campusce'] = 'pgsql://campusce_reader:benzoictapaswithsashimi@onering.inf/nscc';
  }
}





/**
 * Retrieve the current academic year-quarter code.
 */
function _nscc_continuinged_get_yrq() {
	
	if (empty($GLOBALS['curr_hp3k_yrq'])) {
		$GLOBALS['curr_hp3k_yrq'] = _hp_sched_get_current_yrq();
	}
	//watchdog('ce module', 'Globals: <pre>'.print_r($GLOBALS, true)."</pre>\n");
	return $GLOBALS['curr_hp3k_yrq'];
}





/**
 *	Gets the active categories and subcategories for a given quarter that have
 *	associated classes as an array.
 *
 *	@param String The quarter who's categories are to be retrieved; default = current
 *	@return Array Keyed list of ordered categories and subcategories
 */
function _nscc_continuinged_get_categories($yrq = null) {
	global $nscc_continuinged_ce_categories;
	//$yrq = $yrq ? $yrq : _nscc_continuinged_get_yrq();
	
	//if (! empty($nscc_continuinged_ce_categories[$yrq])) {
		//watchdog('ce module','Retrieving categories from cache: <pre>'.print_r($nscc_continuinged_ce_categories,true)."</pre>\n");
	//	return $nscc_continuinged_ce_categories[$yrq];
	//}
	if (! empty($nscc_continuinged_ce_categories)) {
		return $nscc_continuinged_ce_categories;
	}

	$catlist = array();

	// Switch active DB and execute query.
	_checkadd_campusce_db();
	$prev_db_name = db_set_active('campusce');
	//$query = "SELECT * FROM category_list WHERE term = '%s'";
	//$result = db_query($query, $yrq);
	//$query = "SELECT * FROM category_list_nq";
	$query = "SELECT * FROM category_list_nq_pos_order";
	$result = db_query($query);


	// Extract data from result into hierarchical structure (2D keyed array).
	// Sort subcategories such that any "other-" item appears last in the list.
	if ($result !== false) {
		$curr_category = '';
		while ($record = db_fetch_array($result)) {
			if ($record['category']) {
				if ($record['category'] != $curr_category) {
					//if (! empty($others_list) && ! empty($catlist[$curr_category])) {
					//	$catlist[$curr_category] = array_merge($catlist[$curr_category], $others_list);
					//}
					$curr_category = trim($record['category']);
					//$others_list = array();
				}
				//if (stripos($record['subcategory'], 'other') === false) {
					$catlist[$curr_category][] = array(
						'title' => $record['subcategory'],
						'category_id' => $record['sub_id'],
						'num_classes' => $record['count'],
						'urlized_title' => $record['subcategory_url'],
					);
				//} else {
				//	$others_list[] = array(
				//		'title' => $record['subcategory'],
				//		'category_id' => $record['sub_id'],
				//		'num_classes' => $record['count'],
				//		'urlized_title' => $record['subcategory_url'],
				//	);
				//	watchdog('ce module', "Found {$record['subcategory']} category");
				//}
			} elseif (stripos($record['subcategory'], 'new') !== false) {
				// The new classes category has classes directly associated with it,
				// but no parent category, so this will need to be handled differently.
				$catlist['new'] = array(
					'title' => 'New Classes',
					'category_id' => $record['sub_id'],
					'num_classes' => $record['count'],
					'urlized_title' => $record['subcategory_url'],
				);
			} else {
				// What should we do with other top-level categories that have classes
				// directly associated with them? (Don't see any in the data, yet)
			}
		}
	}
	// Reset DB to system default.
	db_set_active($prev_db_name);
	//watchdog('ce module', 'Categories List: <pre>'.print_r($catlist, true)."</pre>\n");
	//$nscc_continuinged_ce_categories[$yrq] = $catlist;
	$nscc_continuinged_ce_categories = $catlist;
	return $catlist;
}





/**
 * Extract a category from a list of categories based on the URL-friendly title of the category.
 * @param String Needle
 * @param Array Haystack
 * @return Array
 */
function _nscc_continuinged_extract_category($url_title, $categories) {
	//watchdog('ce module', "URL title: $url_title");
	//watchdog('ce module', 'Categories: <pre>'.print_r($categories, true)."</pre>\n");
	if ($url_title !== 'new-classes') {
		foreach ($categories as $cat => $subcat) {
			foreach ($subcat as $data) {
				if ($data['urlized_title'] == $url_title) {
					return $data;
				}
			}
		}
	}
	return $categories['new'];
}





/**
 * Retrieve courses for specified category and year-quarter.
 * @param int Category ID
 * @param string Year-Quarter code
 */
function _nscc_continuinged_get_classes_by_category($cat_id, $yrq) {
	$classes = array();
	if ($cat_id > 0 && $yrq) {

		_checkadd_campusce_db();
		$prev_db_name = db_set_active('campusce');

		$query = "SELECT * FROM classes_by_category WHERE cat_id = %d AND term = '%s'";
		$result = db_query($query, $cat_id, $yrq);
		if ($result !== false) {
			while ($record = db_fetch_array($result)) {
				$record['instructors'] = json_decode($record['instructor_ids']);
				$classes[] = $record;
				//watchdog('ce module', 'Instrs: <pre>'.$record['instructor_ids']."</pre>");
				//watchdog('ce module', 'JSON test: <pre>'.print_r(json_decode($record['instructor_ids'],true), true)."</pre>");
			}
		}
		db_set_active($prev_db_name);
	}
	return $classes;
}





/**
 * Retrieve courses for specified category and year-quarter.
 * @param int Category ID
 * @param string Year-Quarter code
 */
function _nscc_continuinged_get_courses_by_category($cat_id, $yrq = null) {
	$courses = array();
	if ($cat_id > 0) {

		_checkadd_campusce_db();
		$prev_db_name = db_set_active('campusce');

		if ($yrq) {
			$query = "SELECT * FROM course c JOIN courses_by_category cbc USING (term,ce_course_id) WHERE cbc.cat_id=%d AND cbc.term='%s'";
			$result = db_query($query, $cat_id, $yrq);
		} else {
			$query = "SELECT DISTINCT cbc.cat_id, c.ce_course_id, c.title, c.description FROM course c JOIN courses_by_category AS cbc USING (ce_course_id) WHERE cbc.cat_id = %d ORDER BY c.title, cbc.cat_id";
			$result = db_query($query, $cat_id);
		}
		if ($result !== false) {
			while ($record = db_fetch_array($result)) {
				$courses[] = $record;
			}
		}
		db_set_active($prev_db_name);
	}
	return $courses;
}





/**
 * Retrieve courses for specified category and year-quarter.
 * @param int Instructor ID
 * @param string Year-Quarter code
 */
function _nscc_continuinged_get_courses_by_instructor($instructor_id, $yrq = false) {
	$courses = array();
	if ($instructor_id > 0) {
		$yrq = $yrq ? $yrq : _nscc_continuinged_get_yrq();

		_checkadd_campusce_db();
		$prev_db_name = db_set_active('campusce');

		$query = "SELECT DISTINCT c.* FROM course c JOIN class cl USING (ce_course_id,term) JOIN instructor_link il USING (sku,term) WHERE instructor_id=%d AND il.term='%s' ORDER BY c.title;";
		$result = db_query($query, $instructor_id, $yrq);
		if ($result !== false) {
			while ($record = db_fetch_array($result)) {
				$courses[] = $record;
			}
		}
		db_set_active($prev_db_name);
	}
	return $courses;
}





/**
 * Retrieve class details with instructors
 * @param int The item number used by legacy HP3000 system to identify the course.
 * @param string The year-quarter code used by legacy HP3000 system to identify the academic term.
 * @return array
 */
function _nscc_continuinged_get_class_details($item, $yrq) {
	$details = array();
	if ($item > 0 && $yrq) {

		_checkadd_campusce_db();
		$prev_db_name = db_set_active('campusce');

		$query = "SELECT * FROM class_details LEFT JOIN location using(location_id) WHERE sku = %d AND term = '%s'";
		$result = db_query($query, $item, $yrq);
		if ($result !== false) {
			while ($record = db_fetch_array($result)) {
				$details[] = $record;
			}
		}
		
		db_set_active($prev_db_name);
	}
	return $details;
}





/**
 * Retrieve class details with instructors
 * @param int CE course_id number
 * @param string The year-quarter code used by legacy HP3000 system to identify the academic term.
 * @return array
 */
function _nscc_continuinged_get_classes_by_course($ce_course_id, $yrq = null) {
	$details = array();
	if ($ce_course_id > 0) {

		_checkadd_campusce_db();
		$prev_db_name = db_set_active('campusce');

//		if ($yrq) {
//			//$query = "SELECT * FROM class_details LEFT JOIN location using(location_id) WHERE ce_course_id = %d AND term = '%s';";
//			$query = <<<CLASSES_BY_COURSE
//SELECT cd.ce_class_id, cd.ce_course_id, cd.sku, cd.title as course_title, cd.description as course_description, cd.num_sessions, cd.credits, cd.tuition, cd.term as yrq, cd.is_event, cd.new_tag, cd.days, cd.start_date, cd.start_time, cd.end_date, cd.class_web_comments, cd.course_web_comments, cd.sched_notes, cd.location_id, cd.instructor_ids as instructors, loc.name as location_name, loc.description as location_desc, loc.address, loc.city, loc.state, loc.zip, loc.map_url, loc.room, loc.building_code, loc.building_name  
//FROM class_details cd
//LEFT JOIN location loc using(location_id)
//WHERE ce_course_id = %d AND term = '%s'
//CLASSES_BY_COURSE;
//			$result = db_query($query, $ce_course_id, $yrq);
//		} else {
//			$query = <<<CLASSES_BY_COURSE_SANS_YRQ
//SELECT cd.ce_class_id, cd.ce_course_id, cd.sku, cd.title as course_title, cd.description as course_description, cd.num_sessions, cd.credits, cd.tuition, cd.term as yrq, cd.is_event, cd.new_tag, cd.days, cd.start_date, cd.start_time, cd.end_date, cd.class_web_comments, cd.course_web_comments, cd.sched_notes, cd.location_id, cd.instructor_ids as instructors, loc.name as location_name, loc.description as location_desc, loc.address, loc.city, loc.state, loc.zip, loc.map_url, loc.room, loc.building_code, loc.building_name  
//FROM class_details cd
//LEFT JOIN location loc using(location_id)
//WHERE ce_course_id = %d ORDER BY cd.start_date, cd.start_time
//CLASSES_BY_COURSE_SANS_YRQ;
//			$result = db_query($query, $ce_course_id);
//		}
		$query = "SELECT * FROM class_details cd WHERE ce_course_id = %d ORDER BY cd.start_date, cd.start_time";
		$result = db_query($query, $ce_course_id);
		if ($result !== false) {
			while ($record = db_fetch_array($result)) {
				$details[] = $record;
			}
		}
		
		db_set_active($prev_db_name);
	}
	return $details;
}





/**
 * Retrieve course details 
 * @param int CE course_id number.
 * @param string The year-quarter code used by legacy HP3000 system to identify the academic term.
 * @return array
 */
function _nscc_continuinged_get_course_details($ce_course_id, $yrq = null) {
	$details = array();
	if ($ce_course_id > 0) {

		_checkadd_campusce_db();
		$prev_db_name = db_set_active('campusce');

		if ($yrq) {
			$query = "SELECT * FROM course WHERE ce_course_id=%d AND term='%s'";
			$result = db_query($query, $ce_course_id, $yrq);
		} else {
			$query = "SELECT * FROM course WHERE ce_course_id=%d ORDER BY term DESC";
			$result = db_query($query, $ce_course_id, $yrq);
		}
		if ($result !== false) {
			while ($record = db_fetch_array($result)) {
				$details[] = $record;
			}
		}
		
		db_set_active($prev_db_name);
	}
	return $details;
}





/**
 * Retrieve location details
 * @param int Location ID defined by Campus CE system.
 * @return array
 */
function _nscc_continuinged_get_location_details($loc_id) {
	$location = array();
	if ($location_id) {
		$query = "SELECT * FROM location WHERE location_id = %d";
		_checkadd_campusce_db();
		$prev_db_name = db_set_active('campusce');
		$result = db_query($query, $ce_course_id, $yrq);
		if ($result !== false) {
			while ($record = db_fetch_array($result)) {
				$location[] = $record;
			}
		}
		db_set_active($prev_db_name);
	}
	return $location;
}





/**
 * Map CampusCE course_id to Drupal nid.
 * @param int The CE course_id to map.
 * @return int The Drupal nid that corresponds to the specified CE course_id.
 */
function _nscc_continuinged_map_ce_course_id_to_nid($ce_course_id) {
	$query = "SELECT nid FROM {content_type_course} WHERE field_ce_course_id_value = '%d'";
	return db_result(db_query($query, $ce_course_id));
}





/**
 * Map CampusCE instructor ID to Drupal nid.
 *
 * @param int CE instructor ID value.
 * @return int Drupal nid corresponding to specified CE instructor ID.
 */
function _nscc_continuinged_map_instructor_id_to_nid($instructor_id) {
	$query = "SELECT nid FROM {content_type_instructor} WHERE field_ce_instr_num_value = %d";
	return db_result(db_query($query, $instructor_id));
}





/**
 * Retrieve parent categories for the specified course.
 * @param int CampusCE course ID number.
 * @return array Category info keyed by ID.
 */
function _nscc_continuinged_get_categories_of_course($course_id) {
	$cats = array();
	$query = "SELECT DISTINCT ccl.cat_id, c.title as category, c.url_title FROM category_course_link ccl JOIN category c USING(cat_id) WHERE ccl.ce_course_id = %d AND c.status_id = 1 ORDER BY ccl.cat_id, c.title;";
	_checkadd_campusce_db();
	$prev_db_name = db_set_active('campusce');
	if ($result = db_query($query, $course_id)) {
		while ($record = db_fetch_array($result)) {
			$cats[] = array_merge($record, array('view'=>l($record['category'], "courses/{$record['url_title']}", array('alias'=>true))));
		}
	}
	db_set_active($prev_db_name);
	return $cats;
}





/**
 * Block content for newsletter signup
 * @return string
 */
function _nscc_continuinged_get_newsletter_block() {
	return <<<NEWSLETTER_SIGNUP_BLOCK2
	
	<!-- Begin MailChimp Signup Form -->
<link href="//cdn-images.mailchimp.com/embedcode/classic-081711.css" rel="stylesheet" type="text/css">
<style type="text/css">
                #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; }
                /* Add your own MailChimp form style overrides in your site stylesheet or in this style block.
                   We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
</style>
<div id="mc_embed_signup">
<form action="http://learnatnorth.us7.list-manage2.com/subscribe/post?u=f0406200af031e94bc5c2696e&amp;id=b8e1d0a5b3" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
                <h2>Subscribe to our Continuing Ed mailing list!</h2>
<div class="indicates-required"><span class="asterisk">*</span> indicates required</div>
<div class="mc-field-group">
                <label for="mce-EMAIL">Email Address  <span class="asterisk">*</span>
</label>
                <input type="email" value="" name="EMAIL" class="required email" id="mce-EMAIL">
</div>
<div class="mc-field-group">
                <label for="mce-FNAME">First Name  <span class="asterisk">*</span>
</label>
                <input type="text" value="" name="FNAME" class="required" id="mce-FNAME">
</div>
<div class="mc-field-group">
                <label for="mce-LNAME">Last Name  <span class="asterisk">*</span>
</label>
                <input type="text" value="" name="LNAME" class="required" id="mce-LNAME">
</div>
<div class="mc-field-group input-group">
    <strong>What types of classes are you interested in? </strong>
    <ul><li><input type="checkbox" value="1" name="group[5265][1]" id="mce-group[5265]-5265-0"><label for="mce-group[5265]-5265-0">Arts</label></li>
<li><input type="checkbox" value="2" name="group[5265][2]" id="mce-group[5265]-5265-1"><label for="mce-group[5265]-5265-1">Computer and Professional</label></li>
<li><input type="checkbox" value="4" name="group[5265][4]" id="mce-group[5265]-5265-2"><label for="mce-group[5265]-5265-2">Language</label></li>
<li><input type="checkbox" value="8" name="group[5265][8]" id="mce-group[5265]-5265-3"><label for="mce-group[5265]-5265-3">Fitness</label></li>
<li><input type="checkbox" value="16" name="group[5265][16]" id="mce-group[5265]-5265-4"><label for="mce-group[5265]-5265-4">Home</label></li>
<li><input type="checkbox" value="32" name="group[5265][32]" id="mce-group[5265]-5265-5"><label for="mce-group[5265]-5265-5">Enrichment</label></li>
</ul>
</div>
                <div id="mce-responses" class="clear">
                                <div class="response" id="mce-error-response" style="display:none"></div>
                                <div class="response" id="mce-success-response" style="display:none"></div>
                </div>   <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
</form>
</div>
 
<!--End mc_embed_signup-->
NEWSLETTER_SIGNUP_BLOCK2;
	
	return <<<NEWSLETTER_SIGNUP_BLOCK
<p>Use the following form to subscribe to our email newsletter.</p>
<form id="newsletter-signup-form" action="http://visitor.r20.constantcontact.com/d.jsp" method="post" name="ccoptin">
	<input type="hidden" name="llr" value="ntbxumfab">
	<input type="hidden" name="m" value="1105304716909">
	<input type="hidden" name="p" value="oi">
	<label class="required">Your email address
		<input class="input-email" type="text" name="ea" value="" size="20">
	</label>
	<button class="btn-submit" type="submit" name="go" value="GO">Subscribe</button>
</form>
NEWSLETTER_SIGNUP_BLOCK;
}





/**
 * Block content: Newsletter CTA button for sidebar use.
 * @return string
 */
function _nscc_continuinged_newsletter_cta() {
	return <<<NEWSLETTER_CTA
<p>Stay informed with our newsletter</p>
<a href="/email-newsletter" id="newsletter-cta"><span class="glir"></span>Subscribe now</a>
NEWSLETTER_CTA;
}


function _nscc_continuinged_parking_block($mode){
	drupal_add_css(drupal_get_path('module', 'nscc_continuinged') . '/nscc_continuinged-parking-banner.css');
	$output='';
	switch($mode){
		case 'banner':
			$link_text = "Parking is included with your on-campus Continuing Education class! No need to purchase an additional permit.";
			$link_dest = "/important-note-parking";
			$output = '<a class="ce-highlight" href="'.$link_dest.'">'.$link_text.'</a>';
		break;
		case 'left':
			$link_text = "<span class=\"ce-leftblock-impact\">Continuing Education Class Tuition Includes Parking!</span><br><span class=\"ce-leftblock-plain\">No need to purchase an additional permit...</span>";
			$link_dest = "/important-note-parking";
			$output = '<div class="ce-leftblock"><a class="ce-leftblock" href="'.$link_dest.'">'.$link_text.'</a></div>';
		break;
	}
	return $output;
}


//==== cribbed schedule functions below ======


function _checkadd_hp_sched_db() {

	global $db_url;

	// If current $db_url is not an array make it one (and don't forget to insert the default connection)
	if (!is_array($db_url)) {
		$default = $db_url;
		$db_url = array();
		$db_url['default'] = $default;
	}

  // Add the new reference
	if(!$db_url['class_schedule']){
		$db_url['class_schedule'] = 'pgsql://schedule_viewer:ty87rcg5@onering.inf/nscc';
	}
}

function _hp_sched_get_current_yrq(){
	_checkadd_hp_sched_db();
	db_set_active('class_schedule');
	$date_now = date('Ymd');
	$sql = 'select yrq from schedule.yrq_details where last_day_yrq>=%s and published=true order by yrq asc limit 1;';
	$result = db_query($sql,$date_now);
	while($record=db_fetch_object($result)){
		$yrq = $record->yrq;
	}
	db_set_active('default');
	return $yrq;
}






