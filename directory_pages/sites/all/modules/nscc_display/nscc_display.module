<?php
// $Id: nscc_display.module,v 1.236.2.3 2009/01/12 10:09:19 goba Exp $


function nscc_display_menu(){
	$items['infoscreen'] = array(
		'title' => 'Infoscreen',
		'page callback' => '_nscc_display_infoscreen',
		'access callback' => true,
		'type' => MENU_CALLBACK
	);
	$items['infoscreen/%'] = array(
		'title' => 'Infoscreen',
		'page callback' => '_nscc_display_infoscreen',
		'page arguments'=>array(1),
		'access callback' => true,
		'type' => MENU_CALLBACK
	);

	$items['infoscreen/%/ajax_slide/%'] = array(
		'title' => 'Infoscreen slide',
		'page callback' => '_nscc_display_slide',
		'page arguments'=>array(1,3),
		'access callback' => true,
		'type' => MENU_CALLBACK
	);
	$items['infoscreen/%/ajax_calendar'] = array(
		'title' => 'Infoscreen calendar',
		'page callback' => '_nscc_display_calendar',
		'page arguments'=>array(1),
		'access callback' => true,
		'type' => MENU_CALLBACK
	);

	return $items;
}



function nscc_display_block(){
}



/**
 *	Info display page: Espresso lounge & library
 *
 *	Driven by SAC-controlled feed.
 */
function _nscc_display_infoscreen($destination='sac'){
	drupal_add_js(drupal_get_path('module', 'nscc_display') .'/nscc_display.js');
	drupal_add_css(drupal_get_path('module', 'nscc_display') .'/nscc_display.css');

	switch($destination){
		case 'cashier':
  		$output = '<div class="time-header"><span class="date">&nbsp;</span>  <span class="time">&nbsp;</span></div>';
	  	$output .= '<div class="slide-screen cashier"><div class="slide cashier">&nbsp;</div></div>';
		break;
		
		case 'ocee':			
		case 'sac':
		case 'finaid':
		case 'displaytest':
		case 'arrc':
		default:
		$output = '<div class="time-header"><span class="date">&nbsp;</span>  <span class="time">&nbsp;</span></div>';
		$output .= '<div class="slide-screen"><div class="slide">&nbsp;</div></div>';
		$output .= '<div class="sidebar calendar">&nbsp;</div>';
	}

	return $output;
}



function _nscc_display_slide($destination='sac',$offset=0){	
	
	switch($destination){
		case 'cashier':
		 $feed_name='Cashiering Display';
		 break;
		case 'ocee':
			$feed_name='OCEE Display';
			break;
		case 'displaytest':
			$feed_name='Displaytest';
			break;
		case 'finaid':
			$feed_name='Financial Aid';
			break;
		case 'arrc':
			$feed_name='ARRC';
			break;
		case 'sac':
		default:
			$feed_name = 'SAC Display Main';
	}	


  $feed_sql = <<<end_of_sql
SELECT 
	DISTINCT(node.nid) AS nid,
	nscc_feed_content.association_date AS nscc_feed_content_association_date 
FROM 
	news_node node  
	LEFT JOIN news_content_type_notice node_data_field_expire_date ON node.vid = node_data_field_expire_date.vid 
	LEFT JOIN news_content_type_notice node_data_field_publish_date ON node.vid = node_data_field_publish_date.vid 
	LEFT JOIN news_content_field_date node_data_field_date ON node.vid = node_data_field_date.vid 
	LEFT JOIN news_nscc_feed_content nscc_feed_content ON node.nid = nscc_feed_content.nid 
	LEFT JOIN news_nscc_feed nscc_feed ON nscc_feed_content.feedid = nscc_feed.feedid 
WHERE 
	((node.status <> 0) 
	AND (nscc_feed.feedname = '%s')) 
	AND ((node.type in ('story')) 
	OR ((node.type in ('notice')) 
	AND ((TO_CHAR((node_data_field_expire_date.field_expire_date_value + INTERVAL '-25200 SECONDS'), 'YYYY-MM-DD') > '%s') 
	AND (TO_CHAR((node_data_field_expire_date.field_publish_date_value + INTERVAL '-25200 SECONDS'), 'YYYY-MM-DD') <= '%s'))) 
	OR ((node.type in ('event')) 
	AND (TO_CHAR((node_data_field_date.field_date_value + INTERVAL '-25200 SECONDS'), 'YYYY-MM-DD') >= '%s'))) 
ORDER BY nscc_feed_content_association_date DESC limit %d offset %d;
end_of_sql;

  //$target_day = '2010-10-29';
  $target_day = date('Y-m-d');
	$node_nid = db_fetch_object(db_query($feed_sql,$feed_name,$target_day,$target_day,$target_day,1,$offset));
	//need to check for empty nid, if so, set offset to 0;
	if(!$node_nid){
		$offset=0;
		$node_nid = db_fetch_object(db_query($feed_sql,$feed_name,$target_day,$target_day,$target_day,1,$offset));
	}

	$slide_node = node_load($node_nid->nid);
	$slide_text = '<h1 class="slide-title">'.$slide_node->title.'</h1>';
	if($slide_node->field_picture[0]['filepath']){
		$slide_classes .=' photo-slide';
		$slide_text .= '<div class="slide-photo-container"><img class="slide-photo" src="/'.$slide_node->field_picture[0][filepath].'" />';
		if($slide_node->field_attribution[0]['value']){
			$slide_classes .=' photo-attribution-slide';
			$slide_text .= '<div class="slide-photo-attribution">'.$slide_node->field_attribution[0]['value'].'</div>';
		}	
		$slide_text .='</div>';
	}
	//preg_replace used to remove wacky unicode characters -- wait for next time they throw off the jquery json parse, then identify wacky character
	//try different unicode property filters to clean problem characters.
	$slide_text .='<div class="slide-teaser">'.preg_replace('/\p{Cf}/','',check_markup($slide_node->teaser,FILTER_FORMAT_DEFAULT,FALSE)).'</div>';

	$output_array= array(
		'current_slide'=>$offset,
		'slide_body'=>$slide_text,
		'slide_classes'=>$slide_classes,
	);

	print drupal_json($output_array);
	exit();

}




function _nscc_display_calendar($destination='sac'){
	//$calendar_xml_url="http://www.google.com/calendar/feeds/northseattle.edu_efb67fj6p0tts1gmsusd8prjis%40group.calendar.google.com/public/basic";
	/*
	Drop ins:
															"http://www.google.com/calendar/ical/northseattle.edu_efb67fj6p0tts1gmsusd8prjis%40group.calendar.google.com/public/basic.ics",
	SAC:
															"http://www.google.com/calendar/ical/northseattle.edu_bd5056g1fkbs3so8koitj8pioo%40group.calendar.google.com/public/basic.ics",	
	Arts+lectures:
															"http://www.google.com/calendar/ical/northseattle.edu_sgsra9uvk8q0ti1nvhbo2eho6g%40group.calendar.google.com/public/basic.ics",
	Academic
															"http://facweb.northseattle.edu/mvellines/calendars/Academic.ics",

  Clubs:
  														"http://www.google.com/calendar/ical/northseattle.edu_58dppr52kbv6f7ssbi7irh3k60%40group.calendar.google.com/public/basic.ics",
	
	*/
	
	switch($destination){

		case 'ocee':
			$calendar_ical_urls = array(
															"http://webshares.northseattle.edu/Calendars/Academic.ics",
															"http://www.google.com/calendar/ical/northseattle.edu_9fl33shbba3q62p3v0au02m1p4%40group.calendar.google.com/public/basic.ics",
															"http://www.google.com/calendar/ical/northseattle.edu_n3kj940ap057rp25vldds8t0js%40group.calendar.google.com/public/basic.ics"
														);
			$window_length = 	60 * 60 * 24 * 30;										
			break;

		case 'cashier':
			$calendar_ical_urls = array(
															"http://webshares.northseattle.edu/Calendars/Academic.ics",
														);
			$window_length = 	60 * 60 * 24 * 15;										
			break;												

		case 'finaid':
			$calendar_ical_urls = array(
															"http://webshares.northseattle.edu/Calendars/Academic.ics",
															"http://www.google.com/calendar/ical/northseattle.edu_84m7tkfqld51np0ajf6hatafok%40group.calendar.google.com/public/basic.ics",
			);
			$window_length = 	60 * 60 * 24 * 30;										
			break;

		case 'sac':
		case 'arrc';
		case 'displaytest':
		default:
			$calendar_ical_urls = array(
															"https://www.google.com/calendar/ical/northseattle.edu_sgsra9uvk8q0ti1nvhbo2eho6g%40group.calendar.google.com/public/basic.ics",
															"http://webshares.northseattle.edu/Calendars/Academic.ics",
															"https://www.google.com/calendar/ical/northseattle.edu_bd5056g1fkbs3so8koitj8pioo%40group.calendar.google.com/public/basic.ics",	
  														"https://www.google.com/calendar/ical/northseattle.edu_58dppr52kbv6f7ssbi7irh3k60%40group.calendar.google.com/public/basic.ics",
														);
			$window_length = 	60 * 60 * 24 * 30;										
	}
	
	$start_window = strtotime(date('M d,Y',time()));
	$end_window = $start_window + $window_length;
	watchdog('calendar_math', 'Start Window: '.date('D, d M Y H:i:s',$start_window).'End Window: '.date('D, d M Y H:i:s',$end_window));
 
  foreach($calendar_ical_urls as $calendar_ical_url){
		$active_events_list = array_merge((array)$active_events_list, (array)_nscc_display_parse_calendar($calendar_ical_url,$start_window,$end_window));
  }
  
  //watchdog('calendar_events','Processed Events: '.$processed_event_count."\n".'<pre>'.print_r($processed_events,true).'</pre>');
	watchdog('calendar_events','active Events: '."\n".'<pre>'.print_r($active_events_list,true).'</pre>');
 
	foreach($active_events_list as $event=>$details){
			$start_times[$event] = $details['start_time'];
	}
	if(count($active_events_list)>0){
		array_multisort($start_times,SORT_ASC,$active_events_list);
		foreach($active_events_list as $active_event){
			$output_events .=$active_event['event_html'];
		}
  }

 	$output_events = '<ul class="events_page">'.$output_events.'</ul>';	
   
	$output_array = array(
		'raw_calendar'=>$calendar_ical,
		'events'=>$output_events,
	);
	print drupal_json($output_array);
	exit();

}


function _nscc_display_parse_calendar($calendar_ical_url,$start_window,$end_window){
	
	$calendar_ical=file_get_contents($calendar_ical_url);
 	watchdog('calendar_times',"Start_window: $start_window End_window $end_window");
  watchdog('calendar_ical','<pre>'.print_r($calendar_ical,true).'</pre>');
  $event_count = preg_match_all('/BEGIN:VEVENT.*END:VEVENT/sU',$calendar_ical,$events);
  $events_array = $events[0];
  $active_events_list = array();
  foreach($events_array as $event_id=>$raw_event){

		//figure out when the event starts, given all methods known in ical files to specify same.
		if(preg_match('/DTSTART;TZID=(.*):(.*)/',$raw_event,$matches)){
			$tzid = $matches[1];
			$start_time = strtotime($matches[2]);
			$start_string = date('YMd, G:i',$start_time);
		} else if(preg_match('/DTSTART;VALUE=DATE;TZID=(.*):(.*)/',$raw_event,$matches)){
			$tzid = $matches[1];
			$start_time = strtotime($matches[2]);
			$start_string = date('YMd, G:i',$start_time);
		} else if (preg_match('/DTSTART:(.*Z)/',$raw_event,$matches)) {
			$tzid = 'Zulu';
			$start_time = strtotime($matches[1]);
			$start_string = date('YMd, G:i',$start_time);
		} else if (preg_match('/DTSTART:(.*)/',$raw_event,$matches)){
			$tzid = 'Zulu';
			$start_time = strtotime($matches[1]);
			$start_string = date('YMd, G:i',$start_time);		
		} else if (preg_match('/DTSTART;VALUE=DATE:(.*)/',$raw_event,$matches)){
			$tzid = 'Zulu';
			$start_time = strtotime($matches[1]);
			$start_string = date('YMd, G:i',$start_time);		
		} else {
			$processed_events[$event_id]['excluded'] = "Unreadable DTSTART";
			$processed_events[$event_id]['raw_event'] = "<pre>\n$raw_event\n</pre>";
			continue;
		}
		
		//figure out when the event ends, given all methods known in ical files to specify same. Note: Not the true "End" of recurring events.
		if(preg_match('/DTEND;TZID=(.*):(.*)/',$raw_event,$matches)){
			$end_tzid = $matches[1];
			$end_time = strtotime($matches[2]);
			$end_string = date('YMd, G:i',$end_time);
		} else if(preg_match('/DTEND;VALUE=DATE;TZID=(.*):(.*)/',$raw_event,$matches)){
			$end_tzid = $matches[1];
			$end_time = strtotime($matches[2]);
			$end_string = date('YMd, G:i',$end_time);
		} else if (preg_match('/DTEND:(.*Z)/',$raw_event,$matches)) {
			$end_tzid = 'Zulu';
			$end_time = strtotime($matches[1]);
			$end_string = date('YMd, G:i',$end_time);
		} else if (preg_match('/DTEND;VALUE=DATE:(.*)/',$raw_event,$matches)){
			$end_tzid = 'Zulu';
			$end_time = strtotime($matches[1]);
			$end_string = date('YMd, G:i',$start_time);		
		} else {
			$processed_events[$event_id]['excluded'] = "Unreadable DTEND";
			$processed_events[$event_id]['raw_event'] = "<pre>\n$raw_event\n</pre>";
			continue;
		}
		
		//establish all day events
		if(preg_match('/TRANSP:TRANSPARENT/',$raw_event)){
			$all_day_class='all-day';
		}else{
			$all_day_class='';
		}

		//work out recurrence rules
		$rrule_raw='';	
		if(preg_match('/RRULE:(.*)/',$raw_event,$matches)){
			$rrule_raw = $matches[1];
			//clear these out from previous events
			$rrule_components = array();
			$rrule_hash = array();
			//$rrule_components = explode(';',$rrule_raw);
			$rrule_components = preg_split('/;/',$rrule_raw);
			foreach($rrule_components as $component){
				//types: FREQ=,UNTIL=,BYDAY=,BYMONTH=,INTERVAL=
				if(preg_match('/^FREQ=(.*)$/',$component,$component_matches)){
					$rrule_hash['Freq']=trim($component_matches[1]);
				}
				if(preg_match('/^UNTIL=(.*)$/',$component,$component_matches)){
					$rrule_hash['Until-raw'] = $component_matches[1];
					$rrule_hash['Until-time'] = strtotime($rrule_hash['Until-raw']);
					$rrule_hash['Until-timestring'] = date('YMd, G:i',$rrule_hash['Until-time']);
				}
				if(preg_match('/^BYDAY=(.*)$/',$component,$component_matches)){
					$rrule_hash['ByDay']=$component_matches[1];
				}
				if(preg_match('/^BYMONTH=(.*)$/',$component,$component_matches)){
					$rrule_hash['ByMonth']=$component_matches[1];
				}
				if(preg_match('/^BYMONTHDAY=(.*)$/',$component,$component_matches)){
					$rrule_hash['ByMonthDay']=$component_matches[1];
				}

				if(preg_match('/^INTERVAL=(.*)$/',$component,$component_matches)){
					$rrule_hash['Interval']=$component_matches[1];
				} else {
					if($rrule_hash['Freq']=='DAILY'){
							$rrule_hash['Interval']=1;
					}
				}
			}
		}
		$summary='';
		if(preg_match('/SUMMARY:((.*)\n (.*))/m',$raw_event,$matches)){
			$summary = preg_replace('/\s\s\s/','',stripslashes($matches[1]));
		}
		if(!$summary && preg_match('/SUMMARY:(.*)\n/m',$raw_event,$matches)){
			$summary = stripslashes($matches[1]);
		}
				
		//first, skip any that haven't started by the end of the window
		if($start_time > $end_window){
			$processed_events[$event_id]['excluded'] = "Out of window - late start: start_time: $start_time end_window: $end_window summary:".$summary;
			continue;
		};				

		//then, any non-repeats that end before the window
		if( !$rrule_raw && $end_time < $start_window){
			$processed_events[$event_id]['excluded'] = "Out of window - no repeat ends early: ".$summary." Ends: ".$end_string;
			//$processed_events[$event_id]['raw_event'] = "<pre>\n$raw_event\n</pre>";
			continue;
		};				
		
		// if it repeats, but ends before the start of the window
		if( $rrule_raw && $rrule_hash['Until-time'] && $rrule_hash['Until-time'] < $start_window){
			$processed_events[$event_id]['excluded'] = "Out of window- repeats, but  ends early: ".$summary." Ends: ".$rrule_hash['Until-timestring'];
			$processed_events[$event_id]['raw_event'] = "<pre>\n$raw_event\n</pre>";
			continue;
		}
		
		if(!$rrule_raw){		
			//insert boring single-instance events.
			$day_class=strtolower(date('D',$start_time));
			$active_events_list[] = array(
				'summary'=>$summary,
				'start_string'=>$start_string,
				'start_time'=>$start_time,
				'day_class'=>$day_class,
				'all_day'=>$all_day_class,
				'event_html'=>'<li class="event '.$all_day_class.' '.$day_class.'"><div class="event-day-date"><span class="week-day">'.date('D',$start_time).'</span><span class="date">'.date('M j',$start_time).'</span></div><div class="event-time">'.date('G:i',$start_time).'</div><div class="event-summary">'.check_plain($summary).'</div><div class="clearfix">&nbsp;</div></li>',			
			);
						
		} else {
			//now deal with recurring events.
			switch($rrule_hash['Freq']){

				case 'DAILY':
					//quick test
					if($rrule_hash['Interval']){
						$interval_seconds = $rrule_hash['Interval'] * 60*60*24;
				  	$instance_time_array = getdate($start_time);
						$instance_time = mktime($instance_time_array['hours'],$instance_time_array['minutes'],$instance_time_array['seconds'],$instance_time_array['mon'],$instance_time_array['mday'],$instance_time_array['year']);


						//for loop to add $rrule_hash['Interval'] days to instance_time until end_window exceeded, enclosing if instance_time > start_window check
						while($instance_time < $end_window){
							if($instance_time > $start_window && $instance_time < $rrule_hash['Until-time']){
									$day_class=strtolower(date('D',$instance_time));
									$active_events_list[] = array(
										'summary'=>$summary,
										'start_string'=>date('YMd, G:i',$instance_time),
										'start_time'=>$instance_time,
										'day_class'=>$day_class,
										'all_day'=>$all_day_class,
										'event_html'=>'<li class="event '.$all_day_class.' '.$day_class.'"><div class="event-day-date"><span class="week-day">'.date('D',$instance_time).'</span><span class="date">'.date('M j',$instance_time).'</span></div><div class="event-time">'.date('G:i',$instance_time).'</div><div class="event-summary">'.check_plain($summary).'</div><div class="clearfix">&nbsp;</div></li>',			
									);
							}
							$instance_time_array = getdate($instance_time);
							$instance_time = mktime($instance_time_array['hours'],$instance_time_array['minutes'],$instance_time_array['seconds'],$instance_time_array['mon'],$instance_time_array['mday']+$rrule_hash['Interval'],$instance_time_array['year']);
						}						
					} else {
						$processed_events[$event_id]['excluded'] = "Bogus iCal- daily freq, but no interval: ".$summary." Ends: ".$rrule_hash['Until-timestring'];
						$processed_events[$event_id]['raw_event'] = "<pre>\n$raw_event\n</pre>";
						continue;
					}
				break;
				
				case 'WEEKLY':
					//get the weekday of the first instance
				  $start_day = date('w',$start_time);
				  //first, clean up the interval
					if( !$rrule_hash['Interval'] || $rrule_hash['Interval'] < 1){
					 	$rrule_hash['Interval'] = 1;
				  } 
				  $interval_seconds = ($rrule_hash['Interval']) * 60*60*24*7;
				  $interval_days = ($rrule_hash['Interval']) * 7;
				  $day_nums_array=array();
				  $day_codes_array=array();
				  $day_offsets_array=array();
				  $day_codes_array=explode(',',$rrule_hash['ByDay']);
				  foreach($day_codes_array as $day_code){
				  	switch(rtrim($day_code)){
				  		case 'SU':
				  			$day_num=0;
				  			break;
				  		case 'MO':
				  			$day_num=1;
				  			break;
				  		case 'TU':
				  			$day_num=2;
				  			break;
				  		case 'WE':
				  			$day_num=3;
				  			break;
				  		case 'TH':
				  			$day_num=4;
				  			break;
				  		case 'FR':
				  			$day_num=5;
				  			break;
				  		case 'SA':
				  			$day_num=6;
				  			break;
				  	}
				  	$day_num = $day_num-$start_day;
				  	if ($day_num < 0){
				  		$day_num= $day_num+7;
				  	}
				  	$day_nums_array[]=$day_num;
				  	$day_offsets_array[] = $day_num * 60*60*24;
				  }
					//watchdog('calendar_events','start_day:'.$start_day.' ByDay='.$rrule_hash['ByDay'].'day_codes'.implode('|',$day_codes_array).' day_nums: '.implode('|',$day_nums_array).' day offsets: '.implode('|',$day_offsets_array));
					//now to loop through, generating instances
				  $first_instance_time_array = getdate($start_time);
					$first_instance_time = mktime($first_instance_time_array['hours'],$first_instance_time_array['minutes'],$first_instance_time_array['seconds'],$first_instance_time_array['mon'],$first_instance_time_array['mday'],$first_instance_time_array['year']);
					while($first_instance_time < $end_window){
							foreach($day_nums_array as $current_offset){
							//$instance_time = $first_instance_time+$current_offset;
							$instance_time = mktime($first_instance_time_array['hours'],$first_instance_time_array['minutes'],$first_instance_time_array['seconds'],$first_instance_time_array['mon'],($first_instance_time_array['mday']+$current_offset),$first_instance_time_array['year']);
							if($instance_time >= $start_window && $instance_time < $end_window && $instance_time < $rrule_hash['Until-time']){	
								$day_class=strtolower(date('D',$instance_time));
								$active_events_list[] = array(
									'summary'=>$summary,
									'start_string'=>date('YMd, G:i',$instance_time),
									'start_time'=>$instance_time,
									'day_class'=>$day_class,
									'all_day'=>$all_day_class,
									'event_html'=>'<li class="event '.$all_day_class.' '.$day_class.'"><div class="event-day-date"><span class="week-day">'.date('D',$instance_time).'</span><span class="date">'.date('M j',$instance_time).'</span></div><div class="event-time">'.date('G:i',$instance_time).'</div><div class="event-summary">'.check_plain($summary).'</div><div class="clearfix">&nbsp;</div></li>',			
								);
							}
							$first_instance_time = mktime($first_instance_time_array['hours'],$first_instance_time_array['minutes'],$first_instance_time_array['seconds'],$first_instance_time_array['mon'],($first_instance_time_array['mday']+$interval_days),$first_instance_time_array['year']);
							$first_instance_time_array = getdate($first_instance_time);
						}
					}
				break;

				case 'MONTHLY':
					if( !$rrule_hash['Interval'] || $rrule_hash['Interval'] < 1){
					 	$rrule_hash['Interval'] = 1;
				  }
				  $daymatches=array();
				  $day_index='';
				  $day_code='';
				  
				  //work out the whatth instance (day_index, '1st') of the whatth day (day_code, 'FR') of the month to repeat on.
				  if( $rrule_hash['ByDay'] && preg_match('/^(.*)(\w\w)$/',trim($rrule_hash['ByDay']),$daymatches) ){
				  	$target_day_index = $daymatches[1];
				  	$target_day_code = $daymatches[2];
						//actually step through and find instances
						$month_index=0;
						watchdog('calendar_events','Day_index: '.$target_day_index.' Day_code: '.$target_day_code);
						watchdog('calendar_events','Month by day: '.$summary);
						if($target_day_index>0){
							//normal xth (day) of the month
							$current_day_index = $target_day_index;
							$instance_time = $start_time;
							while($instance_time <= $end_window || $rrule_hash['Until-time'] && $instance_time < $rrule_hash['Until-time']){
								if($instance_time >= $start_window){
									if($current_day_index==$target_day_index && $month_index % $rrule_hash['Interval'] == 0){
										$day_class=strtolower(date('D',$instance_time));
										$active_events_list[] = array(
											'summary'=>$summary,
											'start_string'=>date('YMd, G:i',$instance_time),
											'start_time'=>$instance_time,
											'day_class'=>$day_class,
											'all_day'=>$all_day_class,
											'event_html'=>'<li class="event '.$all_day_class.' '.$day_class.'"><div class="event-day-date"><span class="week-day">'.date('D',$instance_time).'</span><span class="date">'.date('M j',$instance_time).'</span></div><div class="event-time">'.date('G:i',$instance_time).'</div><div class="event-summary">'.check_plain($summary).'</div><div class="clearfix">&nbsp;</div></li>',			
										);
									}
								}
								$instance_time_array = getdate($instance_time);
								$old_month = 	$instance_time_array['mon'];							
								$instance_time = mktime($instance_time_array['hours'],$instance_time_array['minutes'],$instance_time_array['seconds'],$instance_time_array['mon'],$instance_time_array['mday']+7,$instance_time_array['year']);
								$instance_time_array = getdate($instance_time);
								$new_month = 	$instance_time_array['mon'];
								if($old_month!=$new_month){
								    $month_index++;
										$current_day_index = 0;
								}
								$current_day_index++;								
							}
						} else {
							//last day of week of the month
							$instance_time = $start_time;
							$instance_time_array = getdate($instance_time);
							while($instance_time <= $end_window || $rrule_hash['Until-time'] && $instance_time < $rrule_hash['Until-time']){
								$old_month = 	$instance_time_array['mon'];							
								$new_instance_time = mktime($instance_time_array['hours'],$instance_time_array['minutes'],$instance_time_array['seconds'],$instance_time_array['mon'],$instance_time_array['mday']+7,$instance_time_array['year']);
								$new_instance_time_array = getdate($new_instance_time);
								$new_month = 	$new_instance_time_array['mon'];
								if($old_month!=$new_month){
								    $month_index++;
								}
								if($instance_time >= $start_window){
									if($old_month!=$new_month && ($month_index-1) % $rrule_hash['Interval'] == 0){
										$day_class=strtolower(date('D',$instance_time));
										$active_events_list[] = array(
											'summary'=>$summary,
											'start_string'=>date('YMd, G:i',$instance_time),
											'start_time'=>$instance_time,
											'day_class'=>$day_class,
											'all_day'=>$all_day_class,
											'event_html'=>'<li class="event '.$all_day_class.' '.$day_class.'"><div class="event-day-date"><span class="week-day">'.date('D',$instance_time).'</span><span class="date">'.date('M j',$instance_time).'</span></div><div class="event-time">'.date('G:i',$instance_time).'</div><div class="event-summary">'.check_plain($summary).'</div><div class="clearfix">&nbsp;</div></li>',			
										);
									}
								}
							$instance_time = $new_instance_time;
							$instance_time_array=getdate($instance_time);	
							}									
						}
						
				  } else {
					  //watchdog('calendar_events','MONTHLY by date: '.$summary);
				  	$instance_time_array = getdate($start_time);
						$instance_time = mktime($instance_time_array['hours'],$instance_time_array['minutes'],$instance_time_array['seconds'],$instance_time_array['mon'],$instance_time_array['mday'],$instance_time_array['year']);

							//actually step through and find instances
							while($instance_time < $end_window){
							  //watchdog('calendar_events','MONTHLY by date (pre-e): i:'.date('YMd, G:i',$instance_time).' sw:'.date('YMd, G:i',$start_window).' ew:'.date('YMd, G:i',$end_window));
								if($instance_time >= $start_window && $instance_time < $rrule_hash['Until-time']){
								  //watchdog('calendar_events','MONTHLY by date (post-s): i:'.date('YMd, G:i',$instance_time).' sw:'.date('YMd, G:i',$start_window).' ew:'.date('YMd, G:i',$end_window));
									if(date('n',$instance_time)==$instance_time_array['mon']){			
										$day_class=strtolower(date('D',$instance_time));
										$active_events_list[] = array(
											'summary'=>$summary,
											'start_string'=>date('YMd, G:i',$instance_time),
											'start_time'=>$instance_time,
											'day_class'=>$day_class,
											'all_day'=>$all_day_class,
											'event_html'=>'<li class="event '.$all_day_class.' '.$day_class.'"><div class="event-day-date"><span class="week-day">'.date('D',$instance_time).'</span><span class="date">'.date('M j',$instance_time).'</span></div><div class="event-time">'.date('G:i',$instance_time).'</div><div class="event-summary">'.check_plain($summary).'</div><div class="clearfix">&nbsp;</div></li>',			
										);
									}
								}

								$instance_time_array['mon'] = $instance_time_array['mon'] + $rrule_hash['Interval'];
								if($instance_time_array['mon'] > 12){
									$instance_time_array['mon'] = $instance_time_array['mon']-12;
									$instance_time_array['year'] = $instance_time_array['year'] +1;
								}
								$instance_time = mktime($instance_time_array['hours'],$instance_time_array['minutes'],$instance_time_array['seconds'],$instance_time_array['mon'],$instance_time_array['mday'],$instance_time_array['year']);

								//watchdog('calendar_events','Monthly by date (post-i): i:'.date('YMd, G:i',$instance_time).' sw:'.date('YMd, G:i',$start_window).' ew:'.date('YMd, G:i',$end_window));
						}
							
				  }				   
				break;

				case 'YEARLY':
					//watchdog('calendar_events','YEARLY by date: '.$summary);
					if( !$rrule_hash['Interval'] || $rrule_hash['Interval'] < 1){
					 	$rrule_hash['Interval'] = 1;
				  } 
			  	$instance_time_array = getdate($start_time);
						$instance_time = mktime($instance_time_array['hours'],$instance_time_array['minutes'],$instance_time_array['seconds'],$instance_time_array['mon'],$instance_time_array['mday'],$instance_time_array['year']);

							//actually step through and find instances
							while($instance_time < $end_window){
							  //watchdog('calendar_events','YEARLY by date (pre-e): i:'.date('YMd, G:i',$instance_time).' sw:'.date('YMd, G:i',$start_window).' ew:'.date('YMd, G:i',$end_window));
								if($instance_time >= $start_window && !$rrule_hash['Until-time'] || $instance_time < $rrule_hash['Until-time']){
								  //watchdog('calendar_events','YEARLY by date (post-s): i:'.date('YMd, G:i',$instance_time).' sw:'.date('YMd, G:i',$start_window).' ew:'.date('YMd, G:i',$end_window));
									//this if is to catch leap year date changes
									if(date('n',$instance_time)==$instance_time_array['mon']){			
										$day_class=strtolower(date('D',$instance_time));
										$active_events_list[] = array(
											'summary'=>$summary,
											'start_string'=>date('YMd, G:i',$instance_time),
											'start_time'=>$instance_time,
											'day_class'=>$day_class,
											'all_day'=>$all_day_class,
											'event_html'=>'<li class="event '.$all_day_class.' '.$day_class.'"><div class="event-day-date"><span class="week-day">'.date('D',$instance_time).'</span><span class="date">'.date('M j',$instance_time).'</span></div><div class="event-time">'.date('G:i',$instance_time).'</div><div class="event-summary">'.check_plain($summary).'</div><div class="clearfix">&nbsp;</div></li>',			
										);
									}
								}

								$instance_time_array['year'] = $instance_time_array['year'] + $rrule_hash['Interval'];
								$instance_time = mktime($instance_time_array['hours'],$instance_time_array['minutes'],$instance_time_array['seconds'],$instance_time_array['mon'],$instance_time_array['mday'],$instance_time_array['year']);
						}
				break;
			}
		}
		
		
		//keep the event
		$processed_events[$event_id]['summary'] = $summary;		
		$processed_events[$event_id]['start_string'] = $start_string;		
		$processed_events[$event_id]['end_string'] = $end_string;		
		$processed_events[$event_id]['rrule_raw'] = $rrule_raw;		
		//$processed_events[$event_id]['rrule_components'] = $rrule_components;		
		$processed_events[$event_id]['rrule_hash'] = $rrule_hash;		
  }
  
  $processed_event_count = count($processed_events);
	watchdog('calendar_events','processed Events: '."\n".'<pre>'.print_r($processed_events,true).'</pre>');
		
	return $active_events_list;
}


function nscc_display_preprocess(&$variables){
	if (preg_match('/^\/infoscreen/',$_SERVER["REQUEST_URI"])){
		$variables['template_files'] = array("page-infoscreen"); 
		//$variables['content'].= '<pre>'.print_r($variables,true).'</pre>';
	} 
}